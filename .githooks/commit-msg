#\!/bin/sh
#
# Commit message hook for AskProAI
# Enforces Conventional Commits format
#

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Get the commit message
COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Skip if it's a merge commit
if echo "$COMMIT_MSG"  < /dev/null |  grep -q "^Merge"; then
    exit 0
fi

# Skip if it's a revert commit
if echo "$COMMIT_MSG" | grep -q "^Revert"; then
    exit 0
fi

echo "üîç Validating commit message format..."

# Conventional Commits regex pattern
# Format: <type>(<scope>): <subject>
# Or: <type>: <subject>
PATTERN="^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?\!?: .{1,100}$"

# Check if commit message matches the pattern
if \! echo "$COMMIT_MSG" | grep -qE "$PATTERN"; then
    echo -e "${RED}‚úó Invalid commit message format\!${NC}"
    echo ""
    echo -e "${YELLOW}Commit message must follow Conventional Commits format:${NC}"
    echo ""
    echo -e "${BLUE}Format:${NC} <type>(<scope>): <subject>"
    echo -e "${BLUE}Example:${NC} feat(auth): add login functionality"
    echo ""
    echo -e "${BLUE}Allowed types:${NC}"
    echo "  ‚Ä¢ feat     - A new feature"
    echo "  ‚Ä¢ fix      - A bug fix"
    echo "  ‚Ä¢ docs     - Documentation changes"
    echo "  ‚Ä¢ style    - Code style changes (formatting, semicolons, etc)"
    echo "  ‚Ä¢ refactor - Code refactoring without changing functionality"
    echo "  ‚Ä¢ perf     - Performance improvements"
    echo "  ‚Ä¢ test     - Adding or modifying tests"
    echo "  ‚Ä¢ build    - Build system or dependency changes"
    echo "  ‚Ä¢ ci       - CI/CD configuration changes"
    echo "  ‚Ä¢ chore    - Other changes that don't modify src or test files"
    echo "  ‚Ä¢ revert   - Reverts a previous commit"
    echo ""
    echo -e "${BLUE}Rules:${NC}"
    echo "  ‚Ä¢ Use present tense ('add' not 'added')"
    echo "  ‚Ä¢ Use lowercase"
    echo "  ‚Ä¢ No period at the end"
    echo "  ‚Ä¢ Keep subject under 100 characters"
    echo "  ‚Ä¢ Use '\!' after type for breaking changes"
    echo ""
    echo -e "${BLUE}Examples:${NC}"
    echo "  ‚Ä¢ feat: add user authentication"
    echo "  ‚Ä¢ fix(api): resolve null pointer exception"
    echo "  ‚Ä¢ feat\!: change API response format"
    echo "  ‚Ä¢ docs(readme): update installation instructions"
    echo ""
    echo -e "${RED}Your message:${NC} $COMMIT_MSG"
    exit 1
fi

# Extract commit type
TYPE=$(echo "$COMMIT_MSG" | sed -E 's/^([a-z]+)(\(.+\))?\!?: .*/\1/')

# Check for breaking changes
if echo "$COMMIT_MSG" | grep -q "\!:"; then
    echo -e "${YELLOW}‚ö†Ô∏è  Breaking change detected\!${NC}"
    echo "Make sure to document the breaking change in the commit body."
fi

# Warnings for specific types
case "$TYPE" in
    feat)
        echo -e "${GREEN}‚úì New feature commit${NC}"
        echo -e "${YELLOW}Remember to update documentation if needed${NC}"
        ;;
    fix)
        echo -e "${GREEN}‚úì Bug fix commit${NC}"
        echo -e "${YELLOW}Consider adding a test to prevent regression${NC}"
        ;;
    refactor)
        echo -e "${GREEN}‚úì Refactoring commit${NC}"
        echo -e "${YELLOW}Make sure all tests still pass${NC}"
        ;;
    *)
        echo -e "${GREEN}‚úì Valid commit message${NC}"
        ;;
esac

# Additional checks
# Check subject length
SUBJECT=$(echo "$COMMIT_MSG" | sed -E 's/^[a-z]+(\(.+\))?\!?: (.*)$/\2/')
SUBJECT_LENGTH=${#SUBJECT}

if [ $SUBJECT_LENGTH -lt 10 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Subject is very short (${SUBJECT_LENGTH} chars). Consider being more descriptive.${NC}"
fi

# Check for issue references
if echo "$COMMIT_MSG" | grep -qE "#[0-9]+"; then
    echo -e "${GREEN}‚úì Issue reference found${NC}"
fi

# Success
echo -e "${GREEN}‚úì Commit message validation passed\!${NC}"
exit 0
