========= BACKUP & CRON-JOBS =========
Datum der Erfassung: Mo 24. Mär 10:53:26 CET 2025

--- BACKUP-SKRIPT ---
#!/bin/bash

# Umfassendes Backup-Skript für AskProAI
# Sichere Variante mit verbesserter Struktur und Funktionalität

# Basiskonfiguration
TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
BACKUP_DIR="/var/backups/askproai"
DB_BACKUP_DIR="$BACKUP_DIR/db"
FILES_BACKUP_DIR="$BACKUP_DIR/files"
CONFIG_BACKUP_DIR="$BACKUP_DIR/config/config_backup_$TIMESTAMP"
LOGS_DIR="$BACKUP_DIR/logs"
LOG_FILE="$LOGS_DIR/backup_$TIMESTAMP.log"
OFFSITE_ARCHIVE="$BACKUP_DIR/offsite_backup_$TIMESTAMP.tar.gz"

# Datenbank-Zugangsdaten
DB_USER="askproai_user"
DB_PASS="Vb39!pLc#7Lqwp\$X"
DB_NAME="askproai_db"

# Email-Benachrichtigung
ADMIN_EMAIL="fabian@askproai.de"

# Aufbewahrungsdauer
RETAIN_DAYS=14

# Erstelle alle notwendigen Verzeichnisse
mkdir -p "$DB_BACKUP_DIR"
mkdir -p "$FILES_BACKUP_DIR"
mkdir -p "$CONFIG_BACKUP_DIR"
mkdir -p "$LOGS_DIR"

# Logging-Funktion
log() {
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# E-Mail-Benachrichtigung Funktion
send_alert() {
  local subject="$1"
  local message="$2"
  
  # Prüfen ob Mail-Tool verfügbar ist
  if command -v mail &>/dev/null; then
    echo "$message" | mail -s "AskProAI Backup: $subject" "$ADMIN_EMAIL"
  else
    # Mindestens ins Log schreiben, wenn kein Mail-Tool verfügbar
    log "ALERT: $subject - $message"
  fi
}

log "Starte Backup-Prozess"

# Datenbank-Backup
log "Erstelle Datenbank-Backup"
if mysqldump -u"$DB_USER" -p"$DB_PASS" --single-transaction --quick "$DB_NAME" | gzip > "$DB_BACKUP_DIR/backup_db_$TIMESTAMP.sql.gz"; then
  log "Datenbank-Backup erfolgreich erstellt"
else
  log "FEHLER: Datenbank-Backup fehlgeschlagen"
  send_alert "FEHLER - Datenbank-Backup fehlgeschlagen" "Das Datenbank-Backup vom $TIMESTAMP ist fehlgeschlagen. Bitte überprüfen Sie den Server."
  exit 1
fi

# Dateien-Backup mit Ausschlüssen
log "Erstelle Dateien-Backup"
if tar --exclude="vendor" --exclude="node_modules" --exclude=".git" -czf "$FILES_BACKUP_DIR/backup_files_$TIMESTAMP.tar.gz" /var/www/api-gateway; then
  log "Dateien-Backup erfolgreich"
else
  log "FEHLER: Dateien-Backup fehlgeschlagen"
  send_alert "FEHLER - Dateien-Backup fehlgeschlagen" "Das Dateien-Backup vom $TIMESTAMP ist fehlgeschlagen. Bitte überprüfen Sie den Server."
  exit 1
fi

# Konfigurationsbackup erstellen
log "Erstelle Konfigurationsbackup"
cp /var/www/api-gateway/.env "$CONFIG_BACKUP_DIR/" 2>/dev/null
cp /var/www/api-gateway/storage/oauth-*.key "$CONFIG_BACKUP_DIR/" 2>/dev/null
cp /etc/nginx/sites-available/*.conf "$CONFIG_BACKUP_DIR/" 2>/dev/null

# Erstelle ein Gesamtarchiv für mögliches Offsite-Backup
log "Erstelle Gesamtarchiv für Backup-Übersicht"
tar -czf "$OFFSITE_ARCHIVE" -C "$BACKUP_DIR" "db/backup_db_$TIMESTAMP.sql.gz" "config/config_backup_$TIMESTAMP" "files/backup_files_$TIMESTAMP.tar.gz"

# Alte Backups entfernen
log "Entferne alte Backups älter als $RETAIN_DAYS Tage"
find "$DB_BACKUP_DIR" -type f -mtime +$RETAIN_DAYS -delete
find "$FILES_BACKUP_DIR" -type f -mtime +$RETAIN_DAYS -delete
find "$BACKUP_DIR/config" -type d -mtime +$RETAIN_DAYS -exec rm -rf {} \; 2>/dev/null
find "$BACKUP_DIR" -name "offsite_backup_*.tar.gz" -type f -mtime +$RETAIN_DAYS -delete

# Backup-Statistik
DB_SIZE=$(du -h "$DB_BACKUP_DIR/backup_db_$TIMESTAMP.sql.gz" | cut -f1)
FILES_SIZE=$(du -h "$FILES_BACKUP_DIR/backup_files_$TIMESTAMP.tar.gz" | cut -f1)
TOTAL_SIZE=$(du -sh "$BACKUP_DIR" | cut -f1)

log "Backup-Statistik:"
log "- Datenbank-Backup: $DB_SIZE"
log "- Dateien-Backup: $FILES_SIZE"
log "- Gesamtgröße aller Backups: $TOTAL_SIZE"

# Erfolgsmeldung
log "Backup-Prozess erfolgreich abgeschlossen"
send_alert "Erfolg - Backup abgeschlossen" "Das Backup vom $TIMESTAMP wurde erfolgreich abgeschlossen. Backup-Größen: DB: $DB_SIZE, Dateien: $FILES_SIZE"

--- RESTORE-SKRIPT ---
#!/bin/bash

# Erweitertes Wiederherstellungsskript für AskProAI

# Basis-Konfiguration
BACKUP_DIR="/var/backups/askproai"
DB_USER="askproai_user"
DB_PASS="Vb39!pLc#7Lqwp\$X"
DB_NAME="askproai_db"

# Prüfen der Aufrufparameter
if [ "$#" -ne 1 ]; then
  echo "Verwendung: $0 <timestamp>"
  echo "Beispiel: $0 2025-03-16_03-00-00"
  echo "Verfügbare Backups:"
  ls -lt "$BACKUP_DIR/db" | grep -o 'backup_db_[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}_[0-9]\{2\}-[0-9]\{2\}-[0-9]\{2\}.sql.gz' | sed 's/backup_db_//' | sed 's/.sql.gz//' | head -n 10
  exit 1
fi

TIMESTAMP=$1

# Prüfen, ob Backup-Dateien existieren
if [ ! -f "$BACKUP_DIR/db/backup_db_$TIMESTAMP.sql.gz" ]; then
  echo "Datenbank-Backup nicht gefunden: $BACKUP_DIR/db/backup_db_$TIMESTAMP.sql.gz"
  exit 1
fi

if [ ! -f "$BACKUP_DIR/files/backup_files_$TIMESTAMP.tar.gz" ]; then
  echo "Dateien-Backup nicht gefunden: $BACKUP_DIR/files/backup_files_$TIMESTAMP.tar.gz"
  exit 1
fi

# Warnung und Bestätigung
echo "==========================================================================="
echo "ACHTUNG: WIEDERHERSTELLUNG EINES BACKUPS ÜBERSCHREIBT BESTEHENDE DATEN!"
echo "==========================================================================="
echo "Timestamp: $TIMESTAMP"
echo "Datenbank: $DB_NAME wird überschrieben"
echo "Dateien: /var/www/api-gateway wird überschrieben"
echo "==========================================================================="
read -p "Sind Sie ABSOLUT sicher, dass Sie fortfahren möchten? (ja/nein) " -r
echo

if [[ ! $REPLY =~ ^[Jj][Aa]$ ]]; then
  echo "Wiederherstellung abgebrochen."
  exit 1
fi

# Zusätzliche Sicherheitsabfrage
read -p "Geben Sie zur Bestätigung den Timestamp erneut ein: " -r CONFIRM
if [[ "$CONFIRM" != "$TIMESTAMP" ]]; then
  echo "Timestamp stimmt nicht überein. Wiederherstellung abgebrochen."
  exit 1
fi

echo "Starte Wiederherstellung von Backup $TIMESTAMP..."

# Aktuelles Datum für temporäre Sicherung
CURRENT_DATE=$(date +%Y-%m-%d_%H-%M-%S)
TEMP_BACKUP_DIR="$BACKUP_DIR/pre_restore_$CURRENT_DATE"
mkdir -p "$TEMP_BACKUP_DIR"

# Schnelles Sicherheits-Backup der aktuellen Datenbank vor Wiederherstellung
echo "Erstelle Sicherheits-Backup der aktuellen Datenbank..."
mysqldump -u"$DB_USER" -p"$DB_PASS" --single-transaction --quick "$DB_NAME" | gzip > "$TEMP_BACKUP_DIR/pre_restore_db.sql.gz"

# Datenbank wiederherstellen
echo "Stelle Datenbank wieder her..."
if ! zcat "$BACKUP_DIR/db/backup_db_$TIMESTAMP.sql.gz" | mysql -u"$DB_USER" -p"$DB_PASS" "$DB_NAME"; then
  echo "FEHLER: Datenbank-Wiederherstellung fehlgeschlagen!"
  echo "Das vor-Wiederherstellungs-Backup finden Sie unter: $TEMP_BACKUP_DIR"
  exit 1
fi

# Dienste stoppen
echo "Stoppe Webserver und PHP-FPM..."
sudo systemctl stop nginx
sudo systemctl stop php8.2-fpm

# Dateien wiederherstellen
echo "Stelle Dateien wieder her..."
if ! sudo tar -xzf "$BACKUP_DIR/files/backup_files_$TIMESTAMP.tar.gz" -C /var/www/api-gateway --overwrite; then
  echo "FEHLER: Dateien-Wiederherstellung fehlgeschlagen!"
  echo "Der Webserver wurde gestoppt. Bitte manuell überprüfen und neu starten."
  exit 1
fi

# Berechtigungen setzen
sudo chown -R www-data:www-data /var/www/api-gateway

# Konfiguration wiederherstellen (falls vorhanden)
if [ -d "$BACKUP_DIR/config/config_backup_$TIMESTAMP" ]; then
  echo "Stelle Konfiguration wieder her..."
  sudo cp "$BACKUP_DIR/config/config_backup_$TIMESTAMP/.env" /var/www/api-gateway/ 2>/dev/null
  sudo cp "$BACKUP_DIR/config/config_backup_$TIMESTAMP/oauth-"* /var/www/api-gateway/storage/ 2>/dev/null
fi

# Cache leeren
echo "Leere Cache..."
cd /var/www/api-gateway
sudo -u www-data php artisan config:clear
sudo -u www-data php artisan view:clear
sudo -u www-data php artisan route:clear
sudo -u www-data php artisan cache:clear
sudo -u www-data php artisan optimize

# Webserver neu starten
echo "Starte Webserver und PHP-FPM..."
sudo systemctl start php8.2-fpm
sudo systemctl start nginx

# Überprüfen, ob der Webserver läuft
if systemctl is-active --quiet nginx; then
  echo "Nginx läuft wieder."
else
  echo "WARNUNG: Nginx konnte nicht gestartet werden. Bitte überprüfen!"
fi

if systemctl is-active --quiet php8.2-fpm; then
  echo "PHP-FPM läuft wieder."
else
  echo "WARNUNG: PHP-FPM konnte nicht gestartet werden. Bitte überprüfen!"
fi

echo "==========================================================================="
echo "Wiederherstellung abgeschlossen!"
echo "Timestamp des wiederhergestellten Backups: $TIMESTAMP"
echo "Vor-Wiederherstellungs-Backup: $TEMP_BACKUP_DIR"
echo "==========================================================================="#

--- SYSTEMWEITE CRON-JOBS ---
# Tägliches Backup der AskProAI-Anwendung um 3 Uhr morgens
0 3 * * * /var/www/api-gateway/scripts/backup.sh
30 3 * * * /var/www/api-gateway-staging/scripts/staging-backup.sh

# Optional: Weitere Backups (falls benötigt)
# 0 2 * * * /var/www/api-gateway/scripts/backup-docs.sh

--- ROOT CRON-JOBS ---
# Tägliches Backup der AskProAI-Anwendung um 3 Uhr morgens
0 3 * * * /var/www/api-gateway/scripts/backup.sh
30 3 * * * /var/www/api-gateway-staging/scripts/staging-backup.sh

# Optional: Weitere Backups (falls benötigt)
# 0 2 * * * /var/www/api-gateway/scripts/backup-docs.sh

--- WWW-DATA CRON-JOBS ---

--- BACKUP-VERZEICHNIS STRUKTUR ---
/var/backups/askproai
/var/backups/askproai/config
/var/backups/askproai/config/config_backup_2025-03-21_03-00-01
/var/backups/askproai/config/config_backup_2025-03-22_03-00-01
/var/backups/askproai/config/2025-03-17_11-01-48
/var/backups/askproai/config/config_backup_2025-03-19_03-00-01
/var/backups/askproai/config/config_backup_2025-03-17_11-09-56
/var/backups/askproai/config/config_backup_2025-03-23_03-00-01
/var/backups/askproai/config/config_backup_2025-03-22_18-02-25
/var/backups/askproai/config/config_backup_2025-03-17_11-07-14
/var/backups/askproai/config/config_backup_2025-03-20_03-00-01
/var/backups/askproai/config/config_backup_2025-03-24_03-00-01
/var/backups/askproai/config/2025-03-17_10-31-43
/var/backups/askproai/config/config_backup_2025-03-18_03-00-01
/var/backups/askproai/db
/var/backups/askproai/logs
/var/backups/askproai/documentation
/var/backups/askproai/files

--- LETZTE 5 BACKUP-DATEIEN ---
/var/backups/askproai/offsite_backup_2025-03-24_03-00-01.tar.gz
/var/backups/askproai/offsite_backup_2025-03-23_03-00-01.tar.gz
/var/backups/askproai/offsite_backup_2025-03-22_18-02-25.tar.gz
/var/backups/askproai/files/www_2025-03-17_11-01-48.tar.gz
/var/backups/askproai/files/backup_files_2025-03-24_03-00-01.tar.gz

