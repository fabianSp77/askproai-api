#!/bin/bash

# 500 Error Prevention Script
# Generated by /sc:troubleshoot
# Prevents common causes of 500 errors

set -e

echo "üõ°Ô∏è 500 Error Prevention Check"
echo "=============================="
echo ""

ERRORS=0

# 1. Check PHP Memory Limit
echo -n "‚úì PHP Memory Limit... "
MEM_LIMIT=$(grep "memory_limit" /etc/php/8.3/fpm/pool.d/www.conf | grep -v "^;" | tail -1 | cut -d'=' -f2 | tr -d ' ')
if [[ "$MEM_LIMIT" == *"G"* ]]; then
    echo "‚ùå WARNING: $MEM_LIMIT is too high!"
    ERRORS=$((ERRORS + 1))
else
    echo "‚úÖ $MEM_LIMIT"
fi

# 2. Check Database Connection
echo -n "‚úì Database Connection... "
if php artisan tinker --execute="DB::connection()->getPdo();" > /dev/null 2>&1; then
    echo "‚úÖ Connected"
else
    echo "‚ùå FAILED"
    ERRORS=$((ERRORS + 1))
fi

# 3. Check for Duplicate Resource Files
echo -n "‚úì Duplicate Resource Files... "
DUPLICATES=$(find /var/www/api-gateway/app/Filament/Resources -name "*Optimized.php" 2>/dev/null | wc -l)
if [ "$DUPLICATES" -gt 0 ]; then
    echo "‚ùå Found $DUPLICATES duplicate files"
    ERRORS=$((ERRORS + 1))
else
    echo "‚úÖ None found"
fi

# 4. Check Calls Table Indexes
echo -n "‚úì Calls Table Indexes... "
INDEX_COUNT=$(php artisan tinker --execute="echo count(DB::select('SHOW INDEX FROM calls'));" 2>/dev/null)
if [ "$INDEX_COUNT" -gt 64 ]; then
    echo "‚ùå $INDEX_COUNT indexes (max 64)"
    ERRORS=$((ERRORS + 1))
else
    echo "‚úÖ $INDEX_COUNT indexes"
fi

# 5. Check Service Status
echo -n "‚úì PHP-FPM Status... "
if systemctl is-active php8.3-fpm > /dev/null; then
    echo "‚úÖ Running"
else
    echo "‚ùå Not running"
    ERRORS=$((ERRORS + 1))
fi

echo -n "‚úì MariaDB Status... "
if systemctl is-active mariadb > /dev/null; then
    echo "‚úÖ Running"
else
    echo "‚ùå Not running"
    ERRORS=$((ERRORS + 1))
fi

# 6. Check Disk Space
echo -n "‚úì Disk Space... "
DISK_USAGE=$(df / | tail -1 | awk '{print $5}' | tr -d '%')
if [ "$DISK_USAGE" -gt 90 ]; then
    echo "‚ùå ${DISK_USAGE}% used (critical)"
    ERRORS=$((ERRORS + 1))
else
    echo "‚úÖ ${DISK_USAGE}% used"
fi

# 7. Check Error Logs
echo -n "‚úì Recent Errors... "
ERROR_COUNT=$(tail -100 /var/www/api-gateway/storage/logs/laravel.log | grep -c "ERROR" || true)
if [ "$ERROR_COUNT" -gt 10 ]; then
    echo "‚ùå $ERROR_COUNT errors in last 100 lines"
    ERRORS=$((ERRORS + 1))
else
    echo "‚úÖ $ERROR_COUNT errors"
fi

# Summary
echo ""
echo "=============================="
if [ "$ERRORS" -eq 0 ]; then
    echo "‚úÖ All checks passed! System healthy."
else
    echo "‚ö†Ô∏è Found $ERRORS potential issues!"
    echo ""
    echo "Recommended actions:"
    [ "$INDEX_COUNT" -gt 64 ] && echo "  ‚Ä¢ Run: php /var/www/api-gateway/scripts/cleanup-calls-indexes.php"
    [ "$DUPLICATES" -gt 0 ] && echo "  ‚Ä¢ Run: rm /var/www/api-gateway/app/Filament/Resources/*Optimized.php"
    [ "$DISK_USAGE" -gt 90 ] && echo "  ‚Ä¢ Clear logs: truncate -s 0 /var/www/api-gateway/storage/logs/*.log"
fi

exit $ERRORS