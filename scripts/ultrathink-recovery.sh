#!/bin/bash
#
# UltraThink Recovery Script - Systematische Repository-Bereinigung
# Generated by SuperClaude Framework
# 

set -e  # Exit on error
set -u  # Exit on undefined variable

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
BACKUP_DIR="/var/www/backups/ultrathink-recovery-$(date +%Y%m%d-%H%M%S)"
PROJECT_DIR="/var/www/api-gateway"
LOG_FILE="${BACKUP_DIR}/recovery.log"

# Create backup directory
mkdir -p "${BACKUP_DIR}"

# Logging function
log() {
    echo -e "${2:-$NC}$1${NC}"
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" >> "${LOG_FILE}"
}

# Step tracking
CURRENT_STEP=0
TOTAL_STEPS=10

step() {
    CURRENT_STEP=$((CURRENT_STEP + 1))
    log "\n[Step ${CURRENT_STEP}/${TOTAL_STEPS}] $1" "${BLUE}"
}

# Main execution
log "🚀 UltraThink Recovery Script Started" "${GREEN}"
log "Backup Directory: ${BACKUP_DIR}"
log "Project Directory: ${PROJECT_DIR}"

# Step 1: Create comprehensive backup
step "Creating comprehensive backup of current state"
cd "${PROJECT_DIR}"

# Backup all untracked files
if git ls-files --others --exclude-standard | head -1 | grep -q .; then
    tar -czf "${BACKUP_DIR}/untracked-files.tar.gz" \
        $(git ls-files --others --exclude-standard) 2>/dev/null || true
    log "✅ Untracked files backed up" "${GREEN}"
fi

# Backup modified files
if git diff --name-only | head -1 | grep -q .; then
    tar -czf "${BACKUP_DIR}/modified-files.tar.gz" \
        $(git diff --name-only) 2>/dev/null || true
    log "✅ Modified files backed up" "${GREEN}"
fi

# Full project backup
tar -czf "${BACKUP_DIR}/full-project-backup.tar.gz" \
    --exclude='.git' \
    --exclude='node_modules' \
    --exclude='vendor' \
    --exclude='storage/logs/*' \
    --exclude='storage/framework/cache/*' \
    --exclude='storage/framework/sessions/*' \
    --exclude='storage/framework/views/*' \
    . 2>/dev/null || true
log "✅ Full project backed up" "${GREEN}"

# Step 2: Categorize untracked files
step "Categorizing untracked files"
cd "${PROJECT_DIR}"

# Create categorization report
{
    echo "# Untracked Files Categorization"
    echo "Generated: $(date)"
    echo ""
    
    echo "## Documentation Files (.md)"
    git ls-files --others --exclude-standard | grep '\.md$' | head -50
    echo "Total: $(git ls-files --others --exclude-standard | grep '\.md$' | wc -l)"
    echo ""
    
    echo "## Backup Files (.bak, .backup)"
    git ls-files --others --exclude-standard | grep -E '\.(bak|backup)' | head -20
    echo "Total: $(git ls-files --others --exclude-standard | grep -E '\.(bak|backup)' | wc -l)"
    echo ""
    
    echo "## Test Files"
    git ls-files --others --exclude-standard | grep -E 'test|spec' | head -20
    echo "Total: $(git ls-files --others --exclude-standard | grep -E 'test|spec' | wc -l)"
    echo ""
    
    echo "## Script Files (.sh)"
    git ls-files --others --exclude-standard | grep '\.sh$' | head -20
    echo "Total: $(git ls-files --others --exclude-standard | grep '\.sh$' | wc -l)"
    echo ""
    
    echo "## PHP Files"
    git ls-files --others --exclude-standard | grep '\.php$' | head -20
    echo "Total: $(git ls-files --others --exclude-standard | grep '\.php$' | wc -l)"
    echo ""
    
} > "${BACKUP_DIR}/file-categorization.md"
log "✅ File categorization complete" "${GREEN}"

# Step 3: Analyze deleted files
step "Analyzing deleted files"
{
    echo "# Deleted Files Analysis"
    echo "Generated: $(date)"
    echo ""
    echo "## Migration Files"
    git status --porcelain | grep '^.D' | grep 'migration' | head -20
    echo ""
    echo "## Documentation Files"
    git status --porcelain | grep '^.D' | grep '\.md$' | head -20
    echo ""
    echo "## Total Deleted: $(git status --porcelain | grep '^.D' | wc -l)"
} > "${BACKUP_DIR}/deleted-files-analysis.md"
log "✅ Deleted files analyzed" "${GREEN}"

# Step 4: Create cleanup recommendations
step "Generating cleanup recommendations"
{
    echo "# Cleanup Recommendations"
    echo "Generated: $(date)"
    echo ""
    echo "## High Priority (Immediate Action)"
    echo "1. Remove all .bak and .backup files"
    echo "2. Consolidate documentation into /docs directory"
    echo "3. Commit critical modified files"
    echo "4. Review and restore needed deleted files"
    echo ""
    echo "## Medium Priority (This Week)"
    echo "1. Move test files to proper test directories"
    echo "2. Remove duplicate documentation"
    echo "3. Clean up script files"
    echo ""
    echo "## Low Priority (This Month)"
    echo "1. Archive old reports"
    echo "2. Standardize file naming"
    echo "3. Update .gitignore"
} > "${BACKUP_DIR}/cleanup-recommendations.md"
log "✅ Recommendations generated" "${GREEN}"

# Step 5: Create safe cleanup script
step "Creating safe cleanup script"
cat > "${BACKUP_DIR}/safe-cleanup.sh" << 'EOF'
#!/bin/bash
# Safe cleanup script - review before running!

echo "This script will clean up the repository. Review each action carefully."
echo "Press Ctrl+C to abort at any time."
echo ""

# Remove backup files
echo "Removing backup files (.bak, .backup)..."
read -p "Continue? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    find . -name "*.bak" -type f -delete
    find . -name "*.backup" -type f -delete
    echo "✅ Backup files removed"
fi

# Move documentation to docs directory
echo "Moving documentation files to /docs..."
read -p "Continue? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    mkdir -p docs/reports
    mv *_REPORT.md docs/reports/ 2>/dev/null || true
    mv *_STATUS.md docs/reports/ 2>/dev/null || true
    echo "✅ Documentation moved"
fi

# Add to .gitignore
echo "Updating .gitignore..."
read -p "Continue? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    cat >> .gitignore << 'GITIGNORE'

# UltraThink Cleanup
*.bak
*.backup
*.old
*.tmp
/docs/reports/
/scripts/temp/
.DS_Store
Thumbs.db
GITIGNORE
    echo "✅ .gitignore updated"
fi

echo "Cleanup complete! Review changes with 'git status'"
EOF
chmod +x "${BACKUP_DIR}/safe-cleanup.sh"
log "✅ Safe cleanup script created" "${GREEN}"

# Step 6: Test Cal.com V2
step "Testing Cal.com V2 Migration"
cd "${PROJECT_DIR}"
php artisan calcom:migration-status --health > "${BACKUP_DIR}/calcom-health.txt" 2>&1 || {
    log "⚠️  Cal.com health check failed (expected after our fix)" "${YELLOW}"
}

# Step 7: Database migration check
step "Checking database migrations"
php artisan migrate:status > "${BACKUP_DIR}/migration-status.txt" 2>&1 || {
    log "⚠️  Migration status check failed" "${YELLOW}"
}

# Step 8: Run tests
step "Running test suite"
php artisan test --parallel > "${BACKUP_DIR}/test-results.txt" 2>&1 || {
    log "⚠️  Some tests failed" "${YELLOW}"
}

# Step 9: Generate final report
step "Generating final recovery report"
{
    echo "# UltraThink Recovery Report"
    echo "Generated: $(date)"
    echo "Backup Location: ${BACKUP_DIR}"
    echo ""
    echo "## Statistics"
    echo "- Untracked files: $(git ls-files --others --exclude-standard | wc -l)"
    echo "- Modified files: $(git diff --name-only | wc -l)"
    echo "- Deleted files: $(git status --porcelain | grep '^.D' | wc -l)"
    echo "- Total changes: $(git status --porcelain | wc -l)"
    echo ""
    echo "## Backup Contents"
    ls -lh "${BACKUP_DIR}/"*.tar.gz 2>/dev/null | awk '{print "- " $9 ": " $5}'
    echo ""
    echo "## Next Steps"
    echo "1. Review file categorization: ${BACKUP_DIR}/file-categorization.md"
    echo "2. Review cleanup recommendations: ${BACKUP_DIR}/cleanup-recommendations.md"
    echo "3. Run safe cleanup: ${BACKUP_DIR}/safe-cleanup.sh"
    echo "4. Create feature branches for organized commits"
    echo "5. Test Cal.com V2 migration thoroughly"
    echo ""
    echo "## Critical Actions Required"
    echo "- [ ] Backup verified"
    echo "- [ ] Cleanup script reviewed"
    echo "- [ ] Cal.com V2 tested"
    echo "- [ ] Database migrations verified"
    echo "- [ ] Test suite passing"
} > "${BACKUP_DIR}/RECOVERY_REPORT.md"
log "✅ Recovery report generated" "${GREEN}"

# Step 10: Create restoration script
step "Creating restoration script (in case of issues)"
cat > "${BACKUP_DIR}/restore.sh" << 'EOF'
#!/bin/bash
# Emergency restoration script

echo "⚠️  WARNING: This will restore the project to its previous state"
read -p "Are you sure? Type 'RESTORE' to continue: " confirm

if [ "$confirm" != "RESTORE" ]; then
    echo "Restoration cancelled"
    exit 1
fi

BACKUP_DIR="$(dirname "$0")"
PROJECT_DIR="/var/www/api-gateway"

cd "${PROJECT_DIR}"

# Restore untracked files
if [ -f "${BACKUP_DIR}/untracked-files.tar.gz" ]; then
    tar -xzf "${BACKUP_DIR}/untracked-files.tar.gz"
    echo "✅ Untracked files restored"
fi

# Restore modified files
if [ -f "${BACKUP_DIR}/modified-files.tar.gz" ]; then
    tar -xzf "${BACKUP_DIR}/modified-files.tar.gz"
    echo "✅ Modified files restored"
fi

echo "Restoration complete!"
EOF
chmod +x "${BACKUP_DIR}/restore.sh"
log "✅ Restoration script created" "${GREEN}"

# Final summary
echo ""
log "════════════════════════════════════════════════════════" "${GREEN}"
log "🎉 UltraThink Recovery Script Complete!" "${GREEN}"
log "════════════════════════════════════════════════════════" "${GREEN}"
echo ""
log "📁 Backup Location: ${BACKUP_DIR}" "${BLUE}"
log "📊 Total Files Backed Up: $(find ${BACKUP_DIR} -type f | wc -l)" "${BLUE}"
log "📝 Recovery Report: ${BACKUP_DIR}/RECOVERY_REPORT.md" "${BLUE}"
echo ""
log "Next Steps:" "${YELLOW}"
log "1. Review the recovery report" "${YELLOW}"
log "2. Run the safe cleanup script" "${YELLOW}"
log "3. Commit changes in organized branches" "${YELLOW}"
echo ""
log "To start cleanup: ${BACKUP_DIR}/safe-cleanup.sh" "${GREEN}"
log "In case of issues: ${BACKUP_DIR}/restore.sh" "${RED}"