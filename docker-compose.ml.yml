version: '3.9'

services:
  # ML Service with FastAPI
  ml-service:
    build: 
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: askpro-ml-service
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=postgresql://ml_user:ml_secure_pass@postgres-ml:5432/ml_predictions
      - REDIS_URL=redis://redis-ml:6379/0
      - MYSQL_HOST=host.docker.internal
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MODEL_UPDATE_INTERVAL=3600
      - DRIFT_CHECK_THRESHOLD=0.15
      - LOG_LEVEL=INFO
      - WORKERS=4
    volumes:
      - ./ml-service:/app
      - ml-models:/app/models
      - ml-data:/app/data
    depends_on:
      postgres-ml:
        condition: service_healthy
      redis-ml:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
    networks:
      - ml-network
      - default

  # PostgreSQL for ML data and model storage
  postgres-ml:
    image: postgres:15-alpine
    container_name: askpro-postgres-ml
    environment:
      POSTGRES_DB: ml_predictions
      POSTGRES_USER: ml_user
      POSTGRES_PASSWORD: ml_secure_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=de_DE.UTF-8"
    volumes:
      - postgres-ml-data:/var/lib/postgresql/data
      - ./ml-service/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ml_user -d ml_predictions"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ml-network

  # Redis for ML caching and event streaming
  redis-ml:
    image: redis:7-alpine
    container_name: askpro-redis-ml
    command: >
      redis-server 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfilename "ml-appendonly.aof"
    volumes:
      - redis-ml-data:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ml-network

  # Kafka for event streaming (future migration from Redis Streams)
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: askpro-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168  # 7 days
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_COMPRESSION_TYPE: 'snappy'
    ports:
      - "29092:29092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ml-network

  # Zookeeper for Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: askpro-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 5
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ml-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: askpro-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ml-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: askpro-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - ml-network

volumes:
  postgres-ml-data:
  redis-ml-data:
  kafka-data:
  zookeeper-data:
  zookeeper-logs:
  ml-models:
  ml-data:
  prometheus-data:
  grafana-data:

networks:
  ml-network:
    driver: bridge
  default:
    external: true
    name: api-gateway_default