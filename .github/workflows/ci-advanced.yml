name: Advanced CI Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday
  workflow_dispatch:

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '20'
  MYSQL_VERSION: '8.0'
  COVERAGE_THRESHOLD: 70

jobs:
  # Job 1: Code Quality & Linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
        
      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, gd, redis, memcached
          coverage: none
          tools: composer:v2, php-cs-fixer, phpstan, psalm
          
      - name: 📦 Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        
      - name: 🗄️ Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            
      - name: 📥 Install dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
        
      - name: 🎨 Check code style (Laravel Pint)
        run: |
          composer pint:test
          echo "### ✅ Code Style Check Passed" >> $GITHUB_STEP_SUMMARY
        
      - name: 🔍 Run PHPStan analysis
        run: |
          composer stan
          echo "### ✅ Static Analysis Passed" >> $GITHUB_STEP_SUMMARY
          
      - name: 🔐 Security audit
        run: |
          composer audit --no-dev
          echo "### ✅ Security Audit Passed" >> $GITHUB_STEP_SUMMARY

  # Job 2: Frontend Assets
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install NPM dependencies
        run: npm ci
        
      - name: 🔨 Build production assets
        run: npm run build
        
      - name: 🧪 Run JavaScript tests
        run: npm test -- --coverage
        continue-on-error: true
        
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-assets
          path: |
            public/build
            public/mix-manifest.json
          retention-days: 7
          
      - name: 📊 Asset size check
        run: |
          echo "### 📦 Asset Sizes" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          find public/build -name "*.js" -o -name "*.css" | xargs ls -lh >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Job 3: PHP Unit Tests
  unit-tests:
    name: Unit Tests (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    needs: [code-quality]
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        php: ['8.2', '8.3']
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, gd, redis
          coverage: pcov
          
      - name: 📦 Install dependencies
        run: composer install --no-interaction --prefer-dist
        
      - name: 🗄️ Prepare database
        run: |
          mkdir -p database
          touch database/database.sqlite
          
      - name: 🔧 Configure Laravel
        run: |
          cp .env.testing .env
          php artisan key:generate
          php artisan config:cache
          
      - name: 🧪 Execute unit tests
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: :memory:
        run: |
          php artisan test --testsuite=Unit \
            --coverage \
            --coverage-clover=coverage.xml \
            --log-junit=junit.xml
            
      - name: 📊 Upload coverage
        if: matrix.php == '8.3'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unit
          name: Unit Tests
          
      - name: 📤 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-unit-php${{ matrix.php }}
          path: junit.xml
          retention-days: 7
          
      - name: 📊 Test summary
        if: always()
        run: |
          echo "### 🧪 Unit Test Results (PHP ${{ matrix.php }})" >> $GITHUB_STEP_SUMMARY
          php artisan test:summary --format=markdown >> $GITHUB_STEP_SUMMARY || true

  # Job 4: Feature & Integration Tests
  feature-tests:
    name: Feature Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    timeout-minutes: 30
    
    services:
      mysql:
        image: mysql:${{ env.MYSQL_VERSION }}
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, mysql, pdo_mysql, gd, redis
          coverage: pcov
          
      - name: 📦 Install dependencies
        run: composer install --no-interaction --prefer-dist
        
      - name: 🔧 Configure Laravel
        run: |
          cp .env.testing .env
          php artisan key:generate
          
      - name: 🗄️ Run migrations
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password
        run: |
          php artisan migrate:fresh --seed
          
      - name: 🧪 Execute feature tests
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password
          REDIS_HOST: 127.0.0.1
          CACHE_DRIVER: redis
          SESSION_DRIVER: redis
          QUEUE_CONNECTION: redis
        run: |
          php artisan test --testsuite=Feature \
            --coverage \
            --coverage-clover=coverage-feature.xml \
            --log-junit=junit-feature.xml
            
      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage-feature.xml
          flags: feature
          name: Feature Tests

  # Job 5: E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend, feature-tests]
    timeout-minutes: 30
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    services:
      mysql:
        image: mysql:${{ env.MYSQL_VERSION }}
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, mysql, pdo_mysql, gd, redis
          coverage: none
          
      - name: 📦 Install dependencies
        run: |
          composer install --no-interaction --prefer-dist
          npm ci
          
      - name: 🔧 Setup Laravel
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password
        run: |
          cp .env.testing .env
          php artisan key:generate
          php artisan migrate:fresh --seed
          npm run build
          
      - name: 🌐 Start Laravel server
        run: |
          php artisan serve --no-reload &
          sleep 5
          
      - name: 🧪 Run E2E tests
        run: |
          php artisan test --testsuite=E2E --log-junit=junit-e2e.xml
          
      - name: 📤 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-e2e
          path: junit-e2e.xml
          retention-days: 7

  # Job 6: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: 🔐 Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # Job 7: Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [feature-tests]
    if: github.event_name == 'pull_request'
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite
          coverage: none
          
      - name: 📦 Install dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
        
      - name: 🏃 Run performance benchmarks
        run: |
          php artisan benchmark:run --iterations=100 --format=json > benchmark-results.json
          
      - name: 📊 Generate performance report
        run: |
          echo "### 🚀 Performance Benchmark Results" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat benchmark-results.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Job 8: Documentation
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          coverage: none
          
      - name: 📦 Install dependencies
        run: composer install --no-interaction --prefer-dist
        
      - name: 📚 Check documentation health
        run: |
          php artisan docs:check-updates --json > docs-health.json
          
      - name: 📊 Documentation report
        run: |
          echo "### 📚 Documentation Health" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat docs-health.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Final Job: CI Summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, frontend, unit-tests, feature-tests, security, docs]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 📊 Generate CI Summary
        run: |
          echo "# 🎯 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check each job status
          if [[ "${{ needs.code-quality.result }}" == "success" ]]; then
            echo "✅ Code Quality: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code Quality: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.frontend.result }}" == "success" ]]; then
            echo "✅ Frontend Build: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Frontend Build: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
            echo "✅ Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.feature-tests.result }}" == "success" ]]; then
            echo "✅ Feature Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Feature Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ Security Scan: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security Scan: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.docs.result }}" == "success" ]]; then
            echo "✅ Documentation: Up to date" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Documentation: Needs update" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          
      - name: 🚦 Check overall status
        run: |
          if [[ "${{ needs.code-quality.result }}" != "success" || 
                "${{ needs.frontend.result }}" != "success" || 
                "${{ needs.unit-tests.result }}" != "success" || 
                "${{ needs.feature-tests.result }}" != "success" || 
                "${{ needs.security.result }}" != "success" ]]; then
            echo "❌ CI Pipeline failed!"
            exit 1
          else
            echo "✅ CI Pipeline passed!"
          fi