# ==============================================================================
# Build Artifacts Workflow
# ==============================================================================
# Purpose: Build frontend (Vite) and backend (Composer) in CI
# Trigger: Push to main/develop, Pull Requests
# Output: Build artifacts for deployment (vendor/ + public/build/)
# ==============================================================================

name: Build Artifacts

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:  # Manual trigger

env:
  NODE_VERSION: '18.17.0'
  PHP_VERSION: '8.2'

jobs:
  build-frontend:
    name: Build Frontend Assets
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Frontend Dependencies
        run: |
          echo "📦 Installing npm dependencies (deterministic)..."
          npm ci --prefer-offline

      - name: Build Frontend Assets
        run: |
          echo "🔨 Building frontend assets with Vite..."
          npm run build

      - name: Verify Build Output
        run: |
          echo "✅ Verifying build artifacts..."
          ls -lh public/build/manifest.json
          ls -lh public/build/assets/ | head -10

          # Check manifest exists
          if [ ! -f "public/build/manifest.json" ]; then
            echo "❌ Build failed: manifest.json not found"
            exit 1
          fi

          echo "✅ Frontend build successful"

      - name: Upload Frontend Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: |
            public/build/
            !public/build/**/*.map
          retention-days: 7

  build-backend:
    name: Build Backend Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer Dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Backend Dependencies
        run: |
          echo "📦 Installing Composer dependencies (production mode)..."
          composer install \
            --no-dev \
            --no-interaction \
            --prefer-dist \
            --optimize-autoloader \
            --no-progress

      - name: Verify Vendor Directory
        run: |
          echo "✅ Verifying vendor directory..."
          ls -lah vendor/ | head -10
          du -sh vendor/

          echo "✅ Backend build successful"

      - name: Upload Backend Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: vendor/
          retention-days: 7

  create-deployment-bundle:
    name: Create Deployment Bundle
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    timeout-minutes: 10

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Frontend Artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: public/build/

      - name: Download Backend Artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: vendor/

      - name: Create Deployment Tarball
        run: |
          echo "📦 Creating deployment bundle..."

          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BUNDLE_NAME="deploy-bundle-${GITHUB_SHA:0:8}-${TIMESTAMP}.tar.gz"

          # Create tarball with built artifacts
          tar -czf "$BUNDLE_NAME" \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='tests' \
            --exclude='.env*' \
            .

          # Calculate checksum
          sha256sum "$BUNDLE_NAME" > "${BUNDLE_NAME}.sha256"

          # Display info
          ls -lh "$BUNDLE_NAME"
          cat "${BUNDLE_NAME}.sha256"

          echo "bundle_name=$BUNDLE_NAME" >> $GITHUB_OUTPUT

      - name: Upload Deployment Bundle
        uses: actions/upload-artifact@v4
        with:
          name: deployment-bundle-${{ github.sha }}
          path: |
            deploy-bundle-*.tar.gz
            deploy-bundle-*.tar.gz.sha256
          retention-days: 30

  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    timeout-minutes: 20

    services:
      mysql:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, pdo_mysql, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Download Backend Artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: vendor/

      - name: Setup Environment
        run: |
          cp .env.example .env.testing
          php artisan key:generate --env=testing

      - name: Run Unit Tests
        run: |
          echo "🧪 Running PHPUnit tests..."
          vendor/bin/pest --testdox

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.sha }}
          path: storage/logs/
          retention-days: 7

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, create-deployment-bundle, run-tests]
    if: always()

    steps:
      - name: Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Build | ${{ needs.build-frontend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Build | ${{ needs.build-backend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Bundle | ${{ needs.create-deployment-bundle.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.run-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
