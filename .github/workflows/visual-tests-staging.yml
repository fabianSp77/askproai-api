# ==============================================================================
# Visual Tests for Staging - Selenium + Firefox ESR (ARM64-compatible)
# ==============================================================================
# Purpose: Browser-based visual regression testing with Selenium
# Trigger: After successful staging deployment
# Architecture: ARM64-compatible (Firefox ESR + Geckodriver)
# Coverage: Critical UI paths, asset loading, responsiveness
# Retention: Screenshots 30 days
# ==============================================================================

name: Visual Tests (Staging)

on:
  workflow_run:
    workflows: ["Deploy to Staging"]
    types: [completed]
    branches: [develop]

  workflow_dispatch:  # Manual trigger for testing

env:
  BASE_URL: https://staging.askproai.de

jobs:
  # ===========================================================================
  # Visual tests with Selenium + Firefox ESR
  # ===========================================================================
  visual-tests-firefox:
    name: Visual Tests - Firefox ESR
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    timeout-minutes: 20

    steps:
      # -----------------------------------------------------------------------
      # 1. Setup
      # -----------------------------------------------------------------------
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Firefox ESR
        run: |
          sudo apt-get update
          sudo apt-get install -y firefox-esr

      - name: Install Geckodriver
        run: |
          # Get latest geckodriver (ARM64-compatible)
          GECKO_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | grep tag_name | cut -d '"' -f 4)
          wget https://github.com/mozilla/geckodriver/releases/download/${GECKO_VERSION}/geckodriver-${GECKO_VERSION}-linux64.tar.gz
          tar -xzf geckodriver-${GECKO_VERSION}-linux64.tar.gz
          sudo mv geckodriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/geckodriver
          geckodriver --version

      - name: Install Python Dependencies
        run: |
          pip install selenium pytest pytest-html pillow requests

      - name: Verify Setup
        run: |
          firefox-esr --version
          geckodriver --version
          python --version

      # -----------------------------------------------------------------------
      # 2. Run visual tests
      # -----------------------------------------------------------------------
      - name: Run Selenium Tests
        run: |
          python tests/visual/selenium_tests.py --base-url="${{ env.BASE_URL }}"
        env:
          BASE_URL: ${{ env.BASE_URL }}
          SCREENSHOT_DIR: test-results/screenshots

      # -----------------------------------------------------------------------
      # 3. Upload artifacts
      # -----------------------------------------------------------------------
      - name: Upload Screenshots (All Tests)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-screenshots-${{ github.sha }}
          path: test-results/screenshots/**/*.png
          retention-days: 30

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-report-${{ github.sha }}
          path: test-results/report.html
          retention-days: 30

      - name: Upload Failure Screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-failures-${{ github.sha }}
          path: test-results/screenshots/**/FAILED_*.png
          retention-days: 30

      # -----------------------------------------------------------------------
      # 4. Summary
      # -----------------------------------------------------------------------
      - name: Generate Summary
        if: always()
        run: |
          echo "## Visual Tests Summary (Selenium + Firefox ESR)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Base URL**: ${{ env.BASE_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Browser**: Firefox ESR (ARM64-compatible)" >> $GITHUB_STEP_SUMMARY
          echo "**Driver**: Geckodriver" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ job.status }}" == "success" ]; then
              echo "✅ **All visual tests passed!**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Screenshots**: Uploaded to artifacts (30 days retention)" >> $GITHUB_STEP_SUMMARY
          else
              echo "❌ **Visual tests failed!**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Check artifacts for failure screenshots and detailed report." >> $GITHUB_STEP_SUMMARY
          fi

          # List screenshot artifacts
          if [ -d test-results/screenshots ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Screenshots Captured:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              find test-results/screenshots -name "*.png" -type f | wc -l | xargs echo "Total screenshots:"
              find test-results/screenshots -name "*.png" -type f | wc -l >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
          fi
