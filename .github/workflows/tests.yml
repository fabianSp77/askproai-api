name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '20'
  DB_DATABASE: askproai_test
  DB_USERNAME: root
  DB_PASSWORD: root

jobs:
  php-tests:
    name: PHP Tests (PHPUnit)
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: askproai_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql, redis, bcmath, gd, exif, pcntl
          coverage: pcov

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Prepare Laravel Application
        run: |
          cp .env.testing .env
          php artisan key:generate
          php artisan config:cache
          php artisan route:cache

      - name: Run database migrations
        run: php artisan migrate --force
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306

      - name: Run PHP tests with coverage
        run: php artisan test --coverage --coverage-clover=coverage.xml
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          REDIS_HOST: 127.0.0.1

      - name: Upload PHP coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: php
          name: php-coverage

  javascript-tests:
    name: JavaScript Tests (Vitest)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run JavaScript tests with coverage
        run: npm run test:coverage

      - name: Upload JavaScript coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          flags: javascript
          name: javascript-coverage

  api-tests:
    name: API Tests (Newman)
    runs-on: ubuntu-latest
    needs: [php-tests]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: askproai_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql, redis, bcmath, gd, exif, pcntl

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          composer install --no-interaction --prefer-dist
          npm ci

      - name: Prepare Laravel Application
        run: |
          cp .env.testing .env
          php artisan key:generate
          php artisan migrate --force --seed
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306

      - name: Start Laravel server
        run: |
          php artisan serve --no-reload &
          sleep 5
        env:
          DB_HOST: 127.0.0.1
          REDIS_HOST: 127.0.0.1

      - name: Run API tests
        run: npm run test:api:ci

      - name: Upload API test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results
          path: tests/api/results/

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo
          coverage: none

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          composer install --no-interaction --prefer-dist
          npm ci

      - name: Run PHP code style check
        run: composer pint:test

      - name: Run PHPStan
        run: composer stan

      - name: Run ESLint
        run: npm run lint

      - name: Check for security vulnerabilities
        run: |
          composer audit
          npm audit --production

  build:
    name: Build Assets
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: public/build/

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [php-tests, javascript-tests, api-tests, code-quality, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          echo "ðŸš€ Deploying to production..."
          # Add your deployment script here
          # Example: rsync, SSH commands, etc.