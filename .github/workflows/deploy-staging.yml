# ==============================================================================
# Deploy to Staging Workflow
# ==============================================================================
# Purpose: Automatic deployment to staging.askproai.de
# Trigger: After build-artifacts workflow completes successfully
# Pattern: workflow_run (not reusable workflow - GitHub Actions limitation)
# Server: staging.askproai.de
# ==============================================================================

name: Deploy to Staging

on:
  workflow_run:
    workflows: ["Build Artifacts"]
    types: [completed]
    branches: [develop]
  workflow_dispatch:  # Manual trigger

env:
  STAGING_HOST: staging.askproai.de
  STAGING_USER: www-data
  STAGING_BASE_DIR: /var/www/api-gateway-staging
  DOMAIN: staging.askproai.de

jobs:
  # ===========================================================================
  # Deploy to staging server
  # ===========================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    # Only deploy if build-artifacts succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    timeout-minutes: 30
    environment:
      name: staging
      url: https://staging.askproai.de

    steps:
      # -----------------------------------------------------------------------
      # 1. Download build artifacts from completed workflow
      # -----------------------------------------------------------------------
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Deployment Bundle
        uses: actions/download-artifact@v4
        with:
          name: deployment-bundle-${{ github.event.workflow_run.head_sha }}
          path: ./deploy/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      # -----------------------------------------------------------------------
      # 2. Setup SSH access
      # -----------------------------------------------------------------------
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/staging_key
          chmod 600 ~/.ssh/staging_key

          # Add staging server to known_hosts
          ssh-keyscan -H ${{ env.STAGING_HOST }} >> ~/.ssh/known_hosts

      # -----------------------------------------------------------------------
      # 3. Upload deployment bundle to staging
      # -----------------------------------------------------------------------
      - name: Upload Bundle to Staging
        run: |
          echo "üì¶ Uploading deployment bundle to staging..."

          BUNDLE_FILE=$(ls deploy/deploy-bundle-*.tar.gz)
          BUNDLE_NAME=$(basename "$BUNDLE_FILE")

          # Upload to staging server
          scp -i ~/.ssh/staging_key \
              -o StrictHostKeyChecking=no \
              "$BUNDLE_FILE" \
              "${{ env.STAGING_USER }}@${{ env.STAGING_HOST }}:/tmp/"

          echo "‚úÖ Bundle uploaded: $BUNDLE_NAME"
          echo "bundle_name=$BUNDLE_NAME" >> $GITHUB_ENV

      # -----------------------------------------------------------------------
      # 4. Extract bundle and prepare release
      # -----------------------------------------------------------------------
      - name: Prepare Release on Staging
        run: |
          ssh -i ~/.ssh/staging_key \
              -o StrictHostKeyChecking=no \
              ${{ env.STAGING_USER }}@${{ env.STAGING_HOST }} << 'EOF'

          set -euo pipefail

          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          COMMIT_SHA=$(echo ${{ github.event.workflow_run.head_sha }} | cut -c1-8)
          RELEASE_NAME="${TIMESTAMP}-${COMMIT_SHA}"
          RELEASE_PATH="${{ env.STAGING_BASE_DIR }}/releases/${RELEASE_NAME}"

          echo "üéØ Creating release: $RELEASE_NAME"

          # Create release directory
          mkdir -p "$RELEASE_PATH"

          # Extract bundle
          tar -xzf "/tmp/${{ env.bundle_name }}" -C "$RELEASE_PATH"

          # Link shared resources
          cd "$RELEASE_PATH"

          # Link storage
          rm -rf storage
          ln -s "${{ env.STAGING_BASE_DIR }}/shared/storage" storage

          # Link uploads
          rm -rf public/uploads
          ln -s "${{ env.STAGING_BASE_DIR }}/shared/public/uploads" public/uploads

          # Link .env
          ln -s "${{ env.STAGING_BASE_DIR }}/shared/.env/staging.env" .env

          # Set permissions
          chmod -R 775 storage bootstrap/cache

          echo "‚úÖ Release prepared: $RELEASE_PATH"
          echo "RELEASE_PATH=$RELEASE_PATH" >> /tmp/deploy_env
          EOF

      # -----------------------------------------------------------------------
      # 5. Run database migrations
      # -----------------------------------------------------------------------
      - name: Run Migrations
        run: |
          ssh -i ~/.ssh/staging_key \
              -o StrictHostKeyChecking=no \
              ${{ env.STAGING_USER }}@${{ env.STAGING_HOST }} << 'EOF'

          set -euo pipefail
          source /tmp/deploy_env

          echo "üóÑÔ∏è  Running database migrations..."

          cd "$RELEASE_PATH"

          # Backup database before migrations
          mkdir -p "${{ env.STAGING_BASE_DIR }}/shared/storage/backups"
          mysqldump -h 127.0.0.1 -u root askproai_staging \
              --single-transaction \
              --quick | gzip > "${{ env.STAGING_BASE_DIR }}/shared/storage/backups/pre-migration-$(date +%s).sql.gz" 2>/dev/null || true

          # Run migrations
          php artisan migrate --force

          echo "‚úÖ Migrations completed"
          EOF

      # -----------------------------------------------------------------------
      # 6. Clear caches
      # -----------------------------------------------------------------------
      - name: Clear Caches
        run: |
          ssh -i ~/.ssh/staging_key \
              -o StrictHostKeyChecking=no \
              ${{ env.STAGING_USER }}@${{ env.STAGING_HOST }} << 'EOF'

          set -euo pipefail
          source /tmp/deploy_env

          echo "üßπ Clearing caches..."

          cd "$RELEASE_PATH"

          php artisan config:clear
          php artisan cache:clear
          php artisan route:clear
          php artisan view:clear
          php artisan optimize:clear

          # Rebuild caches
          php artisan config:cache
          php artisan route:cache

          echo "‚úÖ Caches cleared"
          EOF

      # -----------------------------------------------------------------------
      # 7. Atomic symlink switch
      # -----------------------------------------------------------------------
      - name: Switch to New Release (Atomic)
        run: |
          ssh -i ~/.ssh/staging_key \
              -o StrictHostKeyChecking=no \
              ${{ env.STAGING_USER }}@${{ env.STAGING_HOST }} << 'EOF'

          set -euo pipefail
          source /tmp/deploy_env

          echo "üîÑ Switching to new release..."

          CURRENT_LINK="${{ env.STAGING_BASE_DIR }}/current"
          TEMP_LINK="${{ env.STAGING_BASE_DIR }}/current_tmp_$$"

          # Create temp symlink
          ln -s "$RELEASE_PATH" "$TEMP_LINK"

          # Atomic switch
          mv -Tf "$TEMP_LINK" "$CURRENT_LINK"

          echo "‚úÖ Symlink switched: $CURRENT_LINK -> $RELEASE_PATH"
          EOF

      # -----------------------------------------------------------------------
      # 8. Reload services
      # -----------------------------------------------------------------------
      - name: Reload Services
        run: |
          ssh -i ~/.ssh/staging_key \
              -o StrictHostKeyChecking=no \
              ${{ env.STAGING_USER }}@${{ env.STAGING_HOST }} << 'EOF'

          echo "‚ôªÔ∏è  Reloading services..."

          # Reload PHP-FPM
          sudo systemctl reload php8.3-fpm

          # Reload Nginx
          sudo nginx -t && sudo systemctl reload nginx

          echo "‚úÖ Services reloaded"
          EOF

      # -----------------------------------------------------------------------
      # 9. Clear Nginx cache
      # -----------------------------------------------------------------------
      - name: Clear Nginx Cache
        run: |
          ssh -i ~/.ssh/staging_key \
              -o StrictHostKeyChecking=no \
              ${{ env.STAGING_USER }}@${{ env.STAGING_HOST }} << 'EOF'

          echo "üßπ Purging Nginx cache..."

          if [ -d /var/cache/nginx ]; then
              sudo rm -rf /var/cache/nginx/*
              echo "‚úÖ Nginx cache purged"
          else
              echo "‚ÑπÔ∏è  No Nginx cache directory"
          fi
          EOF

      # -----------------------------------------------------------------------
      # 10. Health checks
      # -----------------------------------------------------------------------
      - name: Run Health Checks
        run: |
          echo "üè• Running health checks..."

          # HTTP health check
          if curl -sf "https://${{ env.DOMAIN }}/health" > /dev/null; then
              echo "‚úÖ HTTP health check passed"
          else
              echo "‚ùå HTTP health check failed!"
              exit 1
          fi

          # API health check
          if curl -sf "https://${{ env.DOMAIN }}/api/health-check" > /dev/null; then
              echo "‚úÖ API health check passed"
          else
              echo "‚ùå API health check failed!"
              exit 1
          fi

          # Database check
          ssh -i ~/.ssh/staging_key \
              -o StrictHostKeyChecking=no \
              ${{ env.STAGING_USER }}@${{ env.STAGING_HOST }} << 'EOF'

          cd "${{ env.STAGING_BASE_DIR }}/current"
          if php artisan migrate:status > /dev/null 2>&1; then
              echo "‚úÖ Database connection OK"
          else
              echo "‚ùå Database connection failed!"
              exit 1
          fi
          EOF

          echo "‚úÖ All health checks passed"

      # -----------------------------------------------------------------------
      # 11. Vite Asset Check
      # -----------------------------------------------------------------------
      - name: Verify Vite Assets
        run: |
          echo "üé® Checking Vite assets..."

          # Fetch homepage and extract asset URLs
          ASSETS=$(curl -s "https://${{ env.DOMAIN }}" | grep -oP '/build/assets/[^"]+' | sort -u)

          FAILED=0
          for ASSET in $ASSETS; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ env.DOMAIN }}${ASSET}")
            if [ "$STATUS" -eq 200 ]; then
              echo "‚úÖ $ASSET"
            else
              echo "‚ùå $ASSET (HTTP $STATUS)"
              FAILED=1
            fi
          done

          if [ $FAILED -eq 1 ]; then
            echo "‚ùå Some Vite assets failed to load!"
            exit 1
          fi

          echo "‚úÖ All Vite assets loaded successfully"

      # -----------------------------------------------------------------------
      # 12. Cleanup old releases
      # -----------------------------------------------------------------------
      - name: Cleanup Old Releases
        if: success()
        run: |
          ssh -i ~/.ssh/staging_key \
              -o StrictHostKeyChecking=no \
              ${{ env.STAGING_USER }}@${{ env.STAGING_HOST }} << 'EOF'

          echo "üßπ Cleaning up old releases..."

          cd "${{ env.STAGING_BASE_DIR }}/releases"
          KEEP_RELEASES=5
          COUNT=$(ls -1d */ 2>/dev/null | wc -l)

          if [ "$COUNT" -gt "$KEEP_RELEASES" ]; then
              echo "Found $COUNT releases, keeping last $KEEP_RELEASES..."
              ls -1dt */ | tail -n +$((KEEP_RELEASES + 1)) | xargs rm -rf
              echo "‚úÖ Old releases cleaned"
          else
              echo "Only $COUNT releases, nothing to clean"
          fi
          EOF

      # -----------------------------------------------------------------------
      # 13. Cleanup temp files
      # -----------------------------------------------------------------------
      - name: Cleanup Temp Files
        if: always()
        run: |
          ssh -i ~/.ssh/staging_key \
              -o StrictHostKeyChecking=no \
              ${{ env.STAGING_USER }}@${{ env.STAGING_HOST }} << 'EOF'

          rm -f /tmp/${{ env.bundle_name }}
          rm -f /tmp/deploy_env
          EOF

  # ===========================================================================
  # Smoke tests after deployment
  # ===========================================================================
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    timeout-minutes: 10

    steps:
      - name: Test Homepage
        run: |
          echo "üß™ Testing homepage..."
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://staging.askproai.de")

          if [ "$STATUS" -eq 200 ]; then
              echo "‚úÖ Homepage OK (200)"
          else
              echo "‚ùå Homepage failed (Status: $STATUS)"
              exit 1
          fi

      - name: Test Health Endpoint
        run: |
          echo "üß™ Testing health endpoint..."
          RESPONSE=$(curl -sf "https://staging.askproai.de/health")

          if echo "$RESPONSE" | grep -q "ok"; then
              echo "‚úÖ Health endpoint OK"
          else
              echo "‚ùå Health endpoint failed"
              exit 1
          fi

      - name: Test API Endpoint
        run: |
          echo "üß™ Testing API..."
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://staging.askproai.de/api/health")

          if [ "$STATUS" -eq 200 ]; then
              echo "‚úÖ API OK (200)"
          else
              echo "‚ùå API failed (Status: $STATUS)"
              exit 1
          fi

  # ===========================================================================
  # Deployment summary
  # ===========================================================================
  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-staging, smoke-tests]
    if: always()

    steps:
      - name: Generate Summary
        run: |
          echo "## Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment | ${{ needs.deploy-staging.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Smoke Tests | ${{ needs.smoke-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Domain**: https://staging.askproai.de" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.event.workflow_run.head_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.deploy-staging.result }}" == "success" ] && [ "${{ needs.smoke-tests.result }}" == "success" ]; then
              echo "‚úÖ **Deployment successful!**" >> $GITHUB_STEP_SUMMARY
          else
              echo "‚ùå **Deployment failed!**" >> $GITHUB_STEP_SUMMARY
          fi
