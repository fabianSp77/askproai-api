{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"CALCOM_MCP_SERVER_API/","title":"CalcomMCPServer API Documentation","text":"<p>The CalcomMCPServer provides a robust interface to Cal.com with built-in caching, circuit breaker protection, and retry logic.</p>"},{"location":"CALCOM_MCP_SERVER_API/#features","title":"Features","text":"<ul> <li>Circuit Breaker Protection: Prevents cascading failures when Cal.com is unavailable</li> <li>Response Caching: Reduces API calls and improves performance</li> <li>Retry Logic: Automatic retry with exponential backoff for transient failures</li> <li>Idempotency: Prevents duplicate bookings with idempotency keys</li> <li>Alternative Slot Finder: Intelligent algorithm to find alternative time slots</li> </ul>"},{"location":"CALCOM_MCP_SERVER_API/#methods","title":"Methods","text":""},{"location":"CALCOM_MCP_SERVER_API/#checkavailabilityarray-params-array","title":"checkAvailability(array $params): array","text":"<p>Checks availability for a specific event type with caching.</p> <p>Parameters: - <code>company_id</code> (required): Company ID - <code>event_type_id</code> (required): Cal.com event type ID - <code>date_from</code> (optional): Start date (default: today) - <code>date_to</code> (optional): End date (default: +7 days) - <code>timezone</code> (optional): Timezone (default: Europe/Berlin)</p> <p>Response: <pre><code>{\n    \"success\": true,\n    \"available_slots\": [...],\n    \"date_range\": {\n        \"from\": \"2025-06-21\",\n        \"to\": \"2025-06-28\"\n    },\n    \"event_type_id\": 2026361,\n    \"timezone\": \"Europe/Berlin\",\n    \"cached_until\": \"2025-06-21T10:35:00+00:00\"\n}\n</code></pre></p>"},{"location":"CALCOM_MCP_SERVER_API/#createbookingarray-params-array","title":"createBooking(array $params): array","text":"<p>Creates a booking with retry logic and idempotency protection.</p> <p>Parameters: - <code>company_id</code> (required): Company ID - <code>event_type_id</code> (required): Cal.com event type ID - <code>start</code> (required): Start time (ISO 8601 format) - <code>end</code> (optional): End time (calculated from event type if not provided) - <code>name</code> (required): Customer name - <code>email</code> (required): Customer email - <code>phone</code> (optional): Customer phone - <code>notes</code> (optional): Booking notes - <code>timezone</code> (optional): Timezone (default: Europe/Berlin) - <code>metadata</code> (optional): Additional metadata</p> <p>Response: <pre><code>{\n    \"success\": true,\n    \"booking\": {\n        \"id\": 12345,\n        \"uid\": \"abc123\",\n        \"start\": \"2025-06-22T10:00:00Z\",\n        \"end\": \"2025-06-22T10:30:00Z\",\n        \"status\": \"ACCEPTED\",\n        \"event_type_id\": 2026361\n    },\n    \"message\": \"Booking created successfully\",\n    \"attempts\": 1\n}\n</code></pre></p>"},{"location":"CALCOM_MCP_SERVER_API/#updatebookingarray-params-array","title":"updateBooking(array $params): array","text":"<p>Updates an existing booking.</p> <p>Parameters: - <code>company_id</code> (required): Company ID - <code>booking_id</code> (required): Booking ID - <code>start</code> (optional): New start time - <code>end</code> (optional): New end time - <code>title</code> (optional): New title - <code>description</code> (optional): New description - <code>reschedule_reason</code> (optional): Reason for rescheduling</p> <p>Response: <pre><code>{\n    \"success\": true,\n    \"booking\": {...},\n    \"message\": \"Booking updated successfully\"\n}\n</code></pre></p>"},{"location":"CALCOM_MCP_SERVER_API/#cancelbookingarray-params-array","title":"cancelBooking(array $params): array","text":"<p>Cancels a booking.</p> <p>Parameters: - <code>company_id</code> (required): Company ID - <code>booking_id</code> (required): Booking ID - <code>cancellation_reason</code> (optional): Reason for cancellation</p> <p>Response: <pre><code>{\n    \"success\": true,\n    \"message\": \"Booking cancelled successfully\",\n    \"booking_id\": 12345,\n    \"cancelled_at\": \"2025-06-21T10:00:00+00:00\"\n}\n</code></pre></p>"},{"location":"CALCOM_MCP_SERVER_API/#findalternativeslotsarray-params-array","title":"findAlternativeSlots(array $params): array","text":"<p>Finds alternative time slots when the preferred slot is not available.</p> <p>Parameters: - <code>company_id</code> (required): Company ID - <code>event_type_id</code> (required): Cal.com event type ID - <code>preferred_start</code> (required): Preferred start time - <code>search_days</code> (optional): Days to search (default: 7) - <code>max_alternatives</code> (optional): Maximum alternatives to return (default: 5) - <code>timezone</code> (optional): Timezone (default: Europe/Berlin)</p> <p>Response: <pre><code>{\n    \"success\": true,\n    \"preferred_start\": \"2025-06-22T09:00:00+00:00\",\n    \"alternatives\": [\n        {\n            \"start\": \"2025-06-22T10:00:00Z\",\n            \"end\": \"2025-06-22T10:30:00Z\",\n            \"date\": \"2025-06-22\",\n            \"time\": \"10:00\",\n            \"day_of_week\": \"Saturday\",\n            \"days_from_preferred\": 0\n        }\n    ],\n    \"search_period\": {\n        \"from\": \"2025-06-22\",\n        \"to\": \"2025-06-29\"\n    },\n    \"total_available\": 15,\n    \"message\": \"Alternative slots found\"\n}\n</code></pre></p>"},{"location":"CALCOM_MCP_SERVER_API/#circuit-breaker-states","title":"Circuit Breaker States","text":"<p>The circuit breaker has three states:</p> <ol> <li>CLOSED: Normal operation, all requests go through</li> <li>OPEN: Service is down, requests fail fast with fallback</li> <li>HALF_OPEN: Testing if service is back up</li> </ol> <p>Configuration: - Failure threshold: 5 failures - Success threshold: 2 successes to close - Timeout: 60 seconds - Half-open requests: 3 test requests</p>"},{"location":"CALCOM_MCP_SERVER_API/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Event types: Cached for 5 minutes</li> <li>Availability: Cached for 5 minutes with smart key generation</li> <li>Bookings: Idempotency cache for 24 hours</li> <li>Cache is automatically cleared on updates</li> </ul>"},{"location":"CALCOM_MCP_SERVER_API/#error-handling","title":"Error Handling","text":"<p>All methods return a consistent error format:</p> <pre><code>{\n    \"success\": false,\n    \"error\": \"error_type\",\n    \"message\": \"Human readable error message\",\n    \"circuit_breaker_open\": true // When circuit is open\n}\n</code></pre> <p>Error types: - <code>validation_error</code>: Invalid input parameters - <code>configuration_error</code>: Company or Cal.com not configured - <code>service_unavailable</code>: Circuit breaker is open - <code>booking_failed</code>: Booking creation failed - <code>update_failed</code>: Update operation failed - <code>cancellation_failed</code>: Cancellation failed - <code>exception</code>: General exception occurred</p>"},{"location":"CALCOM_MCP_SERVER_API/#usage-example","title":"Usage Example","text":"<pre><code>use App\\Services\\MCP\\CalcomMCPServer;\n\n$mcpServer = new CalcomMCPServer();\n\n// Check availability\n$availability = $mcpServer-&gt;checkAvailability([\n    'company_id' =&gt; 1,\n    'event_type_id' =&gt; 2026361,\n    'date_from' =&gt; '2025-06-21',\n    'date_to' =&gt; '2025-06-28'\n]);\n\n// Create booking\nif ($availability['success']) {\n    $booking = $mcpServer-&gt;createBooking([\n        'company_id' =&gt; 1,\n        'event_type_id' =&gt; 2026361,\n        'start' =&gt; '2025-06-22T10:00:00Z',\n        'name' =&gt; 'John Doe',\n        'email' =&gt; 'john@example.com',\n        'phone' =&gt; '+49 30 12345678'\n    ]);\n}\n</code></pre>"},{"location":"CALCOM_V2_API_DOCUMENTATION/","title":"Cal.com V2 API Integration Documentation","text":""},{"location":"CALCOM_V2_API_DOCUMENTATION/#overview","title":"Overview","text":"<p>This document describes the production-ready Cal.com V2 API integration for AskProAI. The integration provides a robust, scalable, and fault-tolerant solution for managing calendar bookings through Cal.com's latest API version.</p>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#key-features","title":"Key Features","text":"<ul> <li>\u2705 Full V2 API Support: All major endpoints implemented</li> <li>\u2705 Circuit Breaker Pattern: Automatic fault tolerance</li> <li>\u2705 Retry Logic: Exponential backoff for transient failures</li> <li>\u2705 Response Caching: Redis-based caching for performance</li> <li>\u2705 Type Safety: DTOs for all API responses</li> <li>\u2705 Structured Logging: Comprehensive request/response logging</li> <li>\u2705 Error Handling: Custom exceptions for different error types</li> <li>\u2705 Health Monitoring: Built-in health check endpoint</li> <li>\u2705 Metrics Collection: Performance and reliability metrics</li> </ul>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#architecture","title":"Architecture","text":""},{"location":"CALCOM_V2_API_DOCUMENTATION/#core-components","title":"Core Components","text":"<ol> <li>CalcomV2Client: Low-level API client with all HTTP operations</li> <li>CalcomV2Service: High-level service integrating with domain models</li> <li>DTOs: Type-safe data transfer objects</li> <li>Exceptions: Specific exception classes for error handling</li> <li>Controllers: HTTP endpoints for health checks</li> </ol>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#class-structure","title":"Class Structure","text":"<pre><code>app/Services/Calcom/\n\u251c\u2500\u2500 CalcomV2Client.php          # Core API client\n\u251c\u2500\u2500 CalcomV2Service.php         # Business logic service\n\u251c\u2500\u2500 DTOs/\n\u2502   \u251c\u2500\u2500 BaseDTO.php            # Base DTO class\n\u2502   \u251c\u2500\u2500 EventTypeDTO.php       # Event type data\n\u2502   \u251c\u2500\u2500 SlotDTO.php            # Available slot data\n\u2502   \u251c\u2500\u2500 BookingDTO.php         # Booking data\n\u2502   \u251c\u2500\u2500 AttendeeDTO.php        # Attendee data\n\u2502   \u2514\u2500\u2500 ScheduleDTO.php        # Schedule data\n\u2514\u2500\u2500 Exceptions/\n    \u251c\u2500\u2500 CalcomApiException.php          # Base exception\n    \u251c\u2500\u2500 CalcomAuthenticationException.php\n    \u251c\u2500\u2500 CalcomRateLimitException.php\n    \u2514\u2500\u2500 CalcomValidationException.php\n</code></pre>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#api-endpoints","title":"API Endpoints","text":""},{"location":"CALCOM_V2_API_DOCUMENTATION/#event-types","title":"Event Types","text":"<pre><code>// Get all event types\n$client-&gt;getEventTypes(array $filters = []): array\n\n// Filters:\n// - userId: Filter by user ID\n// - teamId: Filter by team ID\n// - active: Filter active/inactive\n</code></pre>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#schedules","title":"Schedules","text":"<pre><code>// Get all schedules\n$client-&gt;getSchedules(array $filters = []): array\n</code></pre>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#available-slots","title":"Available Slots","text":"<pre><code>// Get available time slots\n$client-&gt;getAvailableSlots(array $params): array\n\n// Required params:\n// - startTime: ISO 8601 datetime\n// - endTime: ISO 8601 datetime\n// - eventTypeId OR eventTypeSlug\n// \n// Optional params:\n// - timeZone: Timezone for slots (default: UTC)\n// - duration: Override event type duration\n</code></pre>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#bookings","title":"Bookings","text":"<pre><code>// Create a new booking\n$client-&gt;createBooking(array $data): BookingDTO\n\n// Required data:\n// - start: ISO 8601 datetime\n// - eventTypeId: Event type ID\n// - responses: Array with name and email\n// - metadata: Additional metadata\n//\n// Optional data:\n// - timeZone: Attendee timezone\n// - language: Preferred language\n// - location: Meeting location\n\n// Get all bookings\n$client-&gt;getBookings(array $filters = []): array\n\n// Get single booking\n$client-&gt;getBooking(string $uid): BookingDTO\n\n// Reschedule booking\n$client-&gt;rescheduleBooking(string $uid, array $data): BookingDTO\n\n// Cancel booking\n$client-&gt;cancelBooking(string $uid, array $data = []): array\n</code></pre>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#usage-examples","title":"Usage Examples","text":""},{"location":"CALCOM_V2_API_DOCUMENTATION/#basic-usage","title":"Basic Usage","text":"<pre><code>use App\\Services\\Calcom\\CalcomV2Client;\n\n// Initialize client\n$client = new CalcomV2Client('your-api-key');\n\n// Get event types\n$eventTypes = $client-&gt;getEventTypes();\n\n// Get available slots\n$slots = $client-&gt;getAvailableSlots([\n    'startTime' =&gt; '2024-01-15T00:00:00Z',\n    'endTime' =&gt; '2024-01-16T00:00:00Z',\n    'eventTypeId' =&gt; 123\n]);\n\n// Create booking\n$booking = $client-&gt;createBooking([\n    'start' =&gt; '2024-01-15T10:00:00Z',\n    'eventTypeId' =&gt; 123,\n    'responses' =&gt; [\n        'name' =&gt; 'John Doe',\n        'email' =&gt; 'john@example.com',\n        'phone' =&gt; '+1234567890'\n    ],\n    'metadata' =&gt; [\n        'source' =&gt; 'askproai'\n    ]\n]);\n</code></pre>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#service-layer-usage","title":"Service Layer Usage","text":"<pre><code>use App\\Services\\Calcom\\CalcomV2Service;\nuse App\\Models\\Company;\n\n// Initialize service with company\n$company = Company::find(1);\n$service = new CalcomV2Service($company);\n\n// Get event types as DTOs\n$eventTypes = $service-&gt;getEventTypes();\n\n// Check availability\n$isAvailable = $service-&gt;checkAvailability(\n    eventTypeId: 123,\n    requestedTime: now()-&gt;addDay()-&gt;setTime(10, 0),\n    staffId: 456\n);\n\n// Create booking from appointment\n$booking = $service-&gt;createBookingFromAppointment($appointment);\n\n// Sync bookings from Cal.com\n$syncedCount = $service-&gt;syncBookings(\n    from: now()-&gt;subDays(7),\n    to: now()-&gt;addDays(30)\n);\n</code></pre>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#error-handling","title":"Error Handling","text":""},{"location":"CALCOM_V2_API_DOCUMENTATION/#exception-types","title":"Exception Types","text":"<ol> <li>CalcomApiException: Base exception for all API errors</li> <li>CalcomAuthenticationException: 401 authentication failures</li> <li>CalcomRateLimitException: 429 rate limit errors</li> <li>CalcomValidationException: 422 validation errors</li> </ol>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#error-handling-example","title":"Error Handling Example","text":"<pre><code>try {\n    $booking = $client-&gt;createBooking($data);\n} catch (CalcomAuthenticationException $e) {\n    // Handle authentication error\n    Log::error('Cal.com authentication failed: ' . $e-&gt;getMessage());\n} catch (CalcomValidationException $e) {\n    // Handle validation errors\n    $errors = $e-&gt;getErrorMessages();\n    Log::error('Validation failed: ' . implode(', ', $errors));\n} catch (CalcomRateLimitException $e) {\n    // Handle rate limiting\n    $retryAfter = $e-&gt;getRetryAfter();\n    Log::warning(\"Rate limited. Retry after {$retryAfter} seconds\");\n} catch (CalcomApiException $e) {\n    // Handle other API errors\n    Log::error('Cal.com API error: ' . $e-&gt;getMessage());\n}\n</code></pre>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#caching","title":"Caching","text":""},{"location":"CALCOM_V2_API_DOCUMENTATION/#cache-configuration","title":"Cache Configuration","text":"<ul> <li>Event Types: 5 minutes TTL</li> <li>Schedules: 5 minutes TTL</li> <li>Available Slots: 1 minute TTL</li> <li>Bookings: No caching (always fresh)</li> </ul>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#cache-management","title":"Cache Management","text":"<pre><code>// Cache is automatically managed by the client\n// Manual cache clearing:\nCache::tags(['calcom_slots'])-&gt;flush();\n\n// Cache warmup command:\nphp artisan calcom:cache-warmup\n</code></pre>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#circuit-breaker","title":"Circuit Breaker","text":"<p>The circuit breaker protects against cascading failures:</p> <ul> <li>Closed State: Normal operation</li> <li>Open State: Fails fast after threshold exceeded</li> <li>Half-Open State: Limited requests to test recovery</li> </ul>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#configuration","title":"Configuration","text":"<pre><code>// Default thresholds\nconst FAILURE_THRESHOLD = 5;     // Failures before opening\nconst SUCCESS_THRESHOLD = 2;     // Successes to close\nconst TIMEOUT = 60;              // Seconds before half-open\n</code></pre>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#health-monitoring","title":"Health Monitoring","text":""},{"location":"CALCOM_V2_API_DOCUMENTATION/#health-check-endpoint","title":"Health Check Endpoint","text":"<pre><code>GET /api/health/calcom\n</code></pre> <p>Response: <pre><code>{\n    \"service\": \"cal.com\",\n    \"status\": \"healthy\",\n    \"timestamp\": \"2024-01-15T10:00:00Z\",\n    \"details\": {\n        \"response_time_ms\": 245,\n        \"circuit_breaker\": {\n            \"state\": \"closed\",\n            \"failure_count\": 0,\n            \"success_count\": 150\n        },\n        \"api_version\": \"2024-08-13\",\n        \"cache_ttls\": {\n            \"event_types_ttl\": 300,\n            \"schedules_ttl\": 300,\n            \"slots_ttl\": 60\n        }\n    }\n}\n</code></pre></p>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#metrics","title":"Metrics","text":"<pre><code>// Get client metrics\n$metrics = $client-&gt;getMetrics();\n\n// Returns:\n[\n    'circuit_breaker' =&gt; [\n        'state' =&gt; 'closed',\n        'failure_count' =&gt; 0,\n        'success_count' =&gt; 1000,\n        'last_failure_time' =&gt; null\n    ],\n    'cache' =&gt; [\n        'event_types_ttl' =&gt; 300,\n        'schedules_ttl' =&gt; 300,\n        'slots_ttl' =&gt; 60\n    ],\n    'api_version' =&gt; '2024-08-13'\n]\n</code></pre>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#testing","title":"Testing","text":""},{"location":"CALCOM_V2_API_DOCUMENTATION/#unit-tests","title":"Unit Tests","text":"<pre><code># Run Cal.com V2 client tests\nphp artisan test --filter CalcomV2ClientTest\n</code></pre>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#integration-tests","title":"Integration Tests","text":"<pre><code># Run integration tests\nphp artisan test --filter CalcomV2ClientIntegrationTest --group integration\n</code></pre>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#test-coverage","title":"Test Coverage","text":"<ul> <li>\u2705 All API endpoints</li> <li>\u2705 Error handling scenarios</li> <li>\u2705 Circuit breaker behavior</li> <li>\u2705 Caching functionality</li> <li>\u2705 Concurrent booking handling</li> <li>\u2705 Timezone conversions</li> <li>\u2705 Pagination support</li> </ul>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#migration-from-v1","title":"Migration from V1","text":""},{"location":"CALCOM_V2_API_DOCUMENTATION/#key-differences","title":"Key Differences","text":"<ol> <li>API Version: Uses V2 endpoints exclusively</li> <li>Response Format: Responses wrapped in <code>data</code> key</li> <li>Booking Creation: Different parameter structure</li> <li>Error Responses: Standardized error format</li> </ol>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#migration-steps","title":"Migration Steps","text":"<ol> <li> <p>Update service initialization: <pre><code>// Old\n$service = new CalcomService();\n\n// New\n$service = new CalcomV2Service();\n</code></pre></p> </li> <li> <p>Update booking creation: <pre><code>// Old\n$service-&gt;createBooking($eventTypeId, $start, $end, $attendee);\n\n// New\n$service-&gt;createBookingFromAppointment($appointment);\n</code></pre></p> </li> <li> <p>Update error handling to use new exception types</p> </li> </ol>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#performance-optimization","title":"Performance Optimization","text":""},{"location":"CALCOM_V2_API_DOCUMENTATION/#best-practices","title":"Best Practices","text":"<ol> <li>Use Caching: Leverage built-in caching for repeated queries</li> <li>Batch Operations: Group related API calls</li> <li>Async Processing: Use queues for non-critical operations</li> <li>Monitor Metrics: Track circuit breaker state and response times</li> </ol>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#cache-warmup","title":"Cache Warmup","text":"<pre><code># Warm up caches for all companies\nphp artisan calcom:cache-warmup\n\n# Warm up specific company\nphp artisan calcom:cache-warmup --company=1\n</code></pre>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#security","title":"Security","text":""},{"location":"CALCOM_V2_API_DOCUMENTATION/#api-key-management","title":"API Key Management","text":"<ul> <li>Store API keys encrypted in database</li> <li>Use environment variables for defaults</li> <li>Rotate keys regularly</li> <li>Monitor for authentication failures</li> </ul>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#request-sanitization","title":"Request Sanitization","text":"<p>Sensitive data is automatically redacted in logs: - Email addresses - Phone numbers - Personal notes</p>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#troubleshooting","title":"Troubleshooting","text":""},{"location":"CALCOM_V2_API_DOCUMENTATION/#common-issues","title":"Common Issues","text":"<ol> <li>Authentication Failures</li> <li>Check API key validity</li> <li>Verify Cal.com account status</li> <li> <p>Check rate limits</p> </li> <li> <p>Booking Failures</p> </li> <li>Validate required fields</li> <li>Check slot availability</li> <li> <p>Verify event type configuration</p> </li> <li> <p>Circuit Breaker Open</p> </li> <li>Check Cal.com API status</li> <li>Review error logs</li> <li>Wait for timeout period</li> </ol>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#debug-mode","title":"Debug Mode","text":"<p>Enable detailed logging: <pre><code>// In CalcomV2Client\n$this-&gt;logger-&gt;setLevel('debug');\n</code></pre></p>"},{"location":"CALCOM_V2_API_DOCUMENTATION/#support","title":"Support","text":"<p>For issues or questions: 1. Check error logs in <code>storage/logs/laravel.log</code> 2. Review health check endpoint 3. Monitor metrics dashboard 4. Contact system administrator</p>"},{"location":"DASHBOARD_REDESIGN_README/","title":"Dashboard Redesign - Technical Documentation","text":""},{"location":"DASHBOARD_REDESIGN_README/#overview","title":"Overview","text":"<p>This document describes the complete redesign of the AskProAI Filament admin dashboard pages for Appointments (Termine), Calls (Anrufe), and Customers (Kunden). The redesign focuses on delivering enterprise-grade KPIs, real-time filtering, and exceptional performance.</p>"},{"location":"DASHBOARD_REDESIGN_README/#architecture","title":"Architecture","text":""},{"location":"DASHBOARD_REDESIGN_README/#component-structure","title":"Component Structure","text":"<pre><code>app/Filament/Admin/\n\u251c\u2500\u2500 Widgets/\n\u2502   \u251c\u2500\u2500 UniversalKpiWidget.php          # Base class for all KPI widgets\n\u2502   \u251c\u2500\u2500 GlobalFilterWidget.php          # Cross-widget filter synchronization\n\u2502   \u251c\u2500\u2500 AppointmentKpiWidget.php        # Appointment-specific KPIs\n\u2502   \u251c\u2500\u2500 CallKpiWidget.php               # Call-specific KPIs\n\u2502   \u251c\u2500\u2500 CustomerKpiWidget.php           # Customer-specific KPIs\n\u2502   \u251c\u2500\u2500 AppointmentTrendWidget.php      # Revenue trend chart\n\u2502   \u251c\u2500\u2500 CallDurationHistogramWidget.php # Call duration distribution\n\u2502   \u251c\u2500\u2500 CustomerFunnelWidget.php        # Conversion funnel\n\u2502   \u2514\u2500\u2500 CustomerSourceWidget.php        # Customer acquisition sources\n\u251c\u2500\u2500 Traits/\n\u2502   \u2514\u2500\u2500 HasGlobalFilters.php           # Filter state management trait\n\u2514\u2500\u2500 Resources/\n    \u251c\u2500\u2500 AppointmentResource.php         # Enhanced with dashboard widgets\n    \u251c\u2500\u2500 CallResource.php                # Enhanced with dashboard widgets\n    \u2514\u2500\u2500 CustomerResource.php            # Enhanced with dashboard widgets\n\napp/Services/Dashboard/\n\u2514\u2500\u2500 DashboardMetricsService.php        # Centralized KPI calculation service\n</code></pre>"},{"location":"DASHBOARD_REDESIGN_README/#key-design-patterns","title":"Key Design Patterns","text":""},{"location":"DASHBOARD_REDESIGN_README/#1-universal-widget-system","title":"1. Universal Widget System","text":"<p>All KPI widgets extend <code>UniversalKpiWidget</code> which provides: - Consistent formatting and styling - Error handling and graceful degradation - Trend calculation and visualization - Responsive layout support</p>"},{"location":"DASHBOARD_REDESIGN_README/#2-global-filter-synchronization","title":"2. Global Filter Synchronization","text":"<p>The <code>HasGlobalFilters</code> trait enables: - Cross-widget filter state sharing via Livewire events - Session persistence for filter preferences - Real-time updates without page refresh</p>"},{"location":"DASHBOARD_REDESIGN_README/#3-service-oriented-architecture","title":"3. Service-Oriented Architecture","text":"<p><code>DashboardMetricsService</code> centralizes: - All KPI calculations in one place - Multi-level caching strategy - Query optimization - Consistent data formatting</p>"},{"location":"DASHBOARD_REDESIGN_README/#kpis-implemented","title":"KPIs Implemented","text":""},{"location":"DASHBOARD_REDESIGN_README/#appointment-kpis","title":"Appointment KPIs","text":"<ol> <li>Revenue (Gesamt-Umsatz)</li> <li>Current period revenue with trend</li> <li>Comparison to previous period</li> <li> <p>Service-based calculation</p> </li> <li> <p>Occupancy Rate (Auslastung)</p> </li> <li>Booked vs. available time slots</li> <li>Branch and staff filtering</li> <li> <p>Real-time updates</p> </li> <li> <p>Conversion Rate (Conversion)</p> </li> <li>Calls to appointments ratio</li> <li>Funnel visualization</li> <li> <p>Period comparisons</p> </li> <li> <p>No-Show Rate</p> </li> <li>Missed appointments tracking</li> <li>Customer reliability metrics</li> <li>Prevention insights</li> </ol>"},{"location":"DASHBOARD_REDESIGN_README/#call-kpis","title":"Call KPIs","text":"<ol> <li>Total Calls (Anzahl Anrufe)</li> <li>Volume tracking with trends</li> <li>Peak time analysis</li> <li> <p>Duration distribution</p> </li> <li> <p>Success Rate (Erfolgsquote)</p> </li> <li>Calls resulting in appointments</li> <li>Agent performance metrics</li> <li> <p>Conversion optimization</p> </li> <li> <p>Average Duration (\u00d8 Dauer)</p> </li> <li>Call length analysis</li> <li>Service time optimization</li> <li> <p>Quality indicators</p> </li> <li> <p>Cost Analysis (Kosten)</p> </li> <li>Per-call cost calculation</li> <li>ROI metrics</li> <li>Budget tracking</li> </ol>"},{"location":"DASHBOARD_REDESIGN_README/#customer-kpis","title":"Customer KPIs","text":"<ol> <li>New Customers (Neue Kunden)</li> <li>Acquisition tracking</li> <li>Growth metrics</li> <li> <p>Source analysis</p> </li> <li> <p>Customer Lifetime Value (CLV)</p> </li> <li>Revenue per customer</li> <li>Retention metrics</li> <li> <p>Profitability analysis</p> </li> <li> <p>Returning Rate (Wiederkehrrate)</p> </li> <li>Customer loyalty metrics</li> <li>Service satisfaction indicators</li> <li> <p>Retention strategies</p> </li> <li> <p>Top Customers (Top-Kunden Anteil)</p> </li> <li>Revenue concentration</li> <li>VIP identification</li> <li>Risk assessment</li> </ol>"},{"location":"DASHBOARD_REDESIGN_README/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"DASHBOARD_REDESIGN_README/#database-indexes","title":"Database Indexes","text":"<p>Created specialized indexes for dashboard queries: <pre><code>-- Appointments\nidx_appointments_revenue_calc (company_id, status, starts_at, service_id)\nidx_appointments_conversion_track (company_id, call_id, created_at)\nidx_appointments_branch_date (company_id, branch_id, starts_at)\n\n-- Calls\nidx_calls_company_date (company_id, created_at)\nidx_calls_status_duration (company_id, call_status, duration_sec)\n\n-- Customers\nidx_customers_company_phone (company_id, phone)\nidx_customers_company_created (company_id, created_at)\n</code></pre></p>"},{"location":"DASHBOARD_REDESIGN_README/#caching-strategy","title":"Caching Strategy","text":"<p>Three-tier caching approach: - 60s TTL: Live data (current day stats) - 300s TTL: Recent data (week/month stats) - 3600s TTL: Historical data (quarter/year stats)</p>"},{"location":"DASHBOARD_REDESIGN_README/#query-optimization","title":"Query Optimization","text":"<ul> <li>Eager loading for relationships</li> <li>Subquery optimization for aggregates</li> <li>Chunked processing for large datasets</li> <li>Query result caching</li> </ul>"},{"location":"DASHBOARD_REDESIGN_README/#filter-system","title":"Filter System","text":""},{"location":"DASHBOARD_REDESIGN_README/#available-filters","title":"Available Filters","text":"<ol> <li>Period Selection</li> <li>Today, Yesterday</li> <li>This/Last Week</li> <li>This/Last Month</li> <li>This Quarter, This Year</li> <li> <p>Custom Date Range</p> </li> <li> <p>Dimension Filters</p> </li> <li>Branch/Location</li> <li>Staff Member</li> <li>Service Type</li> </ol>"},{"location":"DASHBOARD_REDESIGN_README/#filter-persistence","title":"Filter Persistence","text":"<ul> <li>Session-based storage</li> <li>URL parameter support</li> <li>Cross-widget synchronization</li> </ul>"},{"location":"DASHBOARD_REDESIGN_README/#mobile-responsiveness","title":"Mobile Responsiveness","text":""},{"location":"DASHBOARD_REDESIGN_README/#breakpoint-strategy","title":"Breakpoint Strategy","text":"<ul> <li>Mobile (&lt;640px): Single column, stacked widgets</li> <li>Tablet (640-1024px): 2-column grid</li> <li>Desktop (&gt;1024px): 3-4 column grid</li> </ul>"},{"location":"DASHBOARD_REDESIGN_README/#touch-optimizations","title":"Touch Optimizations","text":"<ul> <li>Larger tap targets for filters</li> <li>Swipeable period selection</li> <li>Optimized chart interactions</li> </ul>"},{"location":"DASHBOARD_REDESIGN_README/#testing","title":"Testing","text":""},{"location":"DASHBOARD_REDESIGN_README/#unit-tests","title":"Unit Tests","text":"<ul> <li><code>DashboardMetricsServiceTest</code>: Service layer testing</li> <li>KPI calculation verification</li> <li>Cache behavior testing</li> <li>Edge case handling</li> </ul>"},{"location":"DASHBOARD_REDESIGN_README/#feature-tests","title":"Feature Tests","text":"<ul> <li><code>GlobalFilterSynchronizationTest</code>: Filter system testing</li> <li>Widget interaction testing</li> <li>Event broadcasting verification</li> <li>Session persistence testing</li> </ul>"},{"location":"DASHBOARD_REDESIGN_README/#performance-testing","title":"Performance Testing","text":"<ul> <li><code>OptimizeDashboardPerformance</code> command</li> <li>Query analysis and optimization</li> <li>Cache warming strategies</li> <li>Index effectiveness verification</li> </ul>"},{"location":"DASHBOARD_REDESIGN_README/#usage","title":"Usage","text":""},{"location":"DASHBOARD_REDESIGN_README/#basic-implementation","title":"Basic Implementation","text":"<pre><code>// In your Filament Resource\nprotected function getHeaderWidgets(): array\n{\n    return [\n        GlobalFilterWidget::class,\n        AppointmentKpiWidget::class,\n        AppointmentTrendWidget::class,\n    ];\n}\n</code></pre>"},{"location":"DASHBOARD_REDESIGN_README/#custom-kpi-widget","title":"Custom KPI Widget","text":"<pre><code>class CustomKpiWidget extends UniversalKpiWidget\n{\n    protected function getKpis(array $filters): array\n    {\n        return app(DashboardMetricsService::class)\n            -&gt;getCustomKpis($filters);\n    }\n\n    protected function getWidgetTitle(): string\n    {\n        return 'Custom KPIs';\n    }\n}\n</code></pre>"},{"location":"DASHBOARD_REDESIGN_README/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Analyze query performance\nphp artisan dashboard:optimize --analyze\n\n# Warm up caches\nphp artisan dashboard:optimize --cache\n\n# Run tests\nphp artisan test --filter Dashboard\n</code></pre>"},{"location":"DASHBOARD_REDESIGN_README/#security-considerations","title":"Security Considerations","text":""},{"location":"DASHBOARD_REDESIGN_README/#multi-tenancy","title":"Multi-Tenancy","text":"<ul> <li>Automatic company_id scoping</li> <li>User permission checks</li> <li>Data isolation verification</li> </ul>"},{"location":"DASHBOARD_REDESIGN_README/#input-validation","title":"Input Validation","text":"<ul> <li>Filter sanitization</li> <li>SQL injection prevention</li> <li>XSS protection in charts</li> </ul>"},{"location":"DASHBOARD_REDESIGN_README/#future-enhancements","title":"Future Enhancements","text":""},{"location":"DASHBOARD_REDESIGN_README/#planned-features","title":"Planned Features","text":"<ol> <li>Export Functionality</li> <li>PDF reports</li> <li>Excel exports</li> <li> <p>Scheduled reports</p> </li> <li> <p>Advanced Analytics</p> </li> <li>Predictive metrics</li> <li>Anomaly detection</li> <li> <p>Trend forecasting</p> </li> <li> <p>Customization</p> </li> <li>User-defined KPIs</li> <li>Widget arrangement</li> <li>Custom date ranges</li> </ol>"},{"location":"DASHBOARD_REDESIGN_README/#performance-roadmap","title":"Performance Roadmap","text":"<ol> <li>Real-time Updates</li> <li>WebSocket integration</li> <li>Live data streaming</li> <li> <p>Push notifications</p> </li> <li> <p>Advanced Caching</p> </li> <li>Redis clustering</li> <li>Edge caching</li> <li>Predictive pre-loading</li> </ol>"},{"location":"DASHBOARD_REDESIGN_README/#troubleshooting","title":"Troubleshooting","text":""},{"location":"DASHBOARD_REDESIGN_README/#common-issues","title":"Common Issues","text":""},{"location":"DASHBOARD_REDESIGN_README/#slow-performance","title":"Slow Performance","text":"<ol> <li>Check missing indexes: <code>php artisan dashboard:optimize --analyze</code></li> <li>Clear stale caches: <code>php artisan cache:clear</code></li> <li>Review query log for N+1 issues</li> </ol>"},{"location":"DASHBOARD_REDESIGN_README/#filter-not-working","title":"Filter Not Working","text":"<ol> <li>Check session configuration</li> <li>Verify Livewire events are firing</li> <li>Ensure trait is properly mounted</li> </ol>"},{"location":"DASHBOARD_REDESIGN_README/#missing-data","title":"Missing Data","text":"<ol> <li>Verify user has company_id</li> <li>Check tenant scoping</li> <li>Review date range filters</li> </ol>"},{"location":"DASHBOARD_REDESIGN_README/#support","title":"Support","text":"<p>For issues or questions: 1. Check logs: <code>storage/logs/laravel.log</code> 2. Run diagnostics: <code>php artisan dashboard:optimize --analyze</code> 3. Review test coverage: <code>php artisan test --coverage</code></p>"},{"location":"DATABASE_SAFETY_GUIDELINES/","title":"Database Safety Guidelines","text":""},{"location":"DATABASE_SAFETY_GUIDELINES/#overview","title":"Overview","text":"<p>Following the data loss incident of June 17, 2025, these guidelines establish mandatory practices for database operations to prevent future data loss.</p>"},{"location":"DATABASE_SAFETY_GUIDELINES/#critical-rules","title":"Critical Rules","text":""},{"location":"DATABASE_SAFETY_GUIDELINES/#1-never-drop-tables-without-verification","title":"1. NEVER Drop Tables Without Verification","text":"<ul> <li>Count records before dropping</li> <li>Check last modification dates</li> <li>Verify table is truly unused</li> <li>Document why table is being dropped</li> </ul>"},{"location":"DATABASE_SAFETY_GUIDELINES/#2-always-create-backups-before-destructive-operations","title":"2. ALWAYS Create Backups Before Destructive Operations","text":"<pre><code># Before ANY migration that drops tables or columns\nmysqldump -u root -p askproai_db | gzip &gt; /var/backups/mysql/askproai_db_$(date +%Y-%m-%d_%H-%M-%S)_pre_migration.sql.gz\n</code></pre>"},{"location":"DATABASE_SAFETY_GUIDELINES/#3-use-safedestructivemigration-base-class","title":"3. Use SafeDestructiveMigration Base Class","text":"<pre><code>use App\\Database\\Migrations\\SafeDestructiveMigration;\n\nclass DropUnusedTables extends SafeDestructiveMigration\n{\n    protected function getTablesToDrop(): array\n    {\n        return ['old_table1', 'old_table2'];\n    }\n\n    protected function executeDestructiveOperation(): void\n    {\n        Schema::dropIfExists('old_table1');\n        Schema::dropIfExists('old_table2');\n    }\n}\n</code></pre>"},{"location":"DATABASE_SAFETY_GUIDELINES/#migration-best-practices","title":"Migration Best Practices","text":""},{"location":"DATABASE_SAFETY_GUIDELINES/#before-creating-a-migration","title":"Before Creating a Migration","text":"<ol> <li> <p>Analyze Impact <pre><code>-- Check table usage\nSELECT COUNT(*) FROM table_name;\nSELECT MAX(updated_at) FROM table_name;\n\n-- Check foreign key dependencies\nSELECT \n    TABLE_NAME,\n    COLUMN_NAME,\n    CONSTRAINT_NAME,\n    REFERENCED_TABLE_NAME,\n    REFERENCED_COLUMN_NAME\nFROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\nWHERE REFERENCED_TABLE_NAME = 'table_name';\n</code></pre></p> </li> <li> <p>Document Decision</p> </li> <li>Why is this change needed?</li> <li>What data will be affected?</li> <li>Is there a rollback plan?</li> </ol>"},{"location":"DATABASE_SAFETY_GUIDELINES/#safe-migration-patterns","title":"Safe Migration Patterns","text":""},{"location":"DATABASE_SAFETY_GUIDELINES/#adding-columns-safe","title":"Adding Columns (Safe)","text":"<pre><code>Schema::table('users', function (Blueprint $table) {\n    $table-&gt;string('new_column')-&gt;nullable()-&gt;after('existing_column');\n});\n</code></pre>"},{"location":"DATABASE_SAFETY_GUIDELINES/#dropping-columns-caution-required","title":"Dropping Columns (Caution Required)","text":"<pre><code>// First migration: deprecate the column\nSchema::table('users', function (Blueprint $table) {\n    $table-&gt;string('old_column')-&gt;nullable()-&gt;comment('DEPRECATED: Will be removed in 30 days');\n});\n\n// After 30 days: drop the column\nSchema::table('users', function (Blueprint $table) {\n    $table-&gt;dropColumn('old_column');\n});\n</code></pre>"},{"location":"DATABASE_SAFETY_GUIDELINES/#renaming-tables-safe-with-backward-compatibility","title":"Renaming Tables (Safe with Backward Compatibility)","text":"<pre><code>// Create view for backward compatibility\nSchema::rename('old_table', 'new_table');\nDB::statement('CREATE VIEW old_table AS SELECT * FROM new_table');\n</code></pre>"},{"location":"DATABASE_SAFETY_GUIDELINES/#emergency-procedures","title":"Emergency Procedures","text":""},{"location":"DATABASE_SAFETY_GUIDELINES/#if-you-accidentally-drop-data","title":"If You Accidentally Drop Data","text":"<ol> <li>STOP - Don't run any more migrations</li> <li>Check Backups <pre><code>ls -lah /var/backups/mysql/askproai_db_*.sql.gz\n</code></pre></li> <li>Restore Immediately <pre><code>./scripts/emergency_database_restore.sh\n</code></pre></li> </ol>"},{"location":"DATABASE_SAFETY_GUIDELINES/#daily-backup-verification","title":"Daily Backup Verification","text":"<p>Add to crontab: <pre><code># Daily backup verification at 4 AM\n0 4 * * * /var/www/api-gateway/scripts/verify_daily_backup.sh\n</code></pre></p>"},{"location":"DATABASE_SAFETY_GUIDELINES/#testing-requirements","title":"Testing Requirements","text":""},{"location":"DATABASE_SAFETY_GUIDELINES/#local-testing","title":"Local Testing","text":"<ol> <li>Run migration on local database first</li> <li>Verify data integrity</li> <li>Test rollback procedure</li> </ol>"},{"location":"DATABASE_SAFETY_GUIDELINES/#staging-testing","title":"Staging Testing","text":"<ol> <li>Copy production data to staging (sanitized)</li> <li>Run migration</li> <li>Full application test</li> <li>Document results</li> </ol>"},{"location":"DATABASE_SAFETY_GUIDELINES/#production-deployment","title":"Production Deployment","text":"<ol> <li>Schedule during low-traffic window</li> <li>Create fresh backup</li> <li>Run migration with monitoring</li> <li>Verify application functionality</li> <li>Keep backup for 30 days</li> </ol>"},{"location":"DATABASE_SAFETY_GUIDELINES/#monitoring","title":"Monitoring","text":""},{"location":"DATABASE_SAFETY_GUIDELINES/#post-migration-checks","title":"Post-Migration Checks","text":"<pre><code>// Add to health check endpoint\npublic function checkCriticalTables()\n{\n    $criticalTables = [\n        'appointments' =&gt; 1,  // Minimum expected records\n        'customers' =&gt; 1,\n        'companies' =&gt; 1,\n        'branches' =&gt; 1,\n        'staff' =&gt; 1,\n    ];\n\n    foreach ($criticalTables as $table =&gt; $minCount) {\n        $count = DB::table($table)-&gt;count();\n        if ($count &lt; $minCount) {\n            alert(\"CRITICAL: Table {$table} has only {$count} records!\");\n        }\n    }\n}\n</code></pre>"},{"location":"DATABASE_SAFETY_GUIDELINES/#automated-alerts","title":"Automated Alerts","text":"<p>Set up monitoring for: - Tables with 0 records that shouldn't be empty - Sudden drop in record counts - Failed migrations - Backup age &gt; 24 hours</p>"},{"location":"DATABASE_SAFETY_GUIDELINES/#recovery-time-objectives","title":"Recovery Time Objectives","text":"<ul> <li>Detection: &lt; 5 minutes (automated monitoring)</li> <li>Decision: &lt; 15 minutes (assess impact)</li> <li>Recovery: &lt; 30 minutes (restore from backup)</li> <li>Verification: &lt; 1 hour (full system check)</li> </ul>"},{"location":"DATABASE_SAFETY_GUIDELINES/#approval-process","title":"Approval Process","text":"<p>For any migration that: - Drops tables - Drops columns - Truncates data - Modifies primary keys</p> <p>Requires: 1. Code review by senior developer 2. Backup verification 3. Rollback plan documentation 4. Staging environment test results</p>"},{"location":"DATABASE_SAFETY_GUIDELINES/#tools-and-scripts","title":"Tools and Scripts","text":""},{"location":"DATABASE_SAFETY_GUIDELINES/#check-table-usage","title":"Check Table Usage","text":"<pre><code>php artisan db:table-usage {table_name}\n</code></pre>"},{"location":"DATABASE_SAFETY_GUIDELINES/#safe-migration-generator","title":"Safe Migration Generator","text":"<pre><code>php artisan make:migration:safe {migration_name}\n</code></pre>"},{"location":"DATABASE_SAFETY_GUIDELINES/#backup-before-migration","title":"Backup Before Migration","text":"<pre><code>php artisan migrate --backup\n</code></pre>"},{"location":"DATABASE_SAFETY_GUIDELINES/#contact-for-database-emergencies","title":"Contact for Database Emergencies","text":"<ul> <li>Primary DBA: root@server</li> <li>Backup Location: /var/backups/mysql/</li> <li>Recovery Scripts: /var/www/api-gateway/scripts/</li> <li>On-Call: [Phone Number]</li> </ul> <p>Remember: It's better to delay a migration than to lose data. When in doubt, don't drop out!</p>"},{"location":"DEPLOYMENT_GUIDE/","title":"AskProAI Deployment Guide","text":"<p>Version: 1.0 Date: 2025-06-18 Status: Production Ready</p>"},{"location":"DEPLOYMENT_GUIDE/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Pre-Deployment Checklist</li> <li>Deployment Process</li> <li>Rollback Procedures</li> <li>Monitoring &amp; Verification</li> <li>Backup &amp; Recovery</li> <li>Troubleshooting</li> <li>Emergency Contacts</li> </ol>"},{"location":"DEPLOYMENT_GUIDE/#overview","title":"Overview","text":"<p>This guide provides step-by-step instructions for deploying AskProAI to production. The deployment process is designed to be zero-downtime with automatic rollback capabilities.</p>"},{"location":"DEPLOYMENT_GUIDE/#key-features","title":"Key Features","text":"<ul> <li>Zero-downtime deployment using maintenance mode</li> <li>Automatic health checks after deployment</li> <li>Rollback capability with automated backup</li> <li>Comprehensive monitoring during and after deployment</li> <li>Automated backup system with retention policies</li> </ul>"},{"location":"DEPLOYMENT_GUIDE/#pre-deployment-checklist","title":"Pre-Deployment Checklist","text":""},{"location":"DEPLOYMENT_GUIDE/#1-run-pre-deployment-check-script","title":"1. Run Pre-Deployment Check Script","text":"<pre><code>cd /var/www/api-gateway\n./deploy/pre-deploy-check.sh\n</code></pre> <p>This script verifies: - \u2705 Environment requirements (PHP, Node, Redis, MySQL) - \u2705 Application configuration - \u2705 Database connectivity and migrations - \u2705 External service availability - \u2705 File permissions - \u2705 Security settings</p>"},{"location":"DEPLOYMENT_GUIDE/#2-manual-verifications","title":"2. Manual Verifications","text":"<ul> <li> Recent backup exists (check <code>/var/backups/askproai/</code>)</li> <li> Team is notified of deployment window</li> <li> No critical alerts in monitoring</li> <li> Recent commits are tested in staging</li> <li> Database migrations reviewed</li> <li> Rollback plan communicated</li> </ul>"},{"location":"DEPLOYMENT_GUIDE/#3-environment-variables","title":"3. Environment Variables","text":"<p>Ensure these are set in <code>.env.production</code>:</p> <pre><code>APP_ENV=production\nAPP_DEBUG=false\nAPP_URL=https://api.askproai.de\n\n# Database\nDB_CONNECTION=mysql\nDB_HOST=localhost\nDB_DATABASE=askproai\nDB_USERNAME=askproai_user\nDB_PASSWORD=&lt;secure-password&gt;\n\n# Redis\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=&lt;redis-password&gt;\n\n# Cal.com Integration\nDEFAULT_CALCOM_API_KEY=&lt;api-key&gt;\nDEFAULT_CALCOM_TEAM_SLUG=&lt;team-slug&gt;\n\n# Retell.ai Integration\nDEFAULT_RETELL_API_KEY=&lt;api-key&gt;\nDEFAULT_RETELL_AGENT_ID=&lt;agent-id&gt;\n\n# Queue Configuration\nQUEUE_CONNECTION=redis\nHORIZON_PREFIX=horizon:askproai\n</code></pre>"},{"location":"DEPLOYMENT_GUIDE/#deployment-process","title":"Deployment Process","text":""},{"location":"DEPLOYMENT_GUIDE/#step-1-connect-to-production-server","title":"Step 1: Connect to Production Server","text":"<pre><code>ssh deploy@production-server\ncd /var/www/api-gateway\n</code></pre>"},{"location":"DEPLOYMENT_GUIDE/#step-2-run-deployment-script","title":"Step 2: Run Deployment Script","text":"<pre><code>./deploy/production-deploy.sh\n</code></pre> <p>The script automatically: 1. Checks disk space and services 2. Creates backup 3. Enables maintenance mode 4. Pulls latest code 5. Installs dependencies 6. Runs migrations 7. Optimizes application 8. Restarts services 9. Runs health checks 10. Disables maintenance mode 11. Monitors for 5 minutes</p>"},{"location":"DEPLOYMENT_GUIDE/#step-3-monitor-deployment","title":"Step 3: Monitor Deployment","text":"<p>Watch the deployment output. Key indicators: - <code>[\u2713] Health check passed</code> - <code>[\u2713] Cal.com integration healthy</code> - <code>[\u2713] Queue workers running</code> - <code>[\u2713] Cache warmed up</code></p>"},{"location":"DEPLOYMENT_GUIDE/#manual-deployment-if-automated-fails","title":"Manual Deployment (If Automated Fails)","text":"<pre><code># 1. Enable maintenance mode\nphp artisan down\n\n# 2. Pull latest code\ngit pull origin main\n\n# 3. Install dependencies\ncomposer install --no-dev --optimize-autoloader\nnpm ci --production\n\n# 4. Run migrations\nphp artisan migrate --force\n\n# 5. Clear and optimize caches\nphp artisan optimize:clear\nphp artisan optimize\n\n# 6. Restart queue workers\nphp artisan horizon:terminate\nsleep 5\nphp artisan horizon\n\n# 7. Disable maintenance mode\nphp artisan up\n</code></pre>"},{"location":"DEPLOYMENT_GUIDE/#rollback-procedures","title":"Rollback Procedures","text":""},{"location":"DEPLOYMENT_GUIDE/#automatic-rollback","title":"Automatic Rollback","text":"<p>The deployment script automatically rolls back if: - Migration fails - Health check fails after deployment - Critical error during deployment</p>"},{"location":"DEPLOYMENT_GUIDE/#manual-rollback","title":"Manual Rollback","text":"<pre><code># Quick rollback to latest backup\n./deploy/rollback.sh\n\n# Rollback to specific backup\n./deploy/rollback.sh /var/backups/askproai/backup-20250618-120000.tar.gz\n</code></pre>"},{"location":"DEPLOYMENT_GUIDE/#rollback-steps","title":"Rollback Steps","text":"<ol> <li> <p>Immediate Actions <pre><code># Enable maintenance mode\nphp artisan down\n\n# Stop services\nphp artisan horizon:terminate\n</code></pre></p> </li> <li> <p>Restore from Backup <pre><code># The rollback script handles this automatically\n./deploy/rollback.sh\n</code></pre></p> </li> <li> <p>Verify Rollback <pre><code># Check application version\ngit log -1 --oneline\n\n# Run health check\ncurl http://localhost/api/health\n</code></pre></p> </li> </ol>"},{"location":"DEPLOYMENT_GUIDE/#monitoring-verification","title":"Monitoring &amp; Verification","text":""},{"location":"DEPLOYMENT_GUIDE/#health-check-endpoints","title":"Health Check Endpoints","text":"<ol> <li>Main Health Check <pre><code>curl https://api.askproai.de/api/health\n</code></pre></li> </ol> <p>Expected response:    <pre><code>{\n  \"status\": \"healthy\",\n  \"checks\": {\n    \"database\": {\"status\": \"healthy\"},\n    \"cache\": {\"status\": \"healthy\"},\n    \"queue\": {\"status\": \"healthy\"}\n  }\n}\n</code></pre></p> <ol> <li> <p>Cal.com Integration Health <pre><code>curl https://api.askproai.de/api/health/calcom\n</code></pre></p> </li> <li> <p>Metrics Endpoint <pre><code>curl https://api.askproai.de/api/metrics\n</code></pre></p> </li> </ol>"},{"location":"DEPLOYMENT_GUIDE/#post-deployment-verification","title":"Post-Deployment Verification","text":"<ol> <li>Test Critical Flows</li> <li>Make test phone call</li> <li>Verify appointment creation</li> <li>Check webhook processing</li> <li> <p>Confirm email delivery</p> </li> <li> <p>Monitor Logs <pre><code># Application logs\ntail -f storage/logs/laravel.log\n\n# Queue logs\nphp artisan horizon:status\n\n# Nginx logs\ntail -f /var/log/nginx/access.log\n</code></pre></p> </li> <li> <p>Check Metrics</p> </li> <li>Response times &lt; 200ms</li> <li>Error rate &lt; 1%</li> <li>Queue size &lt; 100</li> <li>Memory usage stable</li> </ol>"},{"location":"DEPLOYMENT_GUIDE/#backup-recovery","title":"Backup &amp; Recovery","text":""},{"location":"DEPLOYMENT_GUIDE/#automated-backups","title":"Automated Backups","text":"<p>Backups run automatically via cron: - Daily: 2:00 AM - Weekly: Sunday 3:00 AM - Monthly: 1<sup>st</sup> day 4:00 AM</p>"},{"location":"DEPLOYMENT_GUIDE/#manual-backup","title":"Manual Backup","text":"<pre><code>./deploy/backup-automation.sh daily\n</code></pre>"},{"location":"DEPLOYMENT_GUIDE/#backup-contents","title":"Backup Contents","text":"<ul> <li>Database dump (compressed)</li> <li>Application files (excluding vendor/node_modules)</li> <li>Environment configuration</li> <li>Backup manifest with checksums</li> </ul>"},{"location":"DEPLOYMENT_GUIDE/#recovery-process","title":"Recovery Process","text":"<ol> <li> <p>List Available Backups <pre><code>ls -la /var/backups/askproai/\n</code></pre></p> </li> <li> <p>Verify Backup Integrity <pre><code>gunzip -t /var/backups/askproai/db-daily-*.sql.gz\ntar -tzf /var/backups/askproai/app-daily-*.tar.gz\n</code></pre></p> </li> <li> <p>Restore Database <pre><code>gunzip &lt; backup.sql.gz | mysql -u root -p askproai\n</code></pre></p> </li> <li> <p>Restore Application <pre><code>cd /\ntar -xzf /var/backups/askproai/app-daily-*.tar.gz\n</code></pre></p> </li> </ol>"},{"location":"DEPLOYMENT_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"DEPLOYMENT_GUIDE/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Migration Fails <pre><code># Check migration status\nphp artisan migrate:status\n\n# Rollback last batch\nphp artisan migrate:rollback\n</code></pre></p> </li> <li> <p>Queue Workers Not Starting <pre><code># Check Horizon status\nphp artisan horizon:status\n\n# Clear failed jobs\nphp artisan queue:flush\n\n# Restart manually\nphp artisan horizon\n</code></pre></p> </li> <li> <p>Cache Issues <pre><code># Clear all caches\nphp artisan optimize:clear\n\n# Rebuild caches\nphp artisan optimize\n</code></pre></p> </li> <li> <p>Permission Issues <pre><code># Fix permissions\nchown -R deploy:www-data /var/www/api-gateway\nfind storage -type d -exec chmod 775 {} \\;\nfind storage -type f -exec chmod 664 {} \\;\n</code></pre></p> </li> </ol>"},{"location":"DEPLOYMENT_GUIDE/#debug-mode","title":"Debug Mode","text":"<p>For emergency debugging: <pre><code># Temporarily enable debug mode\nAPP_DEBUG=true php artisan serve\n</code></pre></p> <p>Warning: Never leave debug mode enabled in production!</p>"},{"location":"DEPLOYMENT_GUIDE/#log-locations","title":"Log Locations","text":"<ul> <li>Application: <code>/var/www/api-gateway/storage/logs/</code></li> <li>Nginx: <code>/var/log/nginx/</code></li> <li>PHP-FPM: <code>/var/log/php8.2-fpm.log</code></li> <li>MySQL: <code>/var/log/mysql/error.log</code></li> <li>Redis: <code>/var/log/redis/redis-server.log</code></li> </ul>"},{"location":"DEPLOYMENT_GUIDE/#emergency-contacts","title":"Emergency Contacts","text":""},{"location":"DEPLOYMENT_GUIDE/#escalation-path","title":"Escalation Path","text":"<ol> <li>Level 1 - DevOps Team</li> <li>Primary: [DevOps Lead]</li> <li>Secondary: [DevOps Engineer]</li> <li> <p>Response Time: 15 minutes</p> </li> <li> <p>Level 2 - Development Team</p> </li> <li>Primary: [Tech Lead]</li> <li>Secondary: [Senior Developer]</li> <li> <p>Response Time: 30 minutes</p> </li> <li> <p>Level 3 - Management</p> </li> <li>CTO: [CTO Contact]</li> <li>Response Time: 1 hour</li> </ol>"},{"location":"DEPLOYMENT_GUIDE/#external-services","title":"External Services","text":"<ul> <li>Cal.com Support: support@cal.com</li> <li>Retell.ai Support: support@retellai.com</li> <li>Hosting Provider: [Provider emergency line]</li> </ul>"},{"location":"DEPLOYMENT_GUIDE/#best-practices","title":"Best Practices","text":"<ol> <li>Always deploy during low-traffic periods</li> <li>Test deployment in staging first</li> <li>Keep deployment windows under 30 minutes</li> <li>Monitor for at least 1 hour post-deployment</li> <li>Document any issues or changes</li> <li>Update this guide with lessons learned</li> </ol>"},{"location":"DEPLOYMENT_GUIDE/#deployment-schedule","title":"Deployment Schedule","text":"<p>Recommended deployment windows: - Regular Updates: Tuesday/Thursday 2:00-4:00 AM CET - Emergency Fixes: As needed with approval - Major Releases: Saturday 2:00-6:00 AM CET</p> <p>Last Updated: 2025-06-18 Maintained by: DevOps Team Review Cycle: Monthly</p>"},{"location":"ENHANCED_BOOKING_SERVICE/","title":"Enhanced Booking Service Documentation","text":""},{"location":"ENHANCED_BOOKING_SERVICE/#overview","title":"Overview","text":"<p>The <code>EnhancedBookingService</code> is a robust, production-ready booking system that implements the patterns specified in TECHNICAL_SPECIFICATION_V2_FINAL.md. It provides:</p> <ul> <li>Race condition prevention using TimeSlotLockManager</li> <li>Circuit breaker pattern for external API calls</li> <li>Comprehensive logging with correlation IDs</li> <li>Async processing for notifications and calendar sync</li> <li>Graceful degradation when external services fail</li> <li>Structured result objects for consistent API responses</li> </ul>"},{"location":"ENHANCED_BOOKING_SERVICE/#key-features","title":"Key Features","text":""},{"location":"ENHANCED_BOOKING_SERVICE/#1-time-slot-locking","title":"1. Time Slot Locking","text":"<p>Prevents double bookings by acquiring exclusive locks on time slots before creating appointments.</p>"},{"location":"ENHANCED_BOOKING_SERVICE/#2-circuit-breaker-protection","title":"2. Circuit Breaker Protection","text":"<p>Protects against cascading failures when Cal.com or other external services are down.</p>"},{"location":"ENHANCED_BOOKING_SERVICE/#3-structured-logging","title":"3. Structured Logging","text":"<p>Every operation is logged with correlation IDs for complete traceability.</p>"},{"location":"ENHANCED_BOOKING_SERVICE/#4-async-processing","title":"4. Async Processing","text":"<ul> <li>Calendar sync happens asynchronously with retry logic</li> <li>Notifications are sent via queued jobs</li> <li>Failed operations are automatically retried</li> </ul>"},{"location":"ENHANCED_BOOKING_SERVICE/#5-transaction-safety","title":"5. Transaction Safety","text":"<p>All database operations are wrapped in transactions with proper rollback handling.</p>"},{"location":"ENHANCED_BOOKING_SERVICE/#usage","title":"Usage","text":""},{"location":"ENHANCED_BOOKING_SERVICE/#basic-appointment-creation","title":"Basic Appointment Creation","text":"<pre><code>use App\\Services\\Booking\\EnhancedBookingService;\n\n$bookingService = app(EnhancedBookingService::class);\n\n$result = $bookingService-&gt;createAppointment([\n    'staff_id' =&gt; 'uuid-here',\n    'service_id' =&gt; 123,\n    'start_time' =&gt; '2025-06-20 10:00:00',\n    'customer' =&gt; [\n        'name' =&gt; 'John Doe',\n        'phone' =&gt; '+491234567890',\n        'email' =&gt; 'john@example.com',\n        'company_id' =&gt; 'company-uuid',\n    ],\n    'source' =&gt; 'phone',\n    'notes' =&gt; 'Customer requested morning appointment',\n]);\n\nif ($result-&gt;isSuccess()) {\n    $appointment = $result-&gt;getAppointment();\n    echo \"Appointment booked: \" . $appointment-&gt;id;\n} else {\n    echo \"Booking failed: \" . $result-&gt;getMessage();\n    echo \"Error code: \" . $result-&gt;getErrorCode();\n}\n</code></pre>"},{"location":"ENHANCED_BOOKING_SERVICE/#booking-from-phone-call","title":"Booking from Phone Call","text":"<pre><code>$result = $bookingService-&gt;bookFromPhoneCall([\n    'datum' =&gt; '20.06.2025',\n    'uhrzeit' =&gt; '14:30',\n    'name' =&gt; 'Hans M\u00fcller',\n    'telefonnummer' =&gt; '+491234567890',\n    'email' =&gt; 'hans@mueller.de',\n    'dienstleistung' =&gt; 'Haarschnitt',\n    'mitarbeiter_wunsch' =&gt; 'Maria',\n]);\n\n// Check for warnings (e.g., calendar sync pending)\nif ($result-&gt;hasWarnings()) {\n    foreach ($result-&gt;getWarnings() as $warning) {\n        echo \"Warning: \" . $warning;\n    }\n}\n</code></pre>"},{"location":"ENHANCED_BOOKING_SERVICE/#api-controller-example","title":"API Controller Example","text":"<pre><code>class BookingController extends Controller\n{\n    public function store(Request $request, EnhancedBookingService $bookingService)\n    {\n        $validated = $request-&gt;validate([\n            'staff_id' =&gt; 'required|exists:staff,id',\n            'service_id' =&gt; 'required|exists:services,id',\n            'start_time' =&gt; 'required|date|after:now',\n            'customer.name' =&gt; 'required|string',\n            'customer.phone' =&gt; 'required|string',\n        ]);\n\n        $result = $bookingService-&gt;createAppointment($validated);\n\n        return response()-&gt;json(\n            $result-&gt;toArray(),\n            $result-&gt;getStatusCode()\n        );\n    }\n}\n</code></pre>"},{"location":"ENHANCED_BOOKING_SERVICE/#configuration","title":"Configuration","text":""},{"location":"ENHANCED_BOOKING_SERVICE/#environment-variables","title":"Environment Variables","text":"<pre><code># Circuit Breaker Settings\nCIRCUIT_BREAKER_FAILURE_THRESHOLD=5\nCIRCUIT_BREAKER_SUCCESS_THRESHOLD=2\nCIRCUIT_BREAKER_TIMEOUT=60\n\n# Service-specific Circuit Breakers\nCALCOM_CIRCUIT_BREAKER_THRESHOLD=3\nCALCOM_CIRCUIT_BREAKER_TIMEOUT=30\n</code></pre>"},{"location":"ENHANCED_BOOKING_SERVICE/#service-provider-registration","title":"Service Provider Registration","text":"<p>Add to <code>config/app.php</code>:</p> <pre><code>'providers' =&gt; [\n    // ...\n    App\\Providers\\EnhancedBookingServiceProvider::class,\n],\n</code></pre>"},{"location":"ENHANCED_BOOKING_SERVICE/#database-migrations","title":"Database Migrations","text":"<p>Run the following migrations:</p> <pre><code>php artisan migrate --path=database/migrations/2025_06_17_create_booking_flow_logs_table.php\nphp artisan migrate --path=database/migrations/2025_06_17_create_notification_logs_table.php\nphp artisan migrate --path=database/migrations/2025_06_17_create_circuit_breaker_metrics_table.php\n</code></pre>"},{"location":"ENHANCED_BOOKING_SERVICE/#queue-configuration","title":"Queue Configuration","text":"<p>The service uses different queues for optimal processing:</p> <ul> <li><code>calendar-sync</code> - For Cal.com synchronization</li> <li><code>notifications</code> - For sending emails/SMS</li> <li><code>webhooks</code> - For webhook processing</li> </ul> <p>Configure in <code>config/queue.php</code> or use Horizon.</p>"},{"location":"ENHANCED_BOOKING_SERVICE/#monitoring","title":"Monitoring","text":""},{"location":"ENHANCED_BOOKING_SERVICE/#circuit-breaker-status","title":"Circuit Breaker Status","text":"<pre><code>use App\\Services\\CircuitBreaker\\CircuitBreaker;\n\n$status = CircuitBreaker::getStatus();\n// Returns:\n// [\n//     'calcom' =&gt; ['state' =&gt; 'closed', 'failures' =&gt; 0],\n//     'retell' =&gt; ['state' =&gt; 'open', 'failures' =&gt; 5],\n// ]\n</code></pre>"},{"location":"ENHANCED_BOOKING_SERVICE/#booking-flow-logs","title":"Booking Flow Logs","text":"<p>Query the <code>booking_flow_logs</code> table to trace any booking:</p> <pre><code>SELECT * FROM booking_flow_logs \nWHERE correlation_id = 'uuid-here'\nORDER BY created_at;\n</code></pre>"},{"location":"ENHANCED_BOOKING_SERVICE/#failed-appointments","title":"Failed Appointments","text":"<pre><code>SELECT a.*, blf.context\nFROM appointments a\nJOIN booking_flow_logs blf ON a.id = blf.appointment_id\nWHERE a.metadata-&gt;&gt;'calendar_sync_failed' = 'true'\nORDER BY a.created_at DESC;\n</code></pre>"},{"location":"ENHANCED_BOOKING_SERVICE/#error-handling","title":"Error Handling","text":"<p>The service returns structured <code>AppointmentResult</code> objects with specific error codes:</p> <ul> <li><code>slot_unavailable</code> - Time slot is already booked</li> <li><code>invalid_data</code> - Validation error</li> <li><code>missing_required_field</code> - Required data missing</li> <li><code>service_unavailable</code> - External service down</li> <li><code>general_error</code> - Unexpected error</li> </ul>"},{"location":"ENHANCED_BOOKING_SERVICE/#testing","title":"Testing","text":"<p>Run the test suite:</p> <pre><code>php artisan test --filter EnhancedBookingServiceTest\n</code></pre>"},{"location":"ENHANCED_BOOKING_SERVICE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ENHANCED_BOOKING_SERVICE/#calcom-sync-failures","title":"Cal.com Sync Failures","text":"<ol> <li>Check circuit breaker status</li> <li>Review <code>api_call_logs</code> table for error details</li> <li>Check <code>appointments</code> metadata for sync status</li> <li>Monitor the <code>calendar-sync</code> queue</li> </ol>"},{"location":"ENHANCED_BOOKING_SERVICE/#race-conditions","title":"Race Conditions","text":"<ol> <li>Check <code>appointment_locks</code> table for active locks</li> <li>Review correlation IDs in logs</li> <li>Ensure lock timeout is appropriate for your use case</li> </ol>"},{"location":"ENHANCED_BOOKING_SERVICE/#performance-issues","title":"Performance Issues","text":"<ol> <li>Monitor queue processing times</li> <li>Check database query performance</li> <li>Review circuit breaker metrics</li> <li>Ensure proper indexes exist</li> </ol>"},{"location":"KNOWLEDGE_MCP_SERVER/","title":"Knowledge MCP Server Documentation","text":""},{"location":"KNOWLEDGE_MCP_SERVER/#overview","title":"Overview","text":"<p>The <code>KnowledgeMCPServer</code> provides a comprehensive knowledge management system for the AskProAI platform. It enables companies to maintain their own knowledge base, which can be used by AI agents to provide accurate, company-specific responses to customer inquiries.</p>"},{"location":"KNOWLEDGE_MCP_SERVER/#features","title":"Features","text":""},{"location":"KNOWLEDGE_MCP_SERVER/#1-multi-tenant-knowledge-management","title":"1. Multi-Tenant Knowledge Management","text":"<ul> <li>Each company has its own isolated knowledge base</li> <li>Documents are automatically filtered by <code>company_id</code></li> <li>Support for company-specific customization</li> </ul>"},{"location":"KNOWLEDGE_MCP_SERVER/#2-industry-templates","title":"2. Industry Templates","text":"<p>Pre-configured templates for different industries: - Medical: Appointment booking guides, FAQs - Beauty: Service descriptions, treatment information - Veterinary: Pet care instructions, appointment guidelines - Legal: Consultation information, fee structures</p>"},{"location":"KNOWLEDGE_MCP_SERVER/#3-document-versioning","title":"3. Document Versioning","text":"<ul> <li>Automatic version tracking for all document changes</li> <li>Complete history of modifications</li> <li>Rollback capabilities (future enhancement)</li> </ul>"},{"location":"KNOWLEDGE_MCP_SERVER/#4-ai-context-generation","title":"4. AI Context Generation","text":"<ul> <li>Automatically selects relevant documents for AI conversations</li> <li>Combines company-specific and industry-standard knowledge</li> <li>Optimized context length for efficient AI processing</li> </ul>"},{"location":"KNOWLEDGE_MCP_SERVER/#5-full-text-search","title":"5. Full-Text Search","text":"<ul> <li>MySQL full-text search capabilities</li> <li>Relevance scoring</li> <li>Search highlighting</li> <li>Analytics tracking</li> </ul>"},{"location":"KNOWLEDGE_MCP_SERVER/#6-caching-layer","title":"6. Caching Layer","text":"<ul> <li>Redis-based caching for performance</li> <li>Configurable TTL (default: 1 hour)</li> <li>Automatic cache invalidation on updates</li> </ul>"},{"location":"KNOWLEDGE_MCP_SERVER/#available-methods","title":"Available Methods","text":""},{"location":"KNOWLEDGE_MCP_SERVER/#getcompanyknowledgearray-params","title":"<code>getCompanyKnowledge(array $params)</code>","text":"<p>Retrieves all knowledge documents for a specific company.</p> <p>Parameters: - <code>company_id</code> (required): The company ID - <code>category</code>: Filter by category slug - <code>status</code>: Document status (default: 'published') - <code>limit</code>: Maximum documents to return (default: 20, max: 100) - <code>offset</code>: Pagination offset</p> <p>Example: <pre><code>$result = $mcp-&gt;getCompanyKnowledge([\n    'company_id' =&gt; 1,\n    'category' =&gt; 'appointments',\n    'limit' =&gt; 10\n]);\n</code></pre></p>"},{"location":"KNOWLEDGE_MCP_SERVER/#searchknowledgearray-params","title":"<code>searchKnowledge(array $params)</code>","text":"<p>Search across knowledge documents using full-text search.</p> <p>Parameters: - <code>query</code> (required): Search query (min 3 characters) - <code>company_id</code>: Filter by company - <code>categories</code>: Array of category slugs - <code>tags</code>: Array of tag slugs - <code>limit</code>: Maximum results (default: 20, max: 50)</p> <p>Example: <pre><code>$result = $mcp-&gt;searchKnowledge([\n    'query' =&gt; 'Terminvereinbarung',\n    'company_id' =&gt; 1,\n    'tags' =&gt; ['appointments', 'booking']\n]);\n</code></pre></p>"},{"location":"KNOWLEDGE_MCP_SERVER/#updateknowledgearray-params","title":"<code>updateKnowledge(array $params)</code>","text":"<p>Update an existing knowledge document.</p> <p>Parameters: - <code>document_id</code> (required): Document to update - <code>company_id</code> (required): Company ID for verification - <code>user_id</code>: User making the update - <code>title</code>: New title - <code>content</code>: New content - <code>excerpt</code>: New excerpt - <code>status</code>: New status - <code>tags</code>: Array of tag names</p> <p>Example: <pre><code>$result = $mcp-&gt;updateKnowledge([\n    'document_id' =&gt; 123,\n    'company_id' =&gt; 1,\n    'user_id' =&gt; 5,\n    'content' =&gt; 'Updated content here...',\n    'tags' =&gt; ['updated', 'important']\n]);\n</code></pre></p>"},{"location":"KNOWLEDGE_MCP_SERVER/#getcontextforaiarray-params","title":"<code>getContextForAI(array $params)</code>","text":"<p>Generate optimized context for AI conversations.</p> <p>Parameters: - <code>company_id</code> (required): Company ID - <code>context</code>: Current conversation context - <code>industry</code>: Industry type for template selection - <code>max_documents</code>: Maximum documents to include (default: 5, max: 10)</p> <p>Example: <pre><code>$result = $mcp-&gt;getContextForAI([\n    'company_id' =&gt; 1,\n    'context' =&gt; 'Customer wants to book appointment',\n    'industry' =&gt; 'medical',\n    'max_documents' =&gt; 3\n]);\n</code></pre></p>"},{"location":"KNOWLEDGE_MCP_SERVER/#getcategoryknowledgearray-params","title":"<code>getCategoryKnowledge(array $params)</code>","text":"<p>Get all documents in a specific category.</p> <p>Parameters: - <code>company_id</code> (required): Company ID - <code>category_slug</code> (required): Category slug - <code>include_subcategories</code>: Include documents from subcategories (default: true)</p> <p>Example: <pre><code>$result = $mcp-&gt;getCategoryKnowledge([\n    'company_id' =&gt; 1,\n    'category_slug' =&gt; 'services',\n    'include_subcategories' =&gt; true\n]);\n</code></pre></p>"},{"location":"KNOWLEDGE_MCP_SERVER/#createfromtemplatearray-params","title":"<code>createFromTemplate(array $params)</code>","text":"<p>Create a new document from an industry template.</p> <p>Parameters: - <code>company_id</code> (required): Company ID - <code>template_id</code>: Specific template ID - <code>industry</code>: Industry type (if not using template_id) - <code>custom_data</code>: Custom values for personalization</p> <p>Example: <pre><code>$result = $mcp-&gt;createFromTemplate([\n    'company_id' =&gt; 1,\n    'industry' =&gt; 'medical',\n    'custom_data' =&gt; [\n        'title' =&gt; 'Our Appointment Process',\n        'category_id' =&gt; 5\n    ]\n]);\n</code></pre></p>"},{"location":"KNOWLEDGE_MCP_SERVER/#getstatisticsarray-params","title":"<code>getStatistics(array $params)</code>","text":"<p>Get comprehensive statistics about knowledge usage.</p> <p>Parameters: - <code>company_id</code> (required): Company ID - <code>period</code>: Time period ('7days', '30days', '90days', 'year')</p> <p>Example: <pre><code>$result = $mcp-&gt;getStatistics([\n    'company_id' =&gt; 1,\n    'period' =&gt; '30days'\n]);\n</code></pre></p>"},{"location":"KNOWLEDGE_MCP_SERVER/#database-schema","title":"Database Schema","text":""},{"location":"KNOWLEDGE_MCP_SERVER/#knowledge_documents","title":"knowledge_documents","text":"<ul> <li><code>id</code>: Primary key</li> <li><code>company_id</code>: Tenant identifier</li> <li><code>title</code>: Document title</li> <li><code>slug</code>: URL-friendly identifier</li> <li><code>content</code>: Processed content (HTML)</li> <li><code>raw_content</code>: Original content (Markdown)</li> <li><code>excerpt</code>: Short description</li> <li><code>category_id</code>: Category reference</li> <li><code>status</code>: draft/published/archived</li> <li><code>order</code>: Display order</li> <li><code>metadata</code>: JSON additional data</li> <li><code>view_count</code>: Number of views</li> <li><code>helpful_count</code>: Positive feedback count</li> <li><code>not_helpful_count</code>: Negative feedback count</li> </ul>"},{"location":"KNOWLEDGE_MCP_SERVER/#knowledge_versions","title":"knowledge_versions","text":"<ul> <li><code>id</code>: Primary key</li> <li><code>document_id</code>: Reference to document</li> <li><code>version_number</code>: Sequential version</li> <li><code>title</code>: Title at time of version</li> <li><code>content</code>: Content at time of version</li> <li><code>created_by</code>: User who created version</li> <li><code>change_summary</code>: Description of changes</li> </ul>"},{"location":"KNOWLEDGE_MCP_SERVER/#configuration","title":"Configuration","text":"<p>Add to <code>config/knowledge.php</code>:</p> <pre><code>return [\n    'cache' =&gt; [\n        'ttl' =&gt; 3600, // 1 hour\n        'prefix' =&gt; 'mcp:knowledge'\n    ],\n    'search' =&gt; [\n        'min_length' =&gt; 3,\n        'max_results' =&gt; 50\n    ],\n    'ai' =&gt; [\n        'max_context_documents' =&gt; 10,\n        'max_context_length' =&gt; 4000\n    ]\n];\n</code></pre>"},{"location":"KNOWLEDGE_MCP_SERVER/#usage-in-retell-ai-integration","title":"Usage in Retell AI Integration","text":"<p>The Knowledge MCP Server can be integrated with Retell AI to provide context-aware responses:</p> <pre><code>// In your Retell webhook handler\n$knowledgeMCP = new KnowledgeMCPServer();\n\n// Get AI context based on customer query\n$context = $knowledgeMCP-&gt;getContextForAI([\n    'company_id' =&gt; $company-&gt;id,\n    'context' =&gt; $customerQuery,\n    'industry' =&gt; $company-&gt;industry\n]);\n\n// Pass context to Retell AI\n$retellResponse = $retellService-&gt;generateResponse([\n    'query' =&gt; $customerQuery,\n    'context' =&gt; $context['documents'],\n    'company_info' =&gt; $context['company_context']\n]);\n</code></pre>"},{"location":"KNOWLEDGE_MCP_SERVER/#best-practices","title":"Best Practices","text":"<ol> <li>Document Organization</li> <li>Use clear, descriptive titles</li> <li>Assign appropriate categories</li> <li>Tag with relevant keywords</li> <li> <p>Keep content concise and focused</p> </li> <li> <p>AI Optimization</p> </li> <li>Tag documents with 'ai-context' for AI priority</li> <li>Use structured content (headings, lists)</li> <li>Include common questions and answers</li> <li> <p>Keep critical information at the beginning</p> </li> <li> <p>Performance</p> </li> <li>Documents are cached for 1 hour</li> <li>Use pagination for large result sets</li> <li> <p>Consider indexing frequently searched fields</p> </li> <li> <p>Multi-Tenancy</p> </li> <li>Always include company_id in queries</li> <li>Verify company ownership before updates</li> <li>Use tenant-specific categories and tags</li> </ol>"},{"location":"KNOWLEDGE_MCP_SERVER/#testing","title":"Testing","text":"<p>Run the test script to verify functionality:</p> <pre><code>php test-knowledge-mcp.php\n</code></pre> <p>This will: - Create sample documents from templates - Test search functionality - Demonstrate AI context generation - Show statistics capabilities</p>"},{"location":"KNOWLEDGE_MCP_SERVER/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>Markdown Processing</li> <li>Convert Markdown to HTML</li> <li>Syntax highlighting for code blocks</li> <li> <p>Table of contents generation</p> </li> <li> <p>Advanced Search</p> </li> <li>Elasticsearch integration</li> <li>Fuzzy matching</li> <li> <p>Synonym support</p> </li> <li> <p>Collaboration</p> </li> <li>Document comments</li> <li>Change approval workflow</li> <li> <p>Team notifications</p> </li> <li> <p>Analytics</p> </li> <li>Detailed usage reports</li> <li>Search term analysis</li> <li>Content gap identification</li> </ol>"},{"location":"MCP_COMPLETE_OVERVIEW/","title":"\ud83d\ude80 AskProAI MCP System - Komplette \u00dcbersicht","text":""},{"location":"MCP_COMPLETE_OVERVIEW/#was-sind-mcps-und-warum-brauchen-wir-sie","title":"\ud83d\udccb Was sind MCPs und warum brauchen wir sie?","text":"<p>MCP (Model Context Protocol) erm\u00f6glicht es Claude, direkt mit Ihrer Anwendung zu kommunizieren. Statt manuell Logs zu durchsuchen oder SQL-Queries zu schreiben, k\u00f6nnen Sie Claude einfach fragen: \"Warum ist die Buchung fehlgeschlagen?\"</p>"},{"location":"MCP_COMPLETE_OVERVIEW/#verfugbare-mcp-server","title":"\ud83c\udfaf Verf\u00fcgbare MCP Server","text":""},{"location":"MCP_COMPLETE_OVERVIEW/#1-database-mcp","title":"1. Database MCP \ud83d\uddc4\ufe0f","text":"<p>Zweck: Datenbank-Analyse ohne SQL-Kenntnisse</p> <p>Claude kann f\u00fcr Sie: - \"Zeige alle fehlgeschlagenen Termine heute\" - \"Wie viele Kunden haben wir in Berlin?\" - \"Suche nach Kunde mit Telefonnummer 0170...\"</p> <p>Endpoints: - <code>GET /api/mcp/database/schema</code> - Datenbankstruktur - <code>POST /api/mcp/database/query</code> - SQL ausf\u00fchren - <code>POST /api/mcp/database/search</code> - Textsuche - <code>GET /api/mcp/database/failed-appointments</code> - Fehlerhafte Termine - <code>GET /api/mcp/database/call-stats</code> - Anrufstatistiken</p>"},{"location":"MCP_COMPLETE_OVERVIEW/#2-calcom-mcp","title":"2. Cal.com MCP \ud83d\udcc5","text":"<p>Zweck: Kalender-System verwalten</p> <p>Claude kann f\u00fcr Sie: - \"Synchronisiere alle Event Types\" - \"Welche Termine sind morgen frei?\" - \"Zeige mir die Buchungen dieser Woche\" - \"Welcher Mitarbeiter kann welchen Service?\"</p> <p>Endpoints: - <code>GET /api/mcp/calcom/event-types</code> - Event Types anzeigen - <code>POST /api/mcp/calcom/availability</code> - Verf\u00fcgbarkeit pr\u00fcfen - <code>GET /api/mcp/calcom/bookings</code> - Buchungen abrufen - <code>POST /api/mcp/calcom/sync</code> - Synchronisieren - <code>GET /api/mcp/calcom/test/{id}</code> - Verbindung testen</p>"},{"location":"MCP_COMPLETE_OVERVIEW/#3-retellai-mcp","title":"3. Retell.ai MCP \ud83d\udcde","text":"<p>Zweck: Telefon-AI System \u00fcberwachen</p> <p>Claude kann f\u00fcr Sie: - \"Wie viele Anrufe hatten wir heute?\" - \"Zeige Details zum letzten Anruf\" - \"Welche Telefonnummern sind aktiv?\" - \"Analysiere die Anrufqualit\u00e4t\"</p> <p>Endpoints: - <code>GET /api/mcp/retell/agent/{id}</code> - Agent-Details - <code>GET /api/mcp/retell/call-stats</code> - Anrufstatistiken - <code>GET /api/mcp/retell/recent-calls</code> - Letzte Anrufe - <code>GET /api/mcp/retell/phone-numbers/{id}</code> - Telefonnummern</p>"},{"location":"MCP_COMPLETE_OVERVIEW/#4-sentry-mcp","title":"4. Sentry MCP \ud83d\udc1b","text":"<p>Zweck: Fehler analysieren und beheben</p> <p>Claude kann f\u00fcr Sie: - \"Welche Fehler treten h\u00e4ufig auf?\" - \"Zeige mir den Stack Trace f\u00fcr Fehler XYZ\" - \"Gibt es Performance-Probleme?\"</p> <p>Endpoints: - <code>GET /api/mcp/sentry/issues</code> - Aktuelle Fehler - <code>GET /api/mcp/sentry/issues/{id}</code> - Fehlerdetails - <code>GET /api/mcp/sentry/performance</code> - Performance-Daten</p>"},{"location":"MCP_COMPLETE_OVERVIEW/#5-queue-mcp","title":"5. Queue MCP \ud83d\udccb","text":"<p>Zweck: Queue-System und Jobs \u00fcberwachen</p> <p>Claude kann f\u00fcr Sie: - \"Wie viele Jobs sind fehlgeschlagen?\" - \"Zeige mir die letzten Webhook-Jobs\" - \"Warum ist Job XYZ fehlgeschlagen?\" - \"Wie ist die Queue-Performance?\" - \"Starte fehlgeschlagenen Job neu\"</p> <p>Endpoints: - <code>GET /api/mcp/queue/overview</code> - Queue-\u00dcbersicht - <code>GET /api/mcp/queue/failed-jobs</code> - Fehlgeschlagene Jobs - <code>GET /api/mcp/queue/recent-jobs</code> - Letzte Jobs - <code>GET /api/mcp/queue/job/{id}</code> - Job-Details - <code>POST /api/mcp/queue/job/{id}/retry</code> - Job neu starten - <code>GET /api/mcp/queue/metrics</code> - Performance-Metriken - <code>GET /api/mcp/queue/workers</code> - Worker-Status - <code>POST /api/mcp/queue/search</code> - Jobs suchen</p>"},{"location":"MCP_COMPLETE_OVERVIEW/#6-laravel-loop","title":"6. Laravel Loop \ud83d\udd04","text":"<p>Zweck: Direkte Laravel-Kontrolle</p> <p>Claude kann f\u00fcr Sie: - \"F\u00fchre php artisan queue:monitor aus\" - \"Zeige alle Routes\" - \"L\u00f6sche den Cache\" - \"Welche Jobs sind in der Queue?\"</p>"},{"location":"MCP_COMPLETE_OVERVIEW/#typische-anwendungsfalle","title":"\ud83c\udfa8 Typische Anwendungsf\u00e4lle","text":""},{"location":"MCP_COMPLETE_OVERVIEW/#fehlersuche-bei-gescheiterten-buchungen","title":"\ud83d\udd0d Fehlersuche bei gescheiterten Buchungen","text":"<pre><code>Sie: \"Claude, warum ist die Buchung f\u00fcr Kunde Schmidt heute fehlgeschlagen?\"\n\nClaude nutzt automatisch:\n1. Database MCP \u2192 Sucht nach Kunde Schmidt\n2. Database MCP \u2192 Findet fehlerhafte Appointments\n3. Retell MCP \u2192 Pr\u00fcft zugeh\u00f6rige Anrufe\n4. Sentry MCP \u2192 Sucht nach Fehlern im Zeitraum\n5. Cal.com MCP \u2192 Pr\u00fcft Kalenderstatus\n\nAntwort: \"Die Buchung ist fehlgeschlagen, weil...\"\n</code></pre>"},{"location":"MCP_COMPLETE_OVERVIEW/#taglicher-status-check","title":"\ud83d\udcca T\u00e4glicher Status-Check","text":"<pre><code>Sie: \"Claude, gib mir einen \u00dcberblick \u00fcber heute\"\n\nClaude nutzt automatisch:\n1. Database MCP \u2192 Appointments &amp; Calls heute\n2. Retell MCP \u2192 Anrufstatistiken\n3. Cal.com MCP \u2192 Buchungsstatus\n4. Sentry MCP \u2192 Neue Fehler\n\nAntwort: \"Heute: 47 Anrufe, 23 Buchungen, 2 Fehler...\"\n</code></pre>"},{"location":"MCP_COMPLETE_OVERVIEW/#system-wartung","title":"\ud83d\udee0\ufe0f System-Wartung","text":"<pre><code>Sie: \"Claude, optimiere das System\"\n\nClaude nutzt automatisch:\n1. Laravel Loop \u2192 Cache leeren\n2. Queue MCP \u2192 Queue-Status und Failed Jobs pr\u00fcfen\n3. Database MCP \u2192 Langsame Queries finden\n4. Sentry MCP \u2192 Performance-Bottlenecks\n5. Queue MCP \u2192 Worker-Status \u00fcberpr\u00fcfen\n\nAntwort: \"Optimierungen durchgef\u00fchrt: ...\"\n</code></pre>"},{"location":"MCP_COMPLETE_OVERVIEW/#webhook-probleme-debuggen","title":"\ud83d\udd04 Webhook-Probleme debuggen","text":"<pre><code>Sie: \"Claude, warum werden Webhooks nicht verarbeitet?\"\n\nClaude nutzt automatisch:\n1. Queue MCP \u2192 Failed Jobs suchen\n2. Queue MCP \u2192 Job Details abrufen\n3. Sentry MCP \u2192 Fehler analysieren\n4. Database MCP \u2192 Webhook Events pr\u00fcfen\n5. Queue MCP \u2192 Jobs neu starten\n\nAntwort: \"Die Webhooks schlagen fehl wegen...\"\n</code></pre>"},{"location":"MCP_COMPLETE_OVERVIEW/#mcp-auswahl-matrix","title":"\ud83d\udea6 MCP Auswahl-Matrix","text":"Problem Prim\u00e4rer MCP Sekund\u00e4re MCPs Buchung fehlgeschlagen Database Retell, Cal.com, Sentry, Queue Keine Anrufe kommen an Retell Database, Sentry, Queue Kalender nicht synchron Cal.com Database, Queue System langsam Laravel Loop Sentry, Database, Queue Kunde beschwert sich Database Retell, Cal.com Fehler im Admin Panel Sentry Laravel Loop Webhook nicht verarbeitet Queue Database, Sentry Jobs schlagen fehl Queue Sentry, Database Horizon l\u00e4uft nicht Queue Laravel Loop"},{"location":"MCP_COMPLETE_OVERVIEW/#fehlende-mcps-roadmap","title":"\ud83d\udd27 Fehlende MCPs (Roadmap)","text":""},{"location":"MCP_COMPLETE_OVERVIEW/#1-customer-intelligence-mcp-prioritat-hoch","title":"1. Customer Intelligence MCP (PRIORIT\u00c4T: HOCH)","text":"<ul> <li>Kundenverhalten analysieren</li> <li>Duplikate finden</li> <li>Kommunikationshistorie</li> </ul>"},{"location":"MCP_COMPLETE_OVERVIEW/#3-business-analytics-mcp","title":"3. Business Analytics MCP","text":"<ul> <li>Umsatzanalyse</li> <li>Conversion-Trichter</li> <li>ROI-Berechnungen</li> </ul>"},{"location":"MCP_COMPLETE_OVERVIEW/#4-integration-health-mcp","title":"4. Integration Health MCP","text":"<ul> <li>Alle APIs \u00fcberwachen</li> <li>Circuit Breaker Status</li> <li>Webhook-Verarbeitung</li> </ul>"},{"location":"MCP_COMPLETE_OVERVIEW/#quick-reference","title":"\ud83d\udcda Quick Reference","text":""},{"location":"MCP_COMPLETE_OVERVIEW/#mcp-token-erstellen","title":"MCP Token erstellen:","text":"<pre><code>php artisan mcp:create-token admin@askproai.de\n</code></pre>"},{"location":"MCP_COMPLETE_OVERVIEW/#verbindung-testen","title":"Verbindung testen:","text":"<pre><code>php artisan mcp:test YOUR_TOKEN\n</code></pre>"},{"location":"MCP_COMPLETE_OVERVIEW/#laravel-loop-starten","title":"Laravel Loop starten:","text":"<pre><code>php artisan loop:mcp:start\n</code></pre>"},{"location":"MCP_COMPLETE_OVERVIEW/#cache-leeren","title":"Cache leeren:","text":"<pre><code>curl -X POST -H \"Authorization: Bearer TOKEN\" \\\n  https://api.askproai.de/api/mcp/database/cache/clear\n</code></pre>"},{"location":"MCP_COMPLETE_OVERVIEW/#best-practices","title":"\ud83c\udfaf Best Practices","text":"<ol> <li>Immer Company Context angeben</li> <li>\u2705 \"Fehler f\u00fcr Firma ABC\"</li> <li> <p>\u274c \"Alle Fehler\"</p> </li> <li> <p>Zeitr\u00e4ume begrenzen</p> </li> <li>\u2705 \"Anrufe der letzten 24 Stunden\"</li> <li> <p>\u274c \"Alle Anrufe\"</p> </li> <li> <p>Spezifisch fragen</p> </li> <li>\u2705 \"Warum ist Buchung #123 fehlgeschlagen?\"</li> <li> <p>\u274c \"Was l\u00e4uft falsch?\"</p> </li> <li> <p>MCPs kombinieren</p> </li> <li>Bei Buchungsproblemen: Database + Cal.com + Retell + Queue</li> <li>Bei Performance: Laravel Loop + Sentry + Queue</li> <li>Bei Kundenproblemen: Database + Retell</li> <li>Bei Webhook-Problemen: Queue + Database + Sentry</li> </ol>"},{"location":"MCP_COMPLETE_OVERVIEW/#wichtige-befehle-fur-notfalle","title":"\ud83d\udea8 Wichtige Befehle f\u00fcr Notf\u00e4lle","text":"<pre><code># System-Status pr\u00fcfen\nphp artisan mcp:test TOKEN --endpoint=all\n\n# Alle Caches leeren\nphp artisan optimize:clear\n\n# Queue neustarten\nphp artisan queue:restart\n\n# Fehler der letzten Stunde\ncurl -H \"Authorization: Bearer TOKEN\" \\\n  \"https://api.askproai.de/api/mcp/sentry/issues?query=created_at:&gt;1h\"\n\n# Queue-Status pr\u00fcfen\ncurl -H \"Authorization: Bearer TOKEN\" \\\n  https://api.askproai.de/api/mcp/queue/overview\n\n# Fehlgeschlagene Jobs anzeigen\ncurl -H \"Authorization: Bearer TOKEN\" \\\n  https://api.askproai.de/api/mcp/queue/failed-jobs\n\n# Job neu starten\ncurl -X POST -H \"Authorization: Bearer TOKEN\" \\\n  https://api.askproai.de/api/mcp/queue/job/JOB_ID/retry\n</code></pre>"},{"location":"MCP_COMPLETE_OVERVIEW/#monitoring","title":"\ud83d\udcc8 Monitoring","text":"<p>\u00dcberwachen Sie die MCP-Nutzung: <pre><code>-- Top MCP Endpoints\nSELECT endpoint, COUNT(*) as calls, AVG(response_time_ms) as avg_ms\nFROM api_call_logs\nWHERE endpoint LIKE '/api/mcp/%'\nAND created_at &gt; NOW() - INTERVAL 24 HOUR\nGROUP BY endpoint\nORDER BY calls DESC;\n</code></pre></p> <p>Tipp: Speichern Sie diese \u00dcbersicht als Lesezeichen. Bei Problemen k\u00f6nnen Sie Claude einfach sagen: \"Nutze die MCP \u00dcbersicht und l\u00f6se Problem X\"</p>"},{"location":"MCP_EVOLUTION_SYSTEM/","title":"MCP Discovery &amp; Evolution System","text":""},{"location":"MCP_EVOLUTION_SYSTEM/#overview","title":"Overview","text":"<p>The MCP Discovery &amp; Evolution System is a comprehensive framework for AskProAI that automatically discovers, evaluates, and integrates new Model Context Protocol (MCP) capabilities. This system ensures AskProAI stays at the forefront of AI-assisted development by continuously monitoring and adopting relevant MCPs.</p>"},{"location":"MCP_EVOLUTION_SYSTEM/#architecture","title":"Architecture","text":""},{"location":"MCP_EVOLUTION_SYSTEM/#1-mcp-discovery-service","title":"1. MCP Discovery Service","text":"<p>Located at: <code>app/Services/MCP/Discovery/MCPDiscoveryService.php</code></p> <p>Key Features: - Multi-source discovery (Anthropic Registry, GitHub, NPM, Community) - Relevance scoring based on AskProAI's needs - Automatic catalog maintenance - Smart filtering for German market focus</p> <p>Configuration: <code>config/mcp-discovery.php</code></p>"},{"location":"MCP_EVOLUTION_SYSTEM/#2-uiux-best-practices-mcp","title":"2. UI/UX Best Practices MCP","text":"<p>Located at: <code>app/Services/MCP/UIUXBestPracticesMCP.php</code></p> <p>Capabilities: - Laravel/Filament best practices monitoring - Performance analysis - Accessibility scoring - Responsive design checking - Trend monitoring</p> <p>Configuration: <code>config/mcp-uiux.php</code></p>"},{"location":"MCP_EVOLUTION_SYSTEM/#3-safe-deployment-system","title":"3. Safe Deployment System","text":"<p>Located at: <code>app/Services/Deployment/SafeDeploymentService.php</code></p> <p>Features: - Zero-downtime deployments - Automatic rollback on failure - Comprehensive pre/post checks - Blue-green deployment support - Health monitoring</p> <p>Configuration: <code>config/deployment.php</code></p>"},{"location":"MCP_EVOLUTION_SYSTEM/#4-continuous-improvement-engine","title":"4. Continuous Improvement Engine","text":"<p>Located at: <code>app/Services/ContinuousImprovement/ImprovementEngine.php</code></p> <p>Capabilities: - Performance bottleneck detection - Pattern recognition - Predictive analysis - Automatic optimization suggestions - Real-time monitoring</p> <p>Configuration: <code>config/improvement-engine.php</code></p>"},{"location":"MCP_EVOLUTION_SYSTEM/#usage","title":"Usage","text":""},{"location":"MCP_EVOLUTION_SYSTEM/#command-line-interface","title":"Command Line Interface","text":""},{"location":"MCP_EVOLUTION_SYSTEM/#1-discover-new-mcps","title":"1. Discover New MCPs","text":"<pre><code># Discover MCPs from all sources\nphp artisan mcp:discover\n\n# Discover from specific source\nphp artisan mcp:discover --source=github\n\n# Auto-install highly relevant MCPs\nphp artisan mcp:discover --install\n\n# Dry run to see what would be discovered\nphp artisan mcp:discover --dry-run\n</code></pre>"},{"location":"MCP_EVOLUTION_SYSTEM/#2-analyze-uiux","title":"2. Analyze UI/UX","text":"<pre><code># Full UI/UX analysis\nphp artisan uiux:analyze\n\n# Analyze specific component\nphp artisan uiux:analyze --component=AppointmentResource\n\n# Generate improvement suggestions\nphp artisan uiux:analyze --suggest\n\n# Monitor UI/UX trends\nphp artisan uiux:analyze --monitor\n</code></pre>"},{"location":"MCP_EVOLUTION_SYSTEM/#3-safe-deployment","title":"3. Safe Deployment","text":"<pre><code># Deploy with all safety checks\nphp artisan deploy:safe\n\n# Deploy specific branch\nphp artisan deploy:safe --branch=feature/new-feature\n\n# Skip tests (not recommended)\nphp artisan deploy:safe --skip-tests\n\n# Disable automatic rollback\nphp artisan deploy:safe --no-rollback\n</code></pre>"},{"location":"MCP_EVOLUTION_SYSTEM/#4-continuous-improvement","title":"4. Continuous Improvement","text":"<pre><code># Run system analysis\nphp artisan improvement:analyze\n\n# Apply specific optimization\nphp artisan improvement:analyze --apply=query_optimization_123\n\n# Start continuous monitoring\nphp artisan improvement:analyze --monitor\n\n# Generate detailed report\nphp artisan improvement:analyze --report\n</code></pre>"},{"location":"MCP_EVOLUTION_SYSTEM/#mcp-relevance-scoring","title":"MCP Relevance Scoring","text":"<p>The system evaluates MCPs based on:</p>"},{"location":"MCP_EVOLUTION_SYSTEM/#priority-categories-40-weight","title":"Priority Categories (40% weight)","text":"<ul> <li>Calendar/Scheduling</li> <li>Appointment/Booking</li> <li>Telephony/Voice</li> <li>AI/Conversation</li> </ul>"},{"location":"MCP_EVOLUTION_SYSTEM/#secondary-categories-30-weight","title":"Secondary Categories (30% weight)","text":"<ul> <li>CRM/Customer</li> <li>Business/Automation</li> <li>Monitoring/Analytics</li> <li>Performance</li> </ul>"},{"location":"MCP_EVOLUTION_SYSTEM/#keywords-20-weight","title":"Keywords (20% weight)","text":"<ul> <li>High Priority: laravel, filament, calcom, retell, german, gdpr</li> <li>Medium Priority: php, mysql, webhook, multi-tenant, saas</li> </ul>"},{"location":"MCP_EVOLUTION_SYSTEM/#popularity-maintenance-10-weight","title":"Popularity &amp; Maintenance (10% weight)","text":"<ul> <li>GitHub stars</li> <li>NPM downloads</li> <li>Last update date</li> </ul>"},{"location":"MCP_EVOLUTION_SYSTEM/#deployment-safety-features","title":"Deployment Safety Features","text":""},{"location":"MCP_EVOLUTION_SYSTEM/#pre-deployment-checks","title":"Pre-Deployment Checks","text":"<ol> <li>Database Connectivity - Ensures database is accessible</li> <li>Pending Migrations - Identifies migrations to run</li> <li>Test Suite - Runs all tests</li> <li>Disk Space - Verifies sufficient space</li> <li>External Services - Checks Cal.com, Retell.ai availability</li> </ol>"},{"location":"MCP_EVOLUTION_SYSTEM/#zero-downtime-strategy","title":"Zero-Downtime Strategy","text":"<ol> <li>Blue-Green Deployment</li> <li>Deploy to inactive environment</li> <li>Run health checks</li> <li> <p>Switch traffic atomically</p> </li> <li> <p>Rolling Deployment</p> </li> <li>Update instances gradually</li> <li>Monitor each instance</li> <li>Automatic rollback on failure</li> </ol>"},{"location":"MCP_EVOLUTION_SYSTEM/#rollback-mechanism","title":"Rollback Mechanism","text":"<ul> <li>Automatic database backup before deployment</li> <li>Code snapshot creation</li> <li>Configuration preservation</li> <li>One-command rollback: <code>php artisan deploy:rollback</code></li> </ul>"},{"location":"MCP_EVOLUTION_SYSTEM/#continuous-improvement-metrics","title":"Continuous Improvement Metrics","text":""},{"location":"MCP_EVOLUTION_SYSTEM/#performance-tracking","title":"Performance Tracking","text":"<ul> <li>Response times (API, Web, Database)</li> <li>Throughput (requests/second)</li> <li>Error rates</li> <li>Resource utilization</li> </ul>"},{"location":"MCP_EVOLUTION_SYSTEM/#bottleneck-detection","title":"Bottleneck Detection","text":"<ul> <li>Database: Slow queries, lock waits, connection exhaustion</li> <li>API: High latency, timeouts, error spikes</li> <li>Queue: Processing delays, growing backlogs</li> <li>Resources: CPU/Memory/Disk constraints</li> </ul>"},{"location":"MCP_EVOLUTION_SYSTEM/#optimization-types","title":"Optimization Types","text":"<ol> <li>Query Optimization</li> <li>Missing index detection</li> <li>N+1 query identification</li> <li> <p>Query rewriting suggestions</p> </li> <li> <p>Cache Optimization</p> </li> <li>Hit rate improvement</li> <li>Cache warming strategies</li> <li> <p>TTL optimization</p> </li> <li> <p>Architecture Optimization</p> </li> <li>Horizontal scaling recommendations</li> <li>Service decomposition</li> <li>Load balancing improvements</li> </ol>"},{"location":"MCP_EVOLUTION_SYSTEM/#integration-with-askproai","title":"Integration with AskProAI","text":""},{"location":"MCP_EVOLUTION_SYSTEM/#automatic-scheduling","title":"Automatic Scheduling","text":"<pre><code># config/schedule.php\n$schedule-&gt;command('mcp:discover')-&gt;daily();\n$schedule-&gt;command('uiux:analyze')-&gt;weekly();\n$schedule-&gt;command('improvement:analyze')-&gt;hourly();\n</code></pre>"},{"location":"MCP_EVOLUTION_SYSTEM/#dashboard-integration","title":"Dashboard Integration","text":"<p>Access real-time metrics at: <code>/admin/system-improvements</code></p>"},{"location":"MCP_EVOLUTION_SYSTEM/#notification-channels","title":"Notification Channels","text":"<ul> <li>Slack webhooks for critical alerts</li> <li>Email summaries for weekly reports</li> <li>Dashboard notifications for new discoveries</li> </ul>"},{"location":"MCP_EVOLUTION_SYSTEM/#best-practices","title":"Best Practices","text":""},{"location":"MCP_EVOLUTION_SYSTEM/#mcp-discovery","title":"MCP Discovery","text":"<ol> <li>Review discovered MCPs weekly</li> <li>Test in staging before production</li> <li>Document integration decisions</li> <li>Monitor MCP performance impact</li> </ol>"},{"location":"MCP_EVOLUTION_SYSTEM/#uiux-improvements","title":"UI/UX Improvements","text":"<ol> <li>Implement high-priority suggestions first</li> <li>A/B test major UI changes</li> <li>Monitor user feedback</li> <li>Maintain accessibility standards</li> </ol>"},{"location":"MCP_EVOLUTION_SYSTEM/#deployments","title":"Deployments","text":"<ol> <li>Always deploy during low-traffic periods</li> <li>Monitor for 15 minutes post-deployment</li> <li>Keep rollback scripts updated</li> <li>Document deployment decisions</li> </ol>"},{"location":"MCP_EVOLUTION_SYSTEM/#continuous-improvement","title":"Continuous Improvement","text":"<ol> <li>Review recommendations weekly</li> <li>Prioritize based on impact vs effort</li> <li>Test optimizations in staging</li> <li>Monitor optimization results</li> </ol>"},{"location":"MCP_EVOLUTION_SYSTEM/#troubleshooting","title":"Troubleshooting","text":""},{"location":"MCP_EVOLUTION_SYSTEM/#mcp-discovery-issues","title":"MCP Discovery Issues","text":"<pre><code># Clear discovery cache\nphp artisan cache:clear --tags=mcp-discovery\n\n# Re-scan all sources\nphp artisan mcp:discover --force\n\n# Check discovery logs\ntail -f storage/logs/mcp-discovery.log\n</code></pre>"},{"location":"MCP_EVOLUTION_SYSTEM/#deployment-failures","title":"Deployment Failures","text":"<pre><code># Check deployment status\nphp artisan deploy:status\n\n# View deployment logs\ntail -f storage/logs/deployment.log\n\n# Manual rollback\nphp artisan deploy:rollback --deployment-id=xxx\n</code></pre>"},{"location":"MCP_EVOLUTION_SYSTEM/#performance-issues","title":"Performance Issues","text":"<pre><code># Run immediate analysis\nphp artisan improvement:analyze --module=performance\n\n# Check bottleneck details\nphp artisan improvement:bottlenecks --verbose\n\n# Export metrics for analysis\nphp artisan improvement:export --format=csv\n</code></pre>"},{"location":"MCP_EVOLUTION_SYSTEM/#security-considerations","title":"Security Considerations","text":"<ol> <li>MCP Verification</li> <li>All MCPs are scanned for security issues</li> <li>Code review required for auto-installations</li> <li> <p>Sandboxed testing environment</p> </li> <li> <p>Deployment Security</p> </li> <li>Encrypted backups</li> <li>Secure credential handling</li> <li> <p>Audit trail for all deployments</p> </li> <li> <p>Data Protection</p> </li> <li>GDPR compliance maintained</li> <li>No customer data in improvement metrics</li> <li>Anonymized performance tracking</li> </ol>"},{"location":"MCP_EVOLUTION_SYSTEM/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>AI-Powered Optimization</li> <li>Machine learning for pattern detection</li> <li>Predictive optimization timing</li> <li> <p>Automated A/B testing</p> </li> <li> <p>Advanced MCP Integration</p> </li> <li>Custom MCP development</li> <li>MCP marketplace integration</li> <li> <p>Community MCP sharing</p> </li> <li> <p>Enhanced Monitoring</p> </li> <li>Real-time performance dashboards</li> <li>Mobile app for monitoring</li> <li>Custom alert rules</li> </ol>"},{"location":"MCP_EVOLUTION_SYSTEM/#support","title":"Support","text":"<p>For issues or questions: 1. Check the troubleshooting guide above 2. Review logs in <code>storage/logs/</code> 3. Contact the development team 4. Create an issue in the repository</p>"},{"location":"MCP_EVOLUTION_SYSTEM/#conclusion","title":"Conclusion","text":"<p>The MCP Discovery &amp; Evolution System ensures AskProAI remains cutting-edge by: - Automatically discovering new capabilities - Maintaining UI/UX excellence - Ensuring safe, reliable deployments - Continuously improving performance</p> <p>This system is designed to evolve with the platform, adapting to new technologies and requirements as they emerge.</p>"},{"location":"MCP_INTEGRATION_GUIDE/","title":"MCP (Model Context Protocol) Integration Guide f\u00fcr AskProAI","text":""},{"location":"MCP_INTEGRATION_GUIDE/#ubersicht","title":"\u00dcbersicht","text":"<p>Diese Anleitung beschreibt die Nutzung der MCP Server Integration in AskProAI. MCP erm\u00f6glicht es AI-Assistenten wie Claude, direkt mit Ihrer Anwendung zu interagieren.</p>"},{"location":"MCP_INTEGRATION_GUIDE/#verfugbare-mcp-server","title":"Verf\u00fcgbare MCP Server","text":""},{"location":"MCP_INTEGRATION_GUIDE/#1-database-mcp-server","title":"1. Database MCP Server","text":"<p>Erm\u00f6glicht Read-Only Zugriff auf die Datenbank f\u00fcr Debugging und Analyse.</p> <p>Endpoints: - <code>GET /api/mcp/database/schema</code> - Datenbankschema abrufen - <code>POST /api/mcp/database/query</code> - SQL-Abfragen ausf\u00fchren (nur SELECT) - <code>POST /api/mcp/database/search</code> - Suche in Tabellen - <code>GET /api/mcp/database/failed-appointments</code> - Fehlgeschlagene Termine - <code>GET /api/mcp/database/call-stats</code> - Anrufstatistiken - <code>GET /api/mcp/database/tenant-stats</code> - Mandanten-Statistiken</p> <p>Beispiel-Anfragen an Claude: - \"Zeige mir alle fehlgeschlagenen Termine der letzten 24 Stunden\" - \"Wie viele Anrufe hatten wir diese Woche?\" - \"Suche nach Kunden mit der Telefonnummer 0170...\"</p>"},{"location":"MCP_INTEGRATION_GUIDE/#2-calcom-mcp-server","title":"2. Cal.com MCP Server","text":"<p>Integration mit Cal.com f\u00fcr Kalender-Management.</p> <p>Endpoints: - <code>GET /api/mcp/calcom/event-types?company_id=XXX</code> - Event Types abrufen - <code>POST /api/mcp/calcom/availability</code> - Verf\u00fcgbarkeit pr\u00fcfen - <code>GET /api/mcp/calcom/bookings?company_id=XXX</code> - Buchungen abrufen - <code>GET /api/mcp/calcom/assignments/{companyId}</code> - Event Type Zuordnungen - <code>POST /api/mcp/calcom/sync</code> - Event Types synchronisieren - <code>GET /api/mcp/calcom/test/{companyId}</code> - Verbindung testen</p> <p>Beispiel-Anfragen an Claude: - \"Synchronisiere die Event Types f\u00fcr Firma XYZ\" - \"Zeige mir die verf\u00fcgbaren Termine f\u00fcr morgen\" - \"Welche Mitarbeiter sind welchen Event Types zugeordnet?\"</p>"},{"location":"MCP_INTEGRATION_GUIDE/#3-retellai-mcp-server","title":"3. Retell.ai MCP Server","text":"<p>Integration mit Retell.ai f\u00fcr Telefon-AI Management.</p> <p>Endpoints: - <code>GET /api/mcp/retell/agent/{companyId}</code> - Agent-Informationen - <code>GET /api/mcp/retell/agents/{companyId}</code> - Alle Agents auflisten - <code>GET /api/mcp/retell/call-stats?company_id=XXX</code> - Anrufstatistiken - <code>GET /api/mcp/retell/recent-calls?company_id=XXX</code> - Letzte Anrufe - <code>GET /api/mcp/retell/call/{callId}</code> - Anrufdetails - <code>POST /api/mcp/retell/search-calls</code> - Anrufe suchen - <code>GET /api/mcp/retell/phone-numbers/{companyId}</code> - Telefonnummern - <code>GET /api/mcp/retell/test/{companyId}</code> - Verbindung testen</p> <p>Beispiel-Anfragen an Claude: - \"Wie viele Anrufe hatten wir heute?\" - \"Zeige mir Details zum letzten Anruf\" - \"Welche Telefonnummern sind konfiguriert?\"</p>"},{"location":"MCP_INTEGRATION_GUIDE/#4-sentry-mcp-server-bereits-implementiert","title":"4. Sentry MCP Server (bereits implementiert)","text":"<p>Error-Tracking und Performance-Monitoring.</p> <p>Endpoints: - <code>GET /api/mcp/sentry/issues</code> - Aktuelle Fehler - <code>GET /api/mcp/sentry/issues/{issueId}</code> - Fehlerdetails - <code>POST /api/mcp/sentry/issues/search</code> - Fehler suchen - <code>GET /api/mcp/sentry/performance</code> - Performance-Daten</p>"},{"location":"MCP_INTEGRATION_GUIDE/#authentifizierung","title":"Authentifizierung","text":"<p>Alle MCP Endpoints sind durch Sanctum Authentication gesch\u00fctzt. Sie ben\u00f6tigen ein g\u00fcltiges API Token.</p>"},{"location":"MCP_INTEGRATION_GUIDE/#nutzung-mit-claude","title":"Nutzung mit Claude","text":""},{"location":"MCP_INTEGRATION_GUIDE/#in-claude-desktop","title":"In Claude Desktop","text":"<ol> <li>\u00d6ffnen Sie Claude Desktop</li> <li>Navigieren Sie zu den MCP Server Einstellungen</li> <li>F\u00fcgen Sie die AskProAI MCP Server URL hinzu: <code>https://api.askproai.de/api/mcp</code></li> <li>Konfigurieren Sie Ihr API Token</li> </ol>"},{"location":"MCP_INTEGRATION_GUIDE/#beispiel-konversationen","title":"Beispiel-Konversationen","text":"<p>Fehleranalyse: <pre><code>Claude: \"Was sind die h\u00e4ufigsten Fehler beim Booking Flow?\"\n\u2192 MCP nutzt Database + Sentry Server f\u00fcr Analyse\n</code></pre></p> <p>Status-Check: <pre><code>Claude: \"Wie ist der aktuelle System-Status?\"\n\u2192 MCP pr\u00fcft Cal.com + Retell.ai Verbindungen\n</code></pre></p> <p>Debugging: <pre><code>Claude: \"Warum ist der Termin f\u00fcr Kunde Schmidt fehlgeschlagen?\"\n\u2192 MCP durchsucht Calls, Appointments und Error Logs\n</code></pre></p>"},{"location":"MCP_INTEGRATION_GUIDE/#sicherheit","title":"Sicherheit","text":""},{"location":"MCP_INTEGRATION_GUIDE/#read-only-zugriff","title":"Read-Only Zugriff","text":"<ul> <li>Database MCP erlaubt nur SELECT Queries</li> <li>Keine Daten\u00e4nderungen m\u00f6glich</li> <li>Sensitive Spalten (Passw\u00f6rter etc.) werden gefiltert</li> </ul>"},{"location":"MCP_INTEGRATION_GUIDE/#tenant-isolation","title":"Tenant Isolation","text":"<ul> <li>Alle Abfragen beachten die Multi-Tenancy</li> <li>Company ID muss bei relevanten Anfragen angegeben werden</li> </ul>"},{"location":"MCP_INTEGRATION_GUIDE/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>API Endpoints haben Rate Limits</li> <li>Cache wird f\u00fcr h\u00e4ufige Anfragen genutzt</li> </ul>"},{"location":"MCP_INTEGRATION_GUIDE/#erweiterte-nutzung","title":"Erweiterte Nutzung","text":""},{"location":"MCP_INTEGRATION_GUIDE/#custom-queries","title":"Custom Queries","text":"<p>Sie k\u00f6nnen eigene SQL-Abfragen ausf\u00fchren: <pre><code>POST /api/mcp/database/query\n{\n    \"sql\": \"SELECT COUNT(*) as total FROM appointments WHERE status = ?\",\n    \"bindings\": [\"completed\"]\n}\n</code></pre></p>"},{"location":"MCP_INTEGRATION_GUIDE/#cache-management","title":"Cache Management","text":"<p>Cache f\u00fcr jeden Service kann geleert werden: <pre><code>POST /api/mcp/{service}/cache/clear\n</code></pre> Verf\u00fcgbare Services: database, calcom, retell, sentry</p>"},{"location":"MCP_INTEGRATION_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"MCP_INTEGRATION_GUIDE/#company-not-found","title":"\"Company not found\"","text":"<ul> <li>Stellen Sie sicher, dass die company_id korrekt ist</li> <li>Pr\u00fcfen Sie, ob der API Key Zugriff auf diese Company hat</li> </ul>"},{"location":"MCP_INTEGRATION_GUIDE/#only-select-queries-are-allowed","title":"\"Only SELECT queries are allowed\"","text":"<ul> <li>Database MCP erlaubt nur lesende Zugriffe</li> <li>F\u00fcr \u00c4nderungen nutzen Sie die regul\u00e4re API</li> </ul>"},{"location":"MCP_INTEGRATION_GUIDE/#calcom-not-configured","title":"\"Cal.com not configured\"","text":"<ul> <li>Pr\u00fcfen Sie, ob die Company einen Cal.com API Key hat</li> <li>Testen Sie die Verbindung mit <code>/api/mcp/calcom/test/{companyId}</code></li> </ul>"},{"location":"MCP_INTEGRATION_GUIDE/#best-practices","title":"Best Practices","text":"<ol> <li>Nutzen Sie spezifische Fragen: \"Zeige Fehler der letzten 24 Stunden\" statt \"Zeige alle Fehler\"</li> <li>Kombinieren Sie MCP Server: Nutzen Sie Database + Sentry f\u00fcr vollst\u00e4ndige Fehleranalyse</li> <li>Cache beachten: Daten werden 5 Minuten gecacht - bei Bedarf Cache leeren</li> <li>Company Context: Geben Sie immer die company_id an f\u00fcr mandanten-spezifische Daten</li> </ol>"},{"location":"MCP_INTEGRATION_GUIDE/#zukunftige-erweiterungen","title":"Zuk\u00fcnftige Erweiterungen","text":"<ul> <li>Redis MCP: Cache und Queue Monitoring</li> <li>Horizon MCP: Queue Job Details</li> <li>Stripe MCP: Billing und Payment Informationen</li> <li>Custom Business Logic MCP: Spezifische Gesch\u00e4ftslogik-Operationen</li> </ul>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/","title":"MCP (Model Context Protocol) Setup Guide f\u00fcr AskProAI","text":""},{"location":"MCP_SETUP_COMPLETE_GUIDE/#vollstandige-einrichtungsanleitung","title":"\ud83d\ude80 Vollst\u00e4ndige Einrichtungsanleitung","text":""},{"location":"MCP_SETUP_COMPLETE_GUIDE/#1-voraussetzungen","title":"1. Voraussetzungen \u2705","text":"<ul> <li>PHP 8.3 installiert</li> <li>Laravel Loop installiert</li> <li>Custom MCP Server implementiert</li> </ul>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#2-api-token-fur-mcp-erstellen","title":"2. API Token f\u00fcr MCP erstellen","text":"<p>Erstellen Sie ein API Token f\u00fcr die MCP-Authentifizierung:</p> <pre><code>php artisan tinker\n</code></pre> <p>In Tinker: <pre><code>$user = User::where('email', 'admin@askproai.de')-&gt;first();\n$token = $user-&gt;createToken('mcp-access', ['*'])-&gt;plainTextToken;\necho \"Ihr MCP Token: \" . $token;\n</code></pre></p>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#3-claude-code-konfigurieren","title":"3. Claude Code konfigurieren","text":""},{"location":"MCP_SETUP_COMPLETE_GUIDE/#option-a-laravel-loop-empfohlen","title":"Option A: Laravel Loop (Empfohlen)","text":"<pre><code>claude mcp add laravel-loop-mcp php /var/www/api-gateway/artisan loop:mcp:start\n</code></pre>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#option-b-http-mcp-server","title":"Option B: HTTP MCP Server","text":"<p>F\u00fcgen Sie in Claude Code hinzu: <pre><code>{\n  \"mcpServers\": {\n    \"askproai\": {\n      \"url\": \"https://api.askproai.de/api/mcp\",\n      \"headers\": {\n        \"Authorization\": \"Bearer YOUR_MCP_TOKEN\",\n        \"Accept\": \"application/json\"\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#4-verfugbare-mcp-funktionen","title":"4. Verf\u00fcgbare MCP Funktionen","text":""},{"location":"MCP_SETUP_COMPLETE_GUIDE/#database-mcp","title":"Database MCP","text":"<ul> <li>Schema abrufen: <code>GET /api/mcp/database/schema</code></li> <li>Query ausf\u00fchren: <code>POST /api/mcp/database/query</code></li> <li>Suchen: <code>POST /api/mcp/database/search</code></li> <li>Fehlerhafte Termine: <code>GET /api/mcp/database/failed-appointments</code></li> <li>Anrufstatistiken: <code>GET /api/mcp/database/call-stats</code></li> </ul>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#calcom-mcp","title":"Cal.com MCP","text":"<ul> <li>Event Types: <code>GET /api/mcp/calcom/event-types?company_id=XXX</code></li> <li>Verf\u00fcgbarkeit: <code>POST /api/mcp/calcom/availability</code></li> <li>Buchungen: <code>GET /api/mcp/calcom/bookings?company_id=XXX</code></li> <li>Synchronisieren: <code>POST /api/mcp/calcom/sync</code></li> </ul>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#retellai-mcp","title":"Retell.ai MCP","text":"<ul> <li>Agent Info: <code>GET /api/mcp/retell/agent/{companyId}</code></li> <li>Anrufstatistiken: <code>GET /api/mcp/retell/call-stats</code></li> <li>Letzte Anrufe: <code>GET /api/mcp/retell/recent-calls</code></li> <li>Telefonnummern: <code>GET /api/mcp/retell/phone-numbers/{companyId}</code></li> </ul>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#sentry-mcp","title":"Sentry MCP","text":"<ul> <li>Fehler anzeigen: <code>GET /api/mcp/sentry/issues</code></li> <li>Fehlerdetails: <code>GET /api/mcp/sentry/issues/{issueId}</code></li> <li>Performance: <code>GET /api/mcp/sentry/performance</code></li> </ul>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#5-beispiel-anfragen-an-claude","title":"5. Beispiel-Anfragen an Claude","text":"<p>Mit den MCP Servern k\u00f6nnen Sie Claude fragen:</p> <p>System-Status: <pre><code>\"Claude, wie ist der aktuelle System-Status?\"\n\"Zeige mir alle fehlgeschlagenen Termine der letzten 24 Stunden\"\n\"Wie viele Anrufe hatten wir heute?\"\n</code></pre></p> <p>Debugging: <pre><code>\"Warum ist die Buchung f\u00fcr Kunde Schmidt fehlgeschlagen?\"\n\"Analysiere die Performance der letzten Woche\"\n\"Zeige mir alle Fehler im Booking Flow\"\n</code></pre></p> <p>Management: <pre><code>\"Synchronisiere die Cal.com Event Types\"\n\"\u00dcberpr\u00fcfe die Retell.ai Verbindung\"\n\"Liste alle konfigurierten Telefonnummern\"\n</code></pre></p>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#6-laravel-loop-befehle","title":"6. Laravel Loop Befehle","text":"<p>Mit Laravel Loop k\u00f6nnen Sie direkt Artisan Commands ausf\u00fchren:</p> <pre><code>\"Claude, f\u00fchre php artisan queue:monitor aus\"\n\"Zeige mir alle Routes mit php artisan route:list\"\n\"L\u00f6sche den Cache\"\n\"F\u00fchre die Migrations aus\"\n</code></pre>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#7-sicherheit","title":"7. Sicherheit","text":""},{"location":"MCP_SETUP_COMPLETE_GUIDE/#api-token-management","title":"API Token Management","text":"<ul> <li>Tokens regelm\u00e4\u00dfig rotieren</li> <li>Nur notwendige Permissions vergeben</li> <li>Tokens niemals im Code committen</li> </ul>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>API hat automatisches Rate Limiting</li> <li>Cache wird f\u00fcr h\u00e4ufige Anfragen genutzt</li> </ul>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#logging","title":"Logging","text":"<ul> <li>Alle MCP Anfragen werden geloggt</li> <li>Monitoring \u00fcber Sentry verf\u00fcgbar</li> </ul>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#8-troubleshooting","title":"8. Troubleshooting","text":"<p>\"Unauthorized\" Fehler: - Pr\u00fcfen Sie das API Token - Stellen Sie sicher, dass der User die richtigen Permissions hat</p> <p>\"Company not found\": - \u00dcberpr\u00fcfen Sie die company_id - Stellen Sie sicher, dass der User Zugriff auf die Company hat</p> <p>Keine Daten: - Cache leeren: <code>POST /api/mcp/{service}/cache/clear</code> - Logs pr\u00fcfen: <code>storage/logs/laravel.log</code></p>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#9-best-practices","title":"9. Best Practices","text":"<ol> <li>Spezifische Fragen stellen</li> <li>\u2705 \"Fehler der letzten 24 Stunden\"</li> <li> <p>\u274c \"Alle Fehler\"</p> </li> <li> <p>Company Context angeben</p> </li> <li> <p>Immer company_id f\u00fcr mandanten-spezifische Daten</p> </li> <li> <p>Services kombinieren</p> </li> <li>Database + Sentry f\u00fcr vollst\u00e4ndige Fehleranalyse</li> <li> <p>Cal.com + Retell f\u00fcr Booking-Debugging</p> </li> <li> <p>Cache beachten</p> </li> <li>Daten werden 5 Minuten gecacht</li> <li>Bei Bedarf Cache explizit leeren</li> </ol>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#10-monitoring-logs","title":"10. Monitoring &amp; Logs","text":"<p>\u00dcberwachen Sie die MCP-Nutzung: <pre><code>-- MCP Anfragen der letzten 24 Stunden\nSELECT endpoint, COUNT(*) as requests, AVG(response_time_ms) as avg_ms\nFROM api_call_logs \nWHERE endpoint LIKE '/api/mcp/%'\nAND created_at &gt; NOW() - INTERVAL 24 HOUR\nGROUP BY endpoint\nORDER BY requests DESC;\n</code></pre></p>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#11-erweiterte-nutzung","title":"11. Erweiterte Nutzung","text":"<p>Custom Queries: <pre><code>POST /api/mcp/database/query\n{\n  \"sql\": \"SELECT * FROM appointments WHERE status = ? AND created_at &gt; ?\",\n  \"bindings\": [\"failed\", \"2024-01-01\"]\n}\n</code></pre></p> <p>Batch-Operationen: Kombinieren Sie mehrere MCP-Calls f\u00fcr komplexe Analysen.</p>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#12-nachste-schritte","title":"12. N\u00e4chste Schritte","text":"<ol> <li>\u2705 API Token erstellen</li> <li>\u2705 Claude Code konfigurieren</li> <li>\u2705 Erste Test-Anfragen durchf\u00fchren</li> <li>\u2705 Team schulen</li> <li>\u2705 Monitoring einrichten</li> </ol>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#quick-start-commands","title":"Quick Start Commands","text":"<pre><code># Laravel Loop starten\nphp artisan loop:mcp:start\n\n# Test MCP Endpoint\ncurl -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  https://api.askproai.de/api/mcp/info\n\n# Cache leeren\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  https://api.askproai.de/api/mcp/database/cache/clear\n</code></pre>"},{"location":"MCP_SETUP_COMPLETE_GUIDE/#support","title":"Support","text":"<p>Bei Fragen oder Problemen: - Logs pr\u00fcfen: <code>tail -f storage/logs/laravel.log</code> - Sentry Dashboard checken - Laravel Loop Docs: https://github.com/kirschbaum-development/laravel-loop</p>"},{"location":"MONITORING_AND_ALERTING_GUIDE/","title":"Production Monitoring and Alerting Guide","text":"<p>This guide documents the comprehensive monitoring and alerting system implemented for the AskProAI platform, with a focus on the Stripe integration and customer portal.</p>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#overview","title":"Overview","text":"<p>The monitoring system provides: - Real-time health checks - Performance monitoring - Security tracking - Business metrics - Automated alerting - Prometheus/Grafana integration</p>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#architecture","title":"Architecture","text":""},{"location":"MONITORING_AND_ALERTING_GUIDE/#core-components","title":"Core Components","text":"<ol> <li>Health Check Service (<code>HealthCheckService</code>)</li> <li>Database connectivity</li> <li>Redis availability</li> <li>Stripe API status</li> <li>Queue sizes</li> <li>Disk space</li> <li> <p>Memory usage</p> </li> <li> <p>Performance Monitor (<code>PerformanceMonitor</code>)</p> </li> <li>Transaction tracking</li> <li>API call monitoring</li> <li>Query performance</li> <li> <p>Slow transaction detection</p> </li> <li> <p>Security Monitor (<code>SecurityMonitor</code>)</p> </li> <li>Failed login tracking</li> <li>Suspicious activity detection</li> <li>API key usage monitoring</li> <li>Rate limit violations</li> <li> <p>IP blocking</p> </li> <li> <p>Alerting Service (<code>AlertingService</code>)</p> </li> <li>Multi-channel alerts (Email, Slack, SMS)</li> <li>Threshold-based triggering</li> <li>Alert throttling</li> <li>Active alert management</li> </ol>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#configuration","title":"Configuration","text":""},{"location":"MONITORING_AND_ALERTING_GUIDE/#environment-variables","title":"Environment Variables","text":"<pre><code># Monitoring\nMONITORING_ENABLED=true\n\n# Sentry Error Tracking\nSENTRY_LARAVEL_DSN=your-sentry-dsn\nSENTRY_ENVIRONMENT=production\nSENTRY_TRACES_SAMPLE_RATE=0.1\nSENTRY_PROFILES_SAMPLE_RATE=0.1\n\n# Alert Recipients\nALERT_EMAIL_RECIPIENTS=admin@example.com,ops@example.com\nALERT_SLACK_WEBHOOK=https://hooks.slack.com/services/xxx\nALERT_SMS_RECIPIENTS=+1234567890\n\n# Health Check Secret\nHEALTH_CHECK_SECRET=your-secret-key\nMETRICS_SECRET=your-metrics-secret\n\n# Log Levels\nLOG_LEVEL_MONITORING=debug\nLOG_LEVEL_SECURITY=warning\nLOG_LEVEL_PERFORMANCE=info\nLOG_LEVEL_STRIPE=info\nLOG_LEVEL_PORTAL=info\n</code></pre>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#configuration-file","title":"Configuration File","text":"<p>The main configuration is in <code>config/monitoring.php</code>:</p> <pre><code>return [\n    'enabled' =&gt; true,\n    'sentry' =&gt; [...],\n    'apm' =&gt; [...],\n    'health_checks' =&gt; [...],\n    'alerts' =&gt; [...],\n    'logging' =&gt; [...],\n    'metrics' =&gt; [...],\n    'security' =&gt; [...],\n];\n</code></pre>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#health-checks","title":"Health Checks","text":""},{"location":"MONITORING_AND_ALERTING_GUIDE/#endpoint","title":"Endpoint","text":"<pre><code>GET /api/health\nX-Health-Check-Secret: your-secret-key\n</code></pre>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#response-example","title":"Response Example","text":"<pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2025-06-19T10:00:00Z\",\n  \"checks\": [\n    {\n      \"name\": \"database\",\n      \"critical\": true,\n      \"status\": \"ok\",\n      \"message\": \"Database connection is healthy\",\n      \"duration\": 5.23\n    },\n    {\n      \"name\": \"stripe_api\",\n      \"critical\": true,\n      \"status\": \"ok\",\n      \"message\": \"Stripe API connection is healthy\",\n      \"meta\": {\n        \"mode\": \"test\"\n      },\n      \"duration\": 145.67\n    }\n  ]\n}\n</code></pre>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#critical-vs-warning-checks","title":"Critical vs Warning Checks","text":"<ul> <li>Critical: System marked as unhealthy if these fail</li> <li>Database</li> <li>Redis</li> <li> <p>Stripe API</p> </li> <li> <p>Warning: System operational but degraded</p> </li> <li>Queue size &gt; 1000</li> <li>Disk usage &gt; 90%</li> <li>Memory usage &gt; 85%</li> </ul>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"MONITORING_AND_ALERTING_GUIDE/#transaction-monitoring","title":"Transaction Monitoring","text":"<pre><code>// In your controller or service\n$monitor = app(PerformanceMonitor::class);\n$monitor-&gt;startTransaction('stripe_webhook');\n\n// Your code here...\n\n$monitor-&gt;endTransaction('stripe_webhook', [\n    'status_code' =&gt; 200,\n    'webhook_type' =&gt; 'payment_intent.succeeded'\n]);\n</code></pre>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#api-call-monitoring","title":"API Call Monitoring","text":"<pre><code>$result = $monitor-&gt;monitorApiCall('stripe', function () {\n    return \\Stripe\\PaymentIntent::create([...]);\n});\n</code></pre>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#slow-query-detection","title":"Slow Query Detection","text":"<p>Queries slower than 100ms are automatically logged to <code>storage/logs/performance.log</code>.</p>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#security-monitoring","title":"Security Monitoring","text":""},{"location":"MONITORING_AND_ALERTING_GUIDE/#events-tracked","title":"Events Tracked","text":"<ul> <li>Failed login attempts</li> <li>Suspicious activity</li> <li>API key usage patterns</li> <li>Privilege escalation attempts</li> <li>Large data exports</li> <li>Rate limit violations</li> </ul>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#automatic-ip-blocking","title":"Automatic IP Blocking","text":"<p>IPs are automatically blocked for 24 hours after: - 5 failed login attempts in 15 minutes - 20 security events in 1 hour - Excessive rate limit violations</p>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#security-logs","title":"Security Logs","text":"<p>All security events are logged to: - Database: <code>security_logs</code> table - File: <code>storage/logs/security.log</code></p>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#alerting-rules","title":"Alerting Rules","text":""},{"location":"MONITORING_AND_ALERTING_GUIDE/#payment-failures","title":"Payment Failures","text":"<ul> <li>Trigger: 3 failures in 5 minutes</li> <li>Severity: Critical</li> <li>Channels: Email, Slack, SMS</li> </ul>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#security-breach-attempts","title":"Security Breach Attempts","text":"<ul> <li>Trigger: 5 attempts in 1 minute</li> <li>Severity: Critical</li> <li>Channels: Email, Slack, SMS</li> </ul>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#stripe-webhook-failures","title":"Stripe Webhook Failures","text":"<ul> <li>Trigger: 5 failures in 5 minutes</li> <li>Severity: High</li> <li>Channels: Email, Slack</li> </ul>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#high-error-rate","title":"High Error Rate","text":"<ul> <li>Trigger: &gt; 5% error rate</li> <li>Severity: High</li> <li>Channels: Email, Slack</li> </ul>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#database-connection-failures","title":"Database Connection Failures","text":"<ul> <li>Trigger: 3 failures in 1 minute</li> <li>Severity: Critical</li> <li>Channels: Email, Slack, SMS</li> </ul>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#metrics-collection","title":"Metrics Collection","text":""},{"location":"MONITORING_AND_ALERTING_GUIDE/#prometheus-endpoint","title":"Prometheus Endpoint","text":"<pre><code>GET /api/metrics\nX-Metrics-Secret: your-metrics-secret\n</code></pre>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#available-metrics","title":"Available Metrics","text":"<pre><code># System\naskproai_up\naskproai_php_memory_usage_bytes\naskproai_php_memory_peak_bytes\n\n# HTTP\naskproai_http_requests_total\naskproai_http_request_duration_ms\naskproai_http_requests_errors_total\n\n# Queue\naskproai_queue_size{queue=\"default\"}\naskproai_queue_size{queue=\"webhooks\"}\naskproai_queue_size{queue=\"stripe\"}\n\n# Business\naskproai_subscriptions_created_total\naskproai_revenue_processed_cents\naskproai_portal_registrations_total\naskproai_portal_logins_total\n\n# Security\naskproai_failed_logins_total\naskproai_blocked_ips_total\naskproai_rate_limit_violations_total\n\n# External APIs\naskproai_external_api_calls_total{service=\"stripe\"}\naskproai_external_api_errors_total{service=\"stripe\"}\naskproai_external_api_duration_ms{service=\"stripe\"}\n</code></pre>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#logging-strategy","title":"Logging Strategy","text":""},{"location":"MONITORING_AND_ALERTING_GUIDE/#log-channels","title":"Log Channels","text":"<ol> <li>monitoring - General monitoring events</li> <li>security - Security-related events</li> <li>performance - Performance issues</li> <li>stripe - Stripe-specific logs</li> <li>portal - Customer portal logs</li> <li>webhooks - Webhook processing logs</li> </ol>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#structured-logging","title":"Structured Logging","text":"<p>All logs include: - Correlation ID - User/Company context - Request metadata - Timestamp</p>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#sensitive-data-masking","title":"Sensitive Data Masking","text":"<p>The following fields are automatically masked: - password - stripe_secret - api_key - token - card_number - cvv - ssn - tax_id</p>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#grafana-dashboards","title":"Grafana Dashboards","text":""},{"location":"MONITORING_AND_ALERTING_GUIDE/#system-overview","title":"System Overview","text":"<ul> <li>Request rate</li> <li>Error rate</li> <li>Response times</li> <li>Queue sizes</li> <li>Active users</li> </ul>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#stripe-integration","title":"Stripe Integration","text":"<ul> <li>Payment success rate</li> <li>Webhook processing time</li> <li>Failed payments</li> <li>Dispute rate</li> <li>Revenue metrics</li> </ul>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#customer-portal","title":"Customer Portal","text":"<ul> <li>Registration rate</li> <li>Login frequency</li> <li>Page load times</li> <li>User actions</li> <li>Error tracking</li> </ul>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#security-dashboard","title":"Security Dashboard","text":"<ul> <li>Failed login attempts</li> <li>Blocked IPs</li> <li>Rate limit violations</li> <li>Suspicious activities</li> <li>Security trends</li> </ul>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#testing-monitoring","title":"Testing Monitoring","text":""},{"location":"MONITORING_AND_ALERTING_GUIDE/#command-line-test","title":"Command Line Test","text":"<pre><code>php artisan monitoring:test --all\n</code></pre> <p>Options: - <code>--health</code> - Test health checks - <code>--alert</code> - Test alerting - <code>--performance</code> - Test performance monitoring - <code>--security</code> - Test security monitoring - <code>--all</code> - Test all components</p>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#manual-alert-test","title":"Manual Alert Test","text":"<pre><code>app(AlertingService::class)-&gt;alert('payment_failure', [\n    'count' =&gt; 5,\n    'window' =&gt; 5,\n]);\n</code></pre>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#production-deployment-checklist","title":"Production Deployment Checklist","text":"<ol> <li>Environment Configuration</li> <li> Set all monitoring environment variables</li> <li> Configure Sentry DSN</li> <li> Set up alert recipients</li> <li> <p> Configure health check secret</p> </li> <li> <p>External Services</p> </li> <li> Verify Sentry project exists</li> <li> Test Slack webhook</li> <li> Configure SMS provider (if using)</li> <li> <p> Set up Prometheus/Grafana</p> </li> <li> <p>Database</p> </li> <li> Run migration for security_logs table</li> <li> <p> Verify indexes are created</p> </li> <li> <p>Testing</p> </li> <li> Run <code>php artisan monitoring:test --all</code></li> <li> Verify health endpoint responds</li> <li> Test alert delivery</li> <li> <p> Check metrics endpoint</p> </li> <li> <p>Monitoring</p> </li> <li> Import Grafana dashboards</li> <li> Set up Prometheus scraping</li> <li> Configure alert rules in Grafana</li> <li> Test end-to-end monitoring flow</li> </ol>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"MONITORING_AND_ALERTING_GUIDE/#health-check-failing","title":"Health Check Failing","text":"<ol> <li>Check logs: <code>tail -f storage/logs/monitoring.log</code></li> <li>Verify services: <code>php artisan monitoring:test --health</code></li> <li>Check connectivity to external services</li> </ol>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#alerts-not-sending","title":"Alerts Not Sending","text":"<ol> <li>Verify configuration: <code>php artisan config:cache</code></li> <li>Check alert channels are configured</li> <li>Test manually: <code>php artisan monitoring:test --alert</code></li> <li>Check logs: <code>tail -f storage/logs/laravel.log</code></li> </ol>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#performance-issues","title":"Performance Issues","text":"<ol> <li>Check slow query log: <code>tail -f storage/logs/performance.log</code></li> <li>Review metrics: <code>/api/metrics</code></li> <li>Check APM data in monitoring dashboard</li> <li>Enable query explain: <code>EXPLAIN_QUERIES=true</code></li> </ol>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#security-events","title":"Security Events","text":"<ol> <li>Review security log: <code>tail -f storage/logs/security.log</code></li> <li>Check blocked IPs: Query <code>security_logs</code> table</li> <li>Review rate limiting configuration</li> <li>Check for patterns in failed attempts</li> </ol>"},{"location":"MONITORING_AND_ALERTING_GUIDE/#best-practices","title":"Best Practices","text":"<ol> <li>Regular Reviews</li> <li>Weekly review of security logs</li> <li>Daily check of critical alerts</li> <li> <p>Monthly performance analysis</p> </li> <li> <p>Alert Fatigue Prevention</p> </li> <li>Tune thresholds based on actual data</li> <li>Use appropriate severity levels</li> <li> <p>Implement smart throttling</p> </li> <li> <p>Documentation</p> </li> <li>Document all custom alerts</li> <li>Keep runbooks updated</li> <li> <p>Train team on monitoring tools</p> </li> <li> <p>Continuous Improvement</p> </li> <li>Monitor false positive rate</li> <li>Adjust thresholds quarterly</li> <li>Add new metrics as needed</li> <li>Regular disaster recovery drills</li> </ol>"},{"location":"PERFORMANCE_INDEXES_MIGRATION/","title":"Performance Critical Indexes Migration","text":""},{"location":"PERFORMANCE_INDEXES_MIGRATION/#overview","title":"Overview","text":"<p>Diese Migration f\u00fcgt alle fehlenden Performance-kritischen Indizes zur Datenbank hinzu. Die Indizes wurden basierend auf einer Analyse der h\u00e4ufigsten Query-Patterns in der Anwendung identifiziert.</p>"},{"location":"PERFORMANCE_INDEXES_MIGRATION/#warum-diese-indizes-wichtig-sind","title":"Warum diese Indizes wichtig sind","text":""},{"location":"PERFORMANCE_INDEXES_MIGRATION/#1-tenant-isolation-company_id","title":"1. Tenant Isolation (company_id)","text":"<ul> <li>Grund: Fast jede Query verwendet <code>company_id</code> aufgrund des TenantScope</li> <li>Auswirkung: Ohne Index w\u00fcrde jede Query einen Full Table Scan durchf\u00fchren</li> <li>Betroffene Tabellen: Alle tenant-spezifischen Tabellen</li> </ul>"},{"location":"PERFORMANCE_INDEXES_MIGRATION/#2-zeitbasierte-queries","title":"2. Zeitbasierte Queries","text":"<ul> <li>Grund: Viele Features filtern nach Datum/Zeit (heute, kommende Termine, etc.)</li> <li>Auswirkung: Sortierung und Filterung nach Zeit ist extrem h\u00e4ufig</li> <li>Wichtige Felder: <code>starts_at</code>, <code>ends_at</code>, <code>created_at</code></li> </ul>"},{"location":"PERFORMANCE_INDEXES_MIGRATION/#3-phone-number-lookups","title":"3. Phone Number Lookups","text":"<ul> <li>Grund: Kundenidentifikation bei eingehenden Anrufen</li> <li>Auswirkung: Ohne Index m\u00fcsste bei jedem Anruf die gesamte customers Tabelle durchsucht werden</li> <li>Felder: <code>phone</code> in customers, <code>from_number</code>/<code>to_number</code> in calls</li> </ul>"},{"location":"PERFORMANCE_INDEXES_MIGRATION/#4-status-filtering","title":"4. Status Filtering","text":"<ul> <li>Grund: Viele Views filtern nach Status (best\u00e4tigt, abgesagt, etc.)</li> <li>Auswirkung: H\u00e4ufig in Kombination mit anderen Filtern verwendet</li> <li>Felder: <code>status</code> in appointments und calls</li> </ul>"},{"location":"PERFORMANCE_INDEXES_MIGRATION/#5-composite-indexes","title":"5. Composite Indexes","text":"<ul> <li>Grund: Optimierung f\u00fcr h\u00e4ufige Query-Kombinationen</li> <li>Beispiele:</li> <li><code>(company_id, starts_at)</code> - Termine eines Unternehmens nach Zeit</li> <li><code>(status, starts_at)</code> - Best\u00e4tigte zuk\u00fcnftige Termine</li> <li><code>(company_id, phone)</code> - Duplicate Detection</li> </ul>"},{"location":"PERFORMANCE_INDEXES_MIGRATION/#migration-ausfuhren","title":"Migration ausf\u00fchren","text":"<pre><code># Migration ausf\u00fchren\nphp artisan migrate\n\n# Bei gro\u00dfen Datenbanken mit --force\nphp artisan migrate --force\n\n# Performance vorher/nachher analysieren\nphp artisan askproai:analyze-performance\n</code></pre>"},{"location":"PERFORMANCE_INDEXES_MIGRATION/#performance-verbesserungen","title":"Performance-Verbesserungen","text":""},{"location":"PERFORMANCE_INDEXES_MIGRATION/#erwartete-verbesserungen","title":"Erwartete Verbesserungen:","text":"<ul> <li>Appointment Listings: 50-90% schneller</li> <li>Customer Phone Lookup: 80-95% schneller</li> <li>Dashboard Statistics: 60-80% schneller</li> <li>Call History: 70-85% schneller</li> </ul>"},{"location":"PERFORMANCE_INDEXES_MIGRATION/#speicherplatz","title":"Speicherplatz:","text":"<ul> <li>Die Indizes ben\u00f6tigen zus\u00e4tzlichen Speicherplatz (ca. 20-30% der Tabellengr\u00f6\u00dfe)</li> <li>Bei 100k Appointments: ~10-15 MB zus\u00e4tzlich</li> <li>Bei 1M Calls: ~100-150 MB zus\u00e4tzlich</li> </ul>"},{"location":"PERFORMANCE_INDEXES_MIGRATION/#monitoring","title":"Monitoring","text":"<p>Nach der Migration sollten Sie folgende Metriken \u00fcberwachen:</p> <ol> <li> <p>Query Performance:    <pre><code>-- Slow Queries \u00fcberwachen\nSHOW VARIABLES LIKE 'slow_query_log';\nSET GLOBAL slow_query_log = 'ON';\nSET GLOBAL long_query_time = 1;\n</code></pre></p> </li> <li> <p>Index Usage:    <pre><code>-- Pr\u00fcfen ob Indizes verwendet werden\nEXPLAIN SELECT * FROM appointments \nWHERE company_id = 1 \nAND starts_at &gt; NOW() \nAND status = 'confirmed';\n</code></pre></p> </li> <li> <p>Table Statistics:    <pre><code># Mit dem Analyze Command\nphp artisan askproai:analyze-performance --show-queries\n</code></pre></p> </li> </ol>"},{"location":"PERFORMANCE_INDEXES_MIGRATION/#rollback","title":"Rollback","text":"<p>Falls Probleme auftreten:</p> <pre><code># Migration r\u00fcckg\u00e4ngig machen\nphp artisan migrate:rollback\n\n# Nur diese spezifische Migration\nphp artisan migrate:rollback --step=1\n</code></pre>"},{"location":"PERFORMANCE_INDEXES_MIGRATION/#best-practices","title":"Best Practices","text":"<ol> <li>F\u00fchren Sie die Migration au\u00dferhalb der Hauptgesch\u00e4ftszeiten aus</li> <li> <p>Index-Erstellung kann bei gro\u00dfen Tabellen Zeit in Anspruch nehmen</p> </li> <li> <p>Backup vor der Migration <pre><code>php artisan askproai:backup --type=full\n</code></pre></p> </li> <li> <p>\u00dcberwachen Sie die Performance nach der Migration</p> </li> <li> <p>Stellen Sie sicher, dass die Indizes wie erwartet funktionieren</p> </li> <li> <p>Regelm\u00e4\u00dfige Wartung <pre><code>-- Statistiken aktualisieren\nANALYZE TABLE appointments;\nANALYZE TABLE calls;\nANALYZE TABLE customers;\n</code></pre></p> </li> </ol>"},{"location":"PERFORMANCE_INDEXES_MIGRATION/#troubleshooting","title":"Troubleshooting","text":""},{"location":"PERFORMANCE_INDEXES_MIGRATION/#migration-dauert-zu-lange","title":"Migration dauert zu lange","text":"<ul> <li>Bei sehr gro\u00dfen Tabellen kann die Index-Erstellung Zeit ben\u00f6tigen</li> <li>Verwenden Sie <code>pt-online-schema-change</code> f\u00fcr Zero-Downtime-Migrationen</li> </ul>"},{"location":"PERFORMANCE_INDEXES_MIGRATION/#duplicate-key-errors","title":"Duplicate Key Errors","text":"<ul> <li>Die Migration pr\u00fcft bereits existierende Indizes</li> <li>Falls dennoch Fehler auftreten, pr\u00fcfen Sie manuell mit <code>SHOW INDEX FROM table_name</code></li> </ul>"},{"location":"PERFORMANCE_INDEXES_MIGRATION/#performance-verschlechtert-sich","title":"Performance verschlechtert sich","text":"<ul> <li>Pr\u00fcfen Sie mit EXPLAIN ob die richtigen Indizes verwendet werden</li> <li>M\u00f6glicherweise m\u00fcssen Query Hints angepasst werden</li> </ul>"},{"location":"PERFORMANCE_INDEXES_MIGRATION/#weitere-optimierungen","title":"Weitere Optimierungen","text":"<p>Nach dieser Migration k\u00f6nnen Sie weitere Optimierungen in Betracht ziehen:</p> <ol> <li>Partitionierung: F\u00fcr sehr gro\u00dfe Tabellen (&gt;10M Zeilen)</li> <li>Read Replicas: F\u00fcr Read-Heavy Workloads</li> <li>Query Cache: F\u00fcr h\u00e4ufig identische Queries</li> <li>Denormalisierung: F\u00fcr komplexe Aggregationen</li> </ol>"},{"location":"QUEUE_MCP_IMPLEMENTATION_COMPLETE/","title":"Queue MCP Implementation Complete \u2705","text":""},{"location":"QUEUE_MCP_IMPLEMENTATION_COMPLETE/#ubersicht","title":"\u00dcbersicht","text":"<p>Die Queue MCP Server-Implementierung wurde erfolgreich abgeschlossen und bietet umfassende Queue-\u00dcberwachung und -Management-Funktionen f\u00fcr AskProAI.</p>"},{"location":"QUEUE_MCP_IMPLEMENTATION_COMPLETE/#implementierte-features","title":"Implementierte Features","text":""},{"location":"QUEUE_MCP_IMPLEMENTATION_COMPLETE/#1-queue-mcp-server-appservicesmcpqueuemcpserverphp","title":"1. Queue MCP Server (<code>app/Services/MCP/QueueMCPServer.php</code>)","text":"<ul> <li>Vollst\u00e4ndige Horizon-Integration</li> <li>Failed Job Management</li> <li>Worker-\u00dcberwachung</li> <li>Performance-Metriken</li> <li>Job-Suche und -Filterung</li> </ul>"},{"location":"QUEUE_MCP_IMPLEMENTATION_COMPLETE/#2-api-endpoints-alle-unter-apimcpqueue","title":"2. API Endpoints (alle unter <code>/api/mcp/queue/</code>)","text":"<ul> <li><code>GET overview</code> - Komplette Queue-\u00dcbersicht</li> <li><code>GET failed-jobs</code> - Fehlgeschlagene Jobs anzeigen</li> <li><code>GET recent-jobs</code> - Letzte Jobs anzeigen</li> <li><code>GET job/{id}</code> - Job-Details abrufen</li> <li><code>POST job/{id}/retry</code> - Job neu starten</li> <li><code>GET metrics</code> - Performance-Metriken</li> <li><code>GET workers</code> - Worker-Status</li> <li><code>POST search</code> - Jobs durchsuchen</li> </ul>"},{"location":"QUEUE_MCP_IMPLEMENTATION_COMPLETE/#3-controller-updates-apphttpcontrollersapimcpcontrollerphp","title":"3. Controller Updates (<code>app/Http/Controllers/Api/MCPController.php</code>)","text":"<ul> <li>Alle Queue-Endpoints hinzugef\u00fcgt</li> <li>Dependency Injection f\u00fcr QueueMCPServer</li> <li>Cache-Management integriert</li> </ul>"},{"location":"QUEUE_MCP_IMPLEMENTATION_COMPLETE/#4-routing-routesapiphp","title":"4. Routing (<code>routes/api.php</code>)","text":"<ul> <li>Alle Queue-Routes unter MCP-Prefix registriert</li> <li>Sanctum-Authentifizierung aktiviert</li> </ul>"},{"location":"QUEUE_MCP_IMPLEMENTATION_COMPLETE/#verwendung","title":"Verwendung","text":""},{"location":"QUEUE_MCP_IMPLEMENTATION_COMPLETE/#beispiel-anfragen-an-claude","title":"Beispiel-Anfragen an Claude:","text":"<pre><code>\"Claude, zeige mir alle fehlgeschlagenen Webhook-Jobs\"\n\"Warum ist der letzte Retell-Webhook fehlgeschlagen?\"\n\"Starte alle fehlgeschlagenen Jobs der letzten Stunde neu\"\n\"Wie ist die Queue-Performance heute?\"\n</code></pre>"},{"location":"QUEUE_MCP_IMPLEMENTATION_COMPLETE/#api-beispiele","title":"API-Beispiele:","text":"<pre><code># Queue-Status abrufen\ncurl -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  https://api.askproai.de/api/mcp/queue/overview\n\n# Fehlgeschlagene Jobs anzeigen\ncurl -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  https://api.askproai.de/api/mcp/queue/failed-jobs?limit=10\n\n# Job neu starten\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  https://api.askproai.de/api/mcp/queue/job/123/retry\n</code></pre>"},{"location":"QUEUE_MCP_IMPLEMENTATION_COMPLETE/#test-ergebnisse","title":"Test-Ergebnisse","text":"<p>\u2705 Queue Overview funktioniert \u2705 230 Failed Jobs erkannt \u2705 Worker-Status korrekt (7 aktive Worker) \u2705 Horizon-Status: running \u2705 Redis-Integration funktioniert</p>"},{"location":"QUEUE_MCP_IMPLEMENTATION_COMPLETE/#nachste-schritte","title":"N\u00e4chste Schritte","text":"<ol> <li>Dashboard-Widget f\u00fcr Queue-Status erstellen</li> <li>Alerting bei zu vielen Failed Jobs</li> <li>Auto-Retry Strategien implementieren</li> <li>Queue-Performance Optimierung</li> </ol>"},{"location":"QUEUE_MCP_IMPLEMENTATION_COMPLETE/#dokumentation-updates","title":"Dokumentation Updates","text":"<ul> <li>\u2705 <code>MCP_COMPLETE_OVERVIEW.md</code> - Queue MCP hinzugef\u00fcgt</li> <li>\u2705 MCP Selection Matrix erweitert</li> <li>\u2705 Use Cases f\u00fcr Webhook-Debugging hinzugef\u00fcgt</li> <li>\u2705 Emergency Commands f\u00fcr Queue-Management</li> </ul>"},{"location":"QUEUE_MCP_IMPLEMENTATION_COMPLETE/#offene-todos","title":"Offene TODOs","text":"<p>Die folgenden High-Priority MCPs sollten als n\u00e4chstes implementiert werden:</p> <ol> <li>Customer Intelligence MCP - Kundenanalyse und -verhalten</li> <li>Business Analytics MCP - Umsatz und Conversion-Analysen</li> <li>Integration Health MCP - API-\u00dcberwachung aller externen Services</li> </ol> <p>Status: \u2705 Production Ready Implementiert von: Claude Datum: 2025-06-20</p>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/","title":"Retell Webhook MCP Migration Guide","text":""},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#overview","title":"Overview","text":"<p>This guide documents the migration of the RetellWebhookController to use the MCP (Modular Component Pattern) architecture. The new implementation provides better modularity, error handling, and tenant isolation.</p>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#key-changes","title":"Key Changes","text":""},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#1-architecture-migration","title":"1. Architecture Migration","text":"<p>Old Architecture: - Direct service calls to WebhookProcessor, CalcomV2Service - Manual tenant resolution - Mixed concerns (webhook processing, booking, availability)</p> <p>New MCP Architecture: - Uses MCPOrchestrator for service routing - MCPContextResolver for company/branch resolution - MCPBookingOrchestrator for booking logic - Clear separation of concerns</p>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#2-dependency-injection","title":"2. Dependency Injection","text":"<p>Old Controller: <pre><code>public function __construct(\n    WebhookProcessor $webhookProcessor, \n    ApiRateLimiter $rateLimiter\n)\n</code></pre></p> <p>New MCP Controller: <pre><code>public function __construct(\n    MCPOrchestrator $mcpOrchestrator,\n    MCPContextResolver $contextResolver,\n    MCPBookingOrchestrator $bookingOrchestrator,\n    ApiRateLimiter $rateLimiter\n)\n</code></pre></p>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#3-context-resolution","title":"3. Context Resolution","text":"<p>Old Approach: <pre><code>$toNumber = $callData['call_inbound']['to_number'] ?? null;\n$company = Company::where('phone_number', $toNumber)-&gt;first();\nif (!$company) {\n    $company = Company::first(); // Fallback\n}\n</code></pre></p> <p>New MCP Approach: <pre><code>$context = $this-&gt;contextResolver-&gt;resolveFromPhone($toNumber);\nif (!$context['success']) {\n    // Handle with proper error or fallback\n}\n$this-&gt;contextResolver-&gt;setTenantContext($context['company']['id']);\n</code></pre></p>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#4-service-calls","title":"4. Service Calls","text":"<p>Old Direct Service Calls: <pre><code>$calcomService = new CalcomV2Service($company-&gt;calcom_api_key);\n$availabilityService = new CalcomAvailabilityService($calcomService);\n$isAvailable = $availabilityService-&gt;isTimeSlotAvailable(...);\n</code></pre></p> <p>New MCP Service Calls: <pre><code>$mcpRequest = new MCPRequest(\n    service: 'calcom',\n    operation: 'checkAvailability',\n    params: [...],\n    tenantId: $context['company']['id'],\n    correlationId: $correlationId\n);\n$mcpResponse = $this-&gt;mcpOrchestrator-&gt;route($mcpRequest);\n</code></pre></p>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#5-error-handling","title":"5. Error Handling","text":"<p>Old Error Handling: <pre><code>try {\n    // Process webhook\n} catch (\\Exception $e) {\n    Log::error('Failed to process webhook', [...]);\n    // Return success to avoid retries\n    return response()-&gt;json(['success' =&gt; true], 200);\n}\n</code></pre></p> <p>New MCP Error Handling: <pre><code>try {\n    $response = $this-&gt;processThroughMCP($request, $correlationId);\n    return $this-&gt;successResponse($response, $correlationId);\n} catch (\\App\\Exceptions\\WebhookSignatureException $e) {\n    return $this-&gt;errorResponse('Invalid signature', 401, $correlationId);\n} catch (\\Exception $e) {\n    // Proper error logging with correlation ID\n    // Still return success but with error details in dev\n    return $this-&gt;successResponse([\n        'processed' =&gt; false,\n        'error' =&gt; app()-&gt;environment('local') ? $e-&gt;getMessage() : 'Internal error'\n    ], $correlationId);\n}\n</code></pre></p>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#migration-steps","title":"Migration Steps","text":""},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#1-update-routes","title":"1. Update Routes","text":"<p>Add the new MCP routes to your API routes:</p> <pre><code>// In routes/api.php\nrequire __DIR__.'/api-mcp.php';\n</code></pre> <p>Or manually add:</p> <pre><code>Route::prefix('mcp/retell')-&gt;middleware([\n    'throttle:webhook',\n    VerifyRetellSignature::class\n])-&gt;group(function () {\n    Route::post('/webhook', [RetellWebhookMCPController::class, 'processWebhook']);\n});\n</code></pre>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#2-update-retellai-configuration","title":"2. Update Retell.ai Configuration","text":"<p>Update your webhook URL in Retell.ai dashboard: - Old: <code>https://api.askproai.de/api/retell/webhook</code> - New: <code>https://api.askproai.de/api/mcp/retell/webhook</code></p>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#3-enable-migration-mode-optional","title":"3. Enable Migration Mode (Optional)","text":"<p>For gradual migration, enable migration mode in config:</p> <pre><code>// In config/features.php\n'mcp_migration_mode' =&gt; true,\n</code></pre> <p>This will forward old webhook URLs to the new MCP controller.</p>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#4-update-environment-variables","title":"4. Update Environment Variables","text":"<p>No new environment variables required. The MCP system uses existing configurations.</p>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#5-test-the-migration","title":"5. Test the Migration","text":"<p>Run these tests to verify the migration:</p> <pre><code># Test webhook signature verification\ncurl -X POST https://api.askproai.de/api/mcp/retell/webhook \\\n  -H \"x-retell-signature: YOUR_SIGNATURE\" \\\n  -H \"Content-Type: application/json\" \\\n  -d @test-webhook-payload.json\n\n# Check MCP health\nphp artisan mcp:health\n\n# Monitor MCP metrics\nphp artisan mcp:monitor\n</code></pre>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#benefits-of-mcp-migration","title":"Benefits of MCP Migration","text":""},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#1-better-error-handling","title":"1. Better Error Handling","text":"<ul> <li>Centralized error handling in MCPOrchestrator</li> <li>Proper error propagation with correlation IDs</li> <li>Circuit breaker pattern for external services</li> </ul>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#2-improved-tenant-isolation","title":"2. Improved Tenant Isolation","text":"<ul> <li>Automatic tenant context resolution</li> <li>Secure multi-tenant operations</li> <li>No accidental data leakage</li> </ul>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#3-enhanced-monitoring","title":"3. Enhanced Monitoring","text":"<ul> <li>Built-in metrics collection</li> <li>Performance tracking per service</li> <li>Real-time health monitoring</li> </ul>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#4-easier-testing","title":"4. Easier Testing","text":"<ul> <li>Mock MCP services for unit tests</li> <li>Isolated component testing</li> <li>Better integration test support</li> </ul>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#5-scalability","title":"5. Scalability","text":"<ul> <li>Service-based architecture</li> <li>Easy to add new services</li> <li>Built-in rate limiting and quotas</li> </ul>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#rollback-plan","title":"Rollback Plan","text":"<p>If issues arise, you can quickly rollback:</p> <ol> <li>Update Retell.ai webhook URL back to old endpoint</li> <li>Disable migration mode in config</li> <li>Monitor old endpoint for any issues</li> </ol> <p>The old controller remains functional and unchanged.</p>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#monitoring","title":"Monitoring","text":"<p>Monitor the migration using:</p> <pre><code># View MCP metrics\nphp artisan mcp:metrics\n\n# Check webhook processing\ntail -f storage/logs/laravel.log | grep \"MCP Retell\"\n\n# View circuit breaker status\nphp artisan circuit-breaker:status\n</code></pre>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#issue-service-webhook-not-found","title":"Issue: \"Service 'webhook' not found\"","text":"<p>Solution: Ensure MCPServiceProvider is registered and WebhookMCPServer is properly instantiated.</p>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#issue-unable-to-resolve-tenant-id","title":"Issue: \"Unable to resolve tenant ID\"","text":"<p>Solution: Check that phone numbers are properly associated with branches in the phone_numbers table.</p>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#issue-circuit-breaker-open","title":"Issue: \"Circuit breaker open\"","text":"<p>Solution: Check external service health (Cal.com, Retell.ai). Reset circuit breaker if needed: <pre><code>php artisan circuit-breaker:reset calcom\n</code></pre></p>"},{"location":"RETELL_WEBHOOK_MCP_MIGRATION_GUIDE/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>Async Processing: Move to fully async webhook processing</li> <li>Event Sourcing: Store all webhook events for replay</li> <li>Advanced Analytics: Track conversion rates, booking patterns</li> <li>A/B Testing: Test different booking flows through MCP</li> </ol>"},{"location":"SENTRY_MCP_INTEGRATION/","title":"Sentry MCP Integration for Claude Code","text":"<p>This document explains how to use the Sentry MCP (Model Context Protocol) Server integration with Claude Code to debug and solve errors more efficiently.</p>"},{"location":"SENTRY_MCP_INTEGRATION/#overview","title":"Overview","text":"<p>The Sentry MCP Server allows Claude Code to directly access error data from Sentry, making it easier to: - View recent errors and exceptions - Analyze stack traces - Understand error context and breadcrumbs - Search for specific error patterns - Monitor application performance</p>"},{"location":"SENTRY_MCP_INTEGRATION/#setup","title":"Setup","text":""},{"location":"SENTRY_MCP_INTEGRATION/#1-configure-sentry-credentials","title":"1. Configure Sentry Credentials","text":"<p>Add the following to your <code>.env</code> file:</p> <pre><code># Basic Sentry Configuration\nSENTRY_LARAVEL_DSN=https://YOUR_DSN@sentry.io/PROJECT_ID\nSENTRY_ENVIRONMENT=production\n\n# MCP Server Configuration\nSENTRY_ORGANIZATION=your-org-name\nSENTRY_PROJECT=your-project-name\nSENTRY_AUTH_TOKEN=your-sentry-auth-token\n</code></pre>"},{"location":"SENTRY_MCP_INTEGRATION/#2-generate-sentry-auth-token","title":"2. Generate Sentry Auth Token","text":"<ol> <li>Go to Sentry.io \u2192 Settings \u2192 Account \u2192 API \u2192 Auth Tokens</li> <li>Create a new token with the following scopes:</li> <li><code>project:read</code></li> <li><code>event:read</code></li> <li><code>org:read</code></li> </ol>"},{"location":"SENTRY_MCP_INTEGRATION/#3-test-the-integration","title":"3. Test the Integration","text":"<pre><code># Test MCP Server info endpoint\ncurl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\\n  https://your-domain.com/api/mcp/sentry/info\n\n# List recent issues\ncurl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\\n  https://your-domain.com/api/mcp/sentry/issues\n</code></pre>"},{"location":"SENTRY_MCP_INTEGRATION/#available-mcp-endpoints","title":"Available MCP Endpoints","text":""},{"location":"SENTRY_MCP_INTEGRATION/#1-server-information","title":"1. Server Information","text":"<p><pre><code>GET /api/mcp/sentry/info\n</code></pre> Returns MCP server capabilities and configuration.</p>"},{"location":"SENTRY_MCP_INTEGRATION/#2-list-issues","title":"2. List Issues","text":"<p><pre><code>GET /api/mcp/sentry/issues\n</code></pre> Query parameters: - <code>limit</code> (int): Number of issues to return (1-100) - <code>sort</code> (string): Sort order (date, priority, freq, new) - <code>query</code> (string): Search query</p>"},{"location":"SENTRY_MCP_INTEGRATION/#3-get-issue-details","title":"3. Get Issue Details","text":"<p><pre><code>GET /api/mcp/sentry/issues/{issueId}\n</code></pre> Returns detailed information about a specific issue.</p>"},{"location":"SENTRY_MCP_INTEGRATION/#4-get-latest-event","title":"4. Get Latest Event","text":"<p><pre><code>GET /api/mcp/sentry/issues/{issueId}/latest-event\n</code></pre> Returns the latest event for an issue, including full stack trace.</p>"},{"location":"SENTRY_MCP_INTEGRATION/#5-search-issues","title":"5. Search Issues","text":"<p><pre><code>POST /api/mcp/sentry/issues/search\n</code></pre> Body: <pre><code>{\n  \"query\": \"error message or exception type\",\n  \"limit\": 25\n}\n</code></pre></p>"},{"location":"SENTRY_MCP_INTEGRATION/#6-performance-data","title":"6. Performance Data","text":"<p><pre><code>GET /api/mcp/sentry/performance\n</code></pre> Returns performance metrics for the application.</p>"},{"location":"SENTRY_MCP_INTEGRATION/#7-clear-cache","title":"7. Clear Cache","text":"<p><pre><code>POST /api/mcp/sentry/cache/clear\n</code></pre> Clears the MCP cache to fetch fresh data.</p>"},{"location":"SENTRY_MCP_INTEGRATION/#using-with-claude-code","title":"Using with Claude Code","text":"<p>When debugging errors with Claude Code, you can ask questions like:</p> <ul> <li>\"What are the most recent errors in production?\"</li> <li>\"Show me the stack trace for error ID ABC123\"</li> <li>\"Search for all database connection errors\"</li> <li>\"What errors are happening in the booking flow?\"</li> <li>\"Show me performance issues in the last 24 hours\"</li> </ul> <p>Claude Code will use the MCP Server to fetch relevant data from Sentry and help you understand and fix the issues.</p>"},{"location":"SENTRY_MCP_INTEGRATION/#configuration-options","title":"Configuration Options","text":"<p>In <code>config/mcp-sentry.php</code>:</p> <pre><code>'filters' =&gt; [\n    // Only show errors from last N days\n    'days_back' =&gt; env('MCP_SENTRY_DAYS_BACK', 7),\n\n    // Minimum error level to show\n    'min_level' =&gt; env('MCP_SENTRY_MIN_LEVEL', 'warning'),\n\n    // Exclude certain error types\n    'exclude_types' =&gt; [\n        'Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\NotFoundHttpException',\n    ],\n],\n</code></pre>"},{"location":"SENTRY_MCP_INTEGRATION/#security-considerations","title":"Security Considerations","text":"<ol> <li>The MCP endpoints are protected by Sanctum authentication</li> <li>Sentry auth tokens should never be exposed to the frontend</li> <li>Consider limiting MCP access to admin users only</li> <li>Regularly rotate Sentry auth tokens</li> </ol>"},{"location":"SENTRY_MCP_INTEGRATION/#troubleshooting","title":"Troubleshooting","text":""},{"location":"SENTRY_MCP_INTEGRATION/#failed-to-fetch-issues-from-sentry","title":"\"Failed to fetch issues from Sentry\"","text":"<ul> <li>Check that <code>SENTRY_AUTH_TOKEN</code> is set correctly</li> <li>Verify the token has the required scopes</li> <li>Check <code>storage/logs/laravel.log</code> for detailed error messages</li> </ul>"},{"location":"SENTRY_MCP_INTEGRATION/#cache-not-clearing","title":"\"Cache not clearing\"","text":"<ul> <li>Ensure Redis is running: <code>redis-cli ping</code></li> <li>Check cache configuration in <code>config/cache.php</code></li> </ul>"},{"location":"SENTRY_MCP_INTEGRATION/#no-issues-returned","title":"\"No issues returned\"","text":"<ul> <li>Verify <code>SENTRY_ORGANIZATION</code> and <code>SENTRY_PROJECT</code> match your Sentry setup</li> <li>Check the date filter in <code>MCP_SENTRY_DAYS_BACK</code></li> <li>Try lowering <code>MCP_SENTRY_MIN_LEVEL</code> to include more error types</li> </ul>"},{"location":"SENTRY_MCP_INTEGRATION/#example-usage-in-code","title":"Example Usage in Code","text":"<pre><code>// In your controller or service\nuse App\\Services\\MCP\\SentryMCPServer;\n\npublic function debugError(SentryMCPServer $sentry)\n{\n    // List recent issues\n    $issues = $sentry-&gt;listIssues(['limit' =&gt; 10]);\n\n    // Get specific issue details\n    $issue = $sentry-&gt;getIssue('1234567890');\n\n    // Get stack trace\n    $event = $sentry-&gt;getLatestEvent('1234567890');\n\n    // Search for specific errors\n    $dbErrors = $sentry-&gt;searchIssues('database connection');\n}\n</code></pre>"},{"location":"SENTRY_MCP_INTEGRATION/#best-practices","title":"Best Practices","text":"<ol> <li>Use descriptive error messages in your code to make searching easier</li> <li>Add context to errors using Sentry's context features</li> <li>Tag errors appropriately (e.g., by feature, severity, user impact)</li> <li>Monitor performance alongside errors for complete visibility</li> <li>Set up alerts in Sentry for critical errors</li> </ol>"},{"location":"SENTRY_MCP_INTEGRATION/#integration-with-filament-admin","title":"Integration with Filament Admin","text":"<p>A Sentry dashboard widget is planned for the Filament admin panel to show: - Recent errors summary - Error trends graph - Quick links to Sentry issues - Performance metrics</p> <p>This will provide a unified view of application health within the admin interface.</p>"},{"location":"SERVICE_ARCHITECTURE/","title":"AskProAI Service Architecture Documentation","text":"<p>Last Updated: 2025-06-17</p>"},{"location":"SERVICE_ARCHITECTURE/#overview","title":"Overview","text":"<p>This document provides a comprehensive overview of all service classes in the AskProAI platform, their responsibilities, and how they interact.</p>"},{"location":"SERVICE_ARCHITECTURE/#service-categories","title":"Service Categories","text":""},{"location":"SERVICE_ARCHITECTURE/#1-calendar-integration-services-calcom","title":"1. Calendar Integration Services (Cal.com)","text":""},{"location":"SERVICE_ARCHITECTURE/#calcomservicephp","title":"CalcomService.php","text":"<ul> <li>Purpose: Primary V1 API integration with Cal.com</li> <li>Key Methods: </li> <li><code>createBooking()</code> - Creates appointments in Cal.com</li> <li><code>getAvailability()</code> - Checks available time slots</li> <li><code>getEventTypes()</code> - Retrieves available event types</li> <li>Used By: ProcessRetellCallEndedJob, CalendarProviderFactory</li> <li>Status: Active, will be migrated to V2</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#calcomv2servicephp-recommended","title":"CalcomV2Service.php \u2b50 [RECOMMENDED]","text":"<ul> <li>Purpose: Modern V2 API integration with Cal.com</li> <li>Key Methods:</li> <li><code>getEventTypes()</code> - Retrieves event types with enhanced data</li> <li><code>getAvailableSlots()</code> - Advanced availability checking</li> <li><code>createBooking()</code> - Creates bookings with V2 features</li> <li><code>getBookings()</code> - Retrieves booking list</li> <li>Used By: CalcomApiTest, future implementations</li> <li>Status: Active, target for all new features</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#calcomimportservicephp","title":"CalcomImportService.php","text":"<ul> <li>Purpose: Imports event types from Cal.com to local database</li> <li>Key Methods:</li> <li><code>importEventTypes()</code> - Bulk import of event types</li> <li><code>mapEventTypeData()</code> - Maps Cal.com data to local models</li> <li>Used By: ImportCalcomEventTypesController, Admin UI</li> <li>Status: Critical for onboarding</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#calcomsyncservicephp","title":"CalcomSyncService.php","text":"<ul> <li>Purpose: Synchronizes data between Cal.com and local database</li> <li>Key Methods:</li> <li><code>checkAvailability()</code> - Real-time availability checks</li> <li><code>syncBookings()</code> - Two-way booking synchronization</li> <li><code>updateEventType()</code> - Syncs event type changes</li> <li>Used By: Multiple controllers, background jobs</li> <li>Status: Critical for real-time operations</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#calcomeventtypesyncservicephp","title":"CalcomEventTypeSyncService.php","text":"<ul> <li>Purpose: Specialized service for event type synchronization</li> <li>Key Methods:</li> <li><code>syncEventTypesForCompany()</code> - Company-wide sync</li> <li><code>validateApiKey()</code> - API key validation</li> <li><code>fetchEventTypes()</code> - Retrieves and caches event types</li> <li>Used By: CompanyResource, setup wizards</li> <li>Status: Essential for multi-tenant operations</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#calcomv2migrationservicephp","title":"CalcomV2MigrationService.php","text":"<ul> <li>Purpose: Handles migration from V1 to V2 API</li> <li>Key Methods:</li> <li><code>migrateEventTypes()</code> - Converts V1 event types to V2</li> <li><code>migrateBookings()</code> - Updates booking format</li> <li>Used By: Registered in AppServiceProvider</li> <li>Status: Transition service</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#2-phone-ai-services-retellai","title":"2. Phone AI Services (Retell.ai)","text":""},{"location":"SERVICE_ARCHITECTURE/#retellservicephp","title":"RetellService.php","text":"<ul> <li>Purpose: Primary integration with Retell.ai</li> <li>Key Methods:</li> <li><code>createCall()</code> - Initiates AI phone calls</li> <li><code>updateCall()</code> - Updates call status</li> <li><code>getCallDetails()</code> - Retrieves call information</li> <li>Used By: RetellWebhookController, various commands</li> <li>Status: Active, being migrated to V2</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#retellv2servicephp-recommended","title":"RetellV2Service.php \u2b50 [RECOMMENDED]","text":"<ul> <li>Purpose: Enhanced V2 integration with Retell.ai</li> <li>Key Methods:</li> <li><code>handleWebhook()</code> - Processes all webhook events</li> <li><code>processCallEnded()</code> - Handles completed calls</li> <li><code>extractAppointmentData()</code> - AI data extraction</li> <li>Used By: ProcessRetellCallEndedJob</li> <li>Status: Active, target for new features</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#retellagentservicephp","title":"RetellAgentService.php","text":"<ul> <li>Purpose: Manages AI agents configuration</li> <li>Key Methods:</li> <li><code>createAgent()</code> - Creates new AI agents</li> <li><code>updateAgent()</code> - Updates agent settings</li> <li><code>assignAgentToBranch()</code> - Branch-agent mapping</li> <li>Used By: BranchResource</li> <li>Status: Critical for multi-branch setup</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#3-core-business-services","title":"3. Core Business Services","text":""},{"location":"SERVICE_ARCHITECTURE/#appointmentbookingservicephp-primary","title":"AppointmentBookingService.php \u2b50 [PRIMARY]","text":"<ul> <li>Purpose: Central orchestrator for appointment bookings</li> <li>Key Methods:</li> <li><code>bookAppointment()</code> - Complete booking flow</li> <li><code>checkAvailability()</code> - Unified availability checking</li> <li><code>confirmBooking()</code> - Booking confirmation process</li> <li>Used By: Webhooks, API controllers, jobs</li> <li>Status: Primary booking service</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#smartbookingservicephp","title":"SmartBookingService.php \ud83c\udd95","text":"<ul> <li>Purpose: AI-enhanced booking with smart features</li> <li>Key Methods:</li> <li><code>handleIncomingCall()</code> - End-to-end call processing</li> <li><code>findBestSlot()</code> - AI-powered slot recommendation</li> <li><code>autoReschedule()</code> - Intelligent rescheduling</li> <li>Used By: Future AI features</li> <li>Status: Next-generation service</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#phonenumberresolverphp","title":"PhoneNumberResolver.php","text":"<ul> <li>Purpose: Maps phone numbers to companies/branches</li> <li>Key Methods:</li> <li><code>resolveBranch()</code> - Phone to branch mapping</li> <li><code>resolveCompany()</code> - Phone to company mapping</li> <li><code>cacheResolution()</code> - Performance optimization</li> <li>Used By: All incoming call handlers</li> <li>Status: Critical for multi-tenancy</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#calldatarefresherphp","title":"CallDataRefresher.php","text":"<ul> <li>Purpose: Updates call data from Retell.ai</li> <li>Key Methods:</li> <li><code>refreshCallData()</code> - Updates call information</li> <li><code>syncTranscripts()</code> - Retrieves call transcripts</li> <li><code>updateCallMetrics()</code> - Analytics data update</li> <li>Used By: Background jobs, admin UI</li> <li>Status: Essential for call tracking</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#4-communication-services","title":"4. Communication Services","text":""},{"location":"SERVICE_ARCHITECTURE/#notificationservicephp","title":"NotificationService.php","text":"<ul> <li>Purpose: Handles all notifications (email, SMS, WhatsApp)</li> <li>Key Methods:</li> <li><code>sendAppointmentConfirmation()</code> - Booking confirmations</li> <li><code>sendReminder()</code> - Appointment reminders</li> <li><code>sendCancellation()</code> - Cancellation notices</li> <li>Used By: All booking-related processes</li> <li>Status: Active, SMS/WhatsApp pending</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#emailservicephp","title":"EmailService.php","text":"<ul> <li>Purpose: Email-specific functionality</li> <li>Key Methods:</li> <li><code>sendTransactionalEmail()</code> - Transactional emails</li> <li><code>sendBulkEmail()</code> - Marketing emails</li> <li><code>trackEmailStatus()</code> - Delivery tracking</li> <li>Used By: NotificationService</li> <li>Status: Fully functional</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#5-payment-billing-services","title":"5. Payment &amp; Billing Services","text":""},{"location":"SERVICE_ARCHITECTURE/#stripeservicephp","title":"StripeService.php","text":"<ul> <li>Purpose: Stripe payment integration</li> <li>Key Methods:</li> <li><code>createCustomer()</code> - Customer management</li> <li><code>createSubscription()</code> - Subscription handling</li> <li><code>processPayment()</code> - Payment processing</li> <li>Used By: Billing controllers</li> <li>Status: Basic implementation</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#pricingservicephp","title":"PricingService.php","text":"<ul> <li>Purpose: Dynamic pricing calculations</li> <li>Key Methods:</li> <li><code>calculatePrice()</code> - Price computation</li> <li><code>applyDiscounts()</code> - Discount logic</li> <li><code>getTierPricing()</code> - Tiered pricing</li> <li>Used By: Quote generation</li> <li>Status: Ready for expansion</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#service-interaction-patterns","title":"Service Interaction Patterns","text":""},{"location":"SERVICE_ARCHITECTURE/#appointment-booking-flow","title":"Appointment Booking Flow","text":"<pre><code>1. RetellWebhookController receives call\n   \u2193\n2. PhoneNumberResolver identifies branch\n   \u2193\n3. RetellV2Service processes call data\n   \u2193\n4. AppointmentBookingService orchestrates:\n   - CalcomSyncService checks availability\n   - Customer creation/lookup\n   - CalcomV2Service creates booking\n   \u2193\n5. NotificationService sends confirmation\n</code></pre>"},{"location":"SERVICE_ARCHITECTURE/#event-type-synchronization","title":"Event Type Synchronization","text":"<pre><code>1. Admin triggers sync in UI\n   \u2193\n2. CalcomEventTypeSyncService fetches from Cal.com\n   \u2193\n3. CalcomImportService imports to database\n   \u2193\n4. Staff assignments updated\n   \u2193\n5. Cache refreshed\n</code></pre>"},{"location":"SERVICE_ARCHITECTURE/#best-practices","title":"Best Practices","text":"<ol> <li>Use V2 Services: Prefer CalcomV2Service and RetellV2Service for new features</li> <li>Service Boundaries: Keep services focused on single responsibility</li> <li>Error Handling: All services should implement comprehensive error handling</li> <li>Logging: Use structured logging for debugging</li> <li>Caching: Implement caching for frequently accessed data</li> <li>Testing: Each service should have corresponding tests</li> </ol>"},{"location":"SERVICE_ARCHITECTURE/#migration-roadmap","title":"Migration Roadmap","text":""},{"location":"SERVICE_ARCHITECTURE/#short-term-1-2-weeks","title":"Short Term (1-2 weeks)","text":"<ul> <li>Complete migration from CalcomService to CalcomV2Service</li> <li>Unify RetellService and RetellV2Service</li> <li>Implement comprehensive logging</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#medium-term-1-month","title":"Medium Term (1 month)","text":"<ul> <li>Add SMS/WhatsApp to NotificationService</li> <li>Enhance StripeService for full billing</li> <li>Build automated agent provisioning</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#long-term-3-months","title":"Long Term (3 months)","text":"<ul> <li>Implement SmartBookingService AI features</li> <li>Add multi-language support</li> <li>Build customer self-service portal</li> </ul>"},{"location":"SERVICE_ARCHITECTURE/#monitoring-maintenance","title":"Monitoring &amp; Maintenance","text":"<ul> <li>All services log to <code>/storage/logs/services/</code></li> <li>Performance metrics tracked in database</li> <li>Health checks available via <code>/api/health</code></li> <li>Service status dashboard in admin panel</li> </ul> <p>For questions or updates to this documentation, contact: dev@askproai.de</p>"},{"location":"STRUCTURED_LOGGER_GUIDE/","title":"StructuredLogger Usage Guide","text":""},{"location":"STRUCTURED_LOGGER_GUIDE/#overview","title":"Overview","text":"<p>The StructuredLogger service provides a comprehensive logging solution for AskProAI that: - Automatically includes correlation IDs for request tracing - Logs API calls to the ApiCallLog model for monitoring - Provides structured logging for booking flows - Includes user, IP, and request context automatically - Supports different log channels for different purposes - Integrates seamlessly with the existing logging infrastructure</p>"},{"location":"STRUCTURED_LOGGER_GUIDE/#quick-start","title":"Quick Start","text":""},{"location":"STRUCTURED_LOGGER_GUIDE/#1-using-the-facade","title":"1. Using the Facade","text":"<pre><code>use App\\Facades\\StructuredLog;\n\n// Simple logging\nStructuredLog::info('Processing appointment request');\nStructuredLog::success('Appointment created successfully');\nStructuredLog::failure('Failed to create appointment');\nStructuredLog::warning('Slot almost fully booked');\n\n// Log with context\nStructuredLog::info('Customer lookup', [\n    'phone' =&gt; '+49123456789',\n    'method' =&gt; 'phone_number'\n]);\n</code></pre>"},{"location":"STRUCTURED_LOGGER_GUIDE/#2-using-the-trait-in-services","title":"2. Using the Trait in Services","text":"<pre><code>use App\\Services\\Traits\\LogsStructured;\n\nclass MyService\n{\n    use LogsStructured;\n\n    public function processRequest()\n    {\n        $this-&gt;logInfo('Starting request processing');\n\n        try {\n            // Your logic here\n            $this-&gt;logSuccess('Request processed successfully');\n        } catch (\\Exception $e) {\n            $this-&gt;logError($e, ['context' =&gt; 'request_processing']);\n        }\n    }\n}\n</code></pre>"},{"location":"STRUCTURED_LOGGER_GUIDE/#core-features","title":"Core Features","text":""},{"location":"STRUCTURED_LOGGER_GUIDE/#1-correlation-ids","title":"1. Correlation IDs","text":"<p>Every request automatically gets a correlation ID that's included in all logs:</p> <pre><code>// Get current correlation ID\n$correlationId = StructuredLog::getCorrelationId();\n\n// Set custom correlation ID (usually not needed)\nStructuredLog::setCorrelationId('custom-id-123');\n</code></pre>"},{"location":"STRUCTURED_LOGGER_GUIDE/#2-booking-flow-logging","title":"2. Booking Flow Logging","text":"<p>Track every step of the booking process:</p> <pre><code>// Log booking steps\nStructuredLog::logBookingFlow('booking_initiated', [\n    'customer_id' =&gt; $customerId,\n    'service_id' =&gt; $serviceId,\n    'requested_time' =&gt; $requestedTime,\n]);\n\nStructuredLog::logBookingFlow('availability_checked', [\n    'available' =&gt; true,\n    'slots_found' =&gt; 5,\n]);\n\nStructuredLog::logBookingFlow('appointment_created', [\n    'appointment_id' =&gt; $appointment-&gt;id,\n    'confirmation_number' =&gt; $appointment-&gt;confirmation_number,\n]);\n</code></pre>"},{"location":"STRUCTURED_LOGGER_GUIDE/#3-api-call-logging","title":"3. API Call Logging","text":"<p>Automatically log all external API calls with timing:</p> <pre><code>// Using the trait\n$apiLogger = $this-&gt;logApiCall('/v2/bookings', 'POST', [\n    'name' =&gt; 'John Doe',\n    'email' =&gt; 'john@example.com',\n    'eventTypeId' =&gt; 123,\n]);\n\ntry {\n    $response = Http::post('https://api.cal.com/v2/bookings', $data);\n\n    if ($response-&gt;successful()) {\n        $apiLogger-&gt;success($response);\n    } else {\n        $apiLogger-&gt;failure($response, 'API returned error');\n    }\n} catch (\\Exception $e) {\n    $apiLogger-&gt;exception($e);\n}\n</code></pre>"},{"location":"STRUCTURED_LOGGER_GUIDE/#4-webhook-logging","title":"4. Webhook Logging","text":"<p>Log incoming webhooks with automatic context:</p> <pre><code>StructuredLog::logWebhook('retell', 'call_ended', $payload, [\n    'signature_valid' =&gt; true,\n    'call_duration' =&gt; 120,\n]);\n</code></pre>"},{"location":"STRUCTURED_LOGGER_GUIDE/#5-performance-logging","title":"5. Performance Logging","text":"<p>Track performance metrics:</p> <pre><code>$startTime = microtime(true);\n\n// Do some work...\n\n$duration = microtime(true) - $startTime;\n\nStructuredLog::logPerformance('data_import', $duration, [\n    'records_processed' =&gt; 1000,\n    'records_per_second' =&gt; 1000 / $duration,\n]);\n</code></pre>"},{"location":"STRUCTURED_LOGGER_GUIDE/#6-security-event-logging","title":"6. Security Event Logging","text":"<p>Log security-related events:</p> <pre><code>StructuredLog::logSecurity('invalid_api_key', 'warning', [\n    'api_key_prefix' =&gt; substr($apiKey, 0, 8) . '...',\n    'ip_address' =&gt; request()-&gt;ip(),\n]);\n\nStructuredLog::logSecurity('multiple_failed_logins', 'critical', [\n    'user_email' =&gt; $email,\n    'attempts' =&gt; 5,\n]);\n</code></pre>"},{"location":"STRUCTURED_LOGGER_GUIDE/#log-channels","title":"Log Channels","text":"<p>The following channels are configured:</p> <ul> <li><code>booking_flow</code> - Booking process steps</li> <li><code>api</code> - General API calls</li> <li><code>calcom</code> - Cal.com specific logs</li> <li><code>retell</code> - Retell.ai specific logs</li> <li><code>webhooks</code> - Incoming webhooks</li> <li><code>critical</code> - Critical errors</li> <li><code>slow_queries</code> - Performance issues</li> </ul>"},{"location":"STRUCTURED_LOGGER_GUIDE/#database-storage","title":"Database Storage","text":""},{"location":"STRUCTURED_LOGGER_GUIDE/#apicalllog-model","title":"ApiCallLog Model","text":"<p>All API calls are automatically stored in the <code>api_call_logs</code> table:</p> <pre><code>// Query API call logs\nuse App\\Models\\ApiCallLog;\n\n// Get recent Cal.com errors\n$errors = ApiCallLog::forService('calcom')\n    -&gt;failed()\n    -&gt;latest()\n    -&gt;take(10)\n    -&gt;get();\n\n// Get statistics\n$stats = ApiCallLog::getServiceStats('calcom', now()-&gt;subDay(), now());\n</code></pre>"},{"location":"STRUCTURED_LOGGER_GUIDE/#bookingflowlog-table","title":"BookingFlowLog Table","text":"<p>Booking flow steps are stored in <code>booking_flow_logs</code>:</p> <pre><code>SELECT step, COUNT(*) as count, AVG(JSON_EXTRACT(context, '$.duration_ms')) as avg_duration\nFROM booking_flow_logs\nWHERE company_id = ?\n  AND created_at &gt;= DATE_SUB(NOW(), INTERVAL 1 DAY)\nGROUP BY step;\n</code></pre>"},{"location":"STRUCTURED_LOGGER_GUIDE/#middleware-setup","title":"Middleware Setup","text":"<p>The <code>CorrelationIdMiddleware</code> is automatically applied to all routes. To add it manually:</p> <pre><code>// In routes/api.php or specific route group\nRoute::middleware(['correlation.id'])-&gt;group(function () {\n    // Your routes\n});\n</code></pre>"},{"location":"STRUCTURED_LOGGER_GUIDE/#best-practices","title":"Best Practices","text":""},{"location":"STRUCTURED_LOGGER_GUIDE/#1-always-include-context","title":"1. Always Include Context","text":"<pre><code>// Bad\nStructuredLog::info('User logged in');\n\n// Good\nStructuredLog::info('User logged in', [\n    'user_id' =&gt; $user-&gt;id,\n    'login_method' =&gt; 'email',\n    'ip_address' =&gt; request()-&gt;ip(),\n]);\n</code></pre>"},{"location":"STRUCTURED_LOGGER_GUIDE/#2-use-appropriate-log-levels","title":"2. Use Appropriate Log Levels","text":"<ul> <li><code>debug</code> - Detailed debugging information</li> <li><code>info</code> - Interesting events (user logs in, appointment created)</li> <li><code>warning</code> - Exceptional occurrences that are not errors</li> <li><code>error</code> - Runtime errors that need attention</li> <li><code>critical</code> - Critical problems that need immediate action</li> </ul>"},{"location":"STRUCTURED_LOGGER_GUIDE/#3-sensitive-data-protection","title":"3. Sensitive Data Protection","text":"<p>The logger automatically masks sensitive fields: - password - api_key - token - secret - credit_card - authorization - bearer</p>"},{"location":"STRUCTURED_LOGGER_GUIDE/#4-performance-considerations","title":"4. Performance Considerations","text":"<pre><code>// For high-frequency operations, consider sampling\nif (rand(1, 100) === 1) { // Log 1% of requests\n    StructuredLog::logPerformance('high_frequency_operation', $duration);\n}\n</code></pre>"},{"location":"STRUCTURED_LOGGER_GUIDE/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"STRUCTURED_LOGGER_GUIDE/#finding-related-logs","title":"Finding Related Logs","text":"<pre><code>// Get all logs for a correlation ID\n$correlationId = 'abc-123-def';\n\n// In application\n$logs = DB::table('booking_flow_logs')\n    -&gt;where('correlation_id', $correlationId)\n    -&gt;orderBy('created_at')\n    -&gt;get();\n\n// In log files\ngrep \"abc-123-def\" storage/logs/*.log\n</code></pre>"},{"location":"STRUCTURED_LOGGER_GUIDE/#creating-dashboards","title":"Creating Dashboards","text":"<pre><code>-- Booking funnel analysis\nSELECT \n    step,\n    COUNT(*) as total,\n    COUNT(DISTINCT correlation_id) as unique_sessions,\n    AVG(TIMESTAMPDIFF(SECOND, created_at, \n        LEAD(created_at) OVER (PARTITION BY correlation_id ORDER BY created_at)\n    )) as avg_seconds_to_next_step\nFROM booking_flow_logs\nWHERE created_at &gt;= DATE_SUB(NOW(), INTERVAL 1 DAY)\nGROUP BY step\nORDER BY total DESC;\n</code></pre>"},{"location":"STRUCTURED_LOGGER_GUIDE/#migration-guide","title":"Migration Guide","text":""},{"location":"STRUCTURED_LOGGER_GUIDE/#updating-existing-services","title":"Updating Existing Services","text":"<ol> <li> <p>Add the trait: <pre><code>use App\\Services\\Traits\\LogsStructured;\n\nclass YourService\n{\n    use LogsStructured;\n</code></pre></p> </li> <li> <p>Replace Log::info() calls: <pre><code>// Before\nLog::info('API call to Cal.com', ['endpoint' =&gt; '/bookings']);\n\n// After\n$this-&gt;logInfo('API call to Cal.com', ['endpoint' =&gt; '/bookings']);\n</code></pre></p> </li> <li> <p>Add API call logging: <pre><code>// Wrap API calls\n$apiLogger = $this-&gt;logApiCall('/bookings', 'POST', $data);\ntry {\n    $response = $this-&gt;makeApiCall($data);\n    $apiLogger-&gt;success($response);\n} catch (\\Exception $e) {\n    $apiLogger-&gt;exception($e);\n}\n</code></pre></p> </li> </ol>"},{"location":"STRUCTURED_LOGGER_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"STRUCTURED_LOGGER_GUIDE/#logs-not-appearing","title":"Logs not appearing","text":"<ol> <li>Check the channel configuration in <code>config/logging.php</code></li> <li>Verify permissions on log files</li> <li>Check if the channel exists: <code>config('logging.channels.your_channel')</code></li> </ol>"},{"location":"STRUCTURED_LOGGER_GUIDE/#performance-impact","title":"Performance impact","text":"<p>The logger is designed to be lightweight, but for high-traffic endpoints:</p> <ol> <li>Use async logging for non-critical logs</li> <li>Consider batching API call logs</li> <li>Implement log rotation policies</li> </ol>"},{"location":"STRUCTURED_LOGGER_GUIDE/#missing-correlation-ids","title":"Missing correlation IDs","text":"<p>Ensure the <code>CorrelationIdMiddleware</code> is registered:</p> <pre><code>// In app/Http/Kernel.php or bootstrap/app.php\n'api' =&gt; [\n    \\App\\Http\\Middleware\\CorrelationIdMiddleware::class,\n    // other middleware\n],\n</code></pre>"},{"location":"TESTING_STRATEGY/","title":"AskProAI Testing Strategy","text":""},{"location":"TESTING_STRATEGY/#overview","title":"Overview","text":"<p>This document outlines the comprehensive testing strategy for the AskProAI platform, covering unit tests, integration tests, E2E tests, and performance testing.</p>"},{"location":"TESTING_STRATEGY/#test-levels","title":"Test Levels","text":""},{"location":"TESTING_STRATEGY/#1-unit-tests","title":"1. Unit Tests","text":"<p>Focus on testing individual components in isolation.</p> <p>Coverage Areas: - Services (CalcomV2Service, RetellV2Service, etc.) - Models and their relationships - Utilities and helpers - Validators and formatters</p> <p>Key Test Files: - <code>tests/Unit/CalcomV2ServiceTest.php</code> - <code>tests/Unit/PhoneNumberValidatorTest.php</code> - <code>tests/Unit/MockRetellServiceTest.php</code> - <code>tests/Unit/CriticalFixesUnitTest.php</code></p> <p>Running Unit Tests: <pre><code>php artisan test --testsuite=Unit\nphp artisan test --testsuite=Unit --parallel\n</code></pre></p>"},{"location":"TESTING_STRATEGY/#2-integration-tests","title":"2. Integration Tests","text":"<p>Test interaction between multiple components.</p> <p>Coverage Areas: - Service interactions - Database transactions - External API mocking - Queue job processing</p> <p>Key Test Files: - <code>tests/Integration/BookingServiceIntegrationTest.php</code> - <code>tests/Integration/WebhookProcessingTest.php</code> - <code>tests/Integration/CalcomIntegrationTest.php</code></p> <p>Running Integration Tests: <pre><code>php artisan test --testsuite=Integration\n</code></pre></p>"},{"location":"TESTING_STRATEGY/#3-end-to-end-e2e-tests","title":"3. End-to-End (E2E) Tests","text":"<p>Test complete user workflows from start to finish.</p> <p>Coverage Areas: - Complete booking flow (phone \u2192 appointment) - Webhook processing chains - Multi-step processes - Error scenarios</p> <p>Key Test Files: - <code>tests/E2E/BookingFlowCalcomV2E2ETest.php</code> - <code>tests/E2E/PhoneToAppointmentFlowTest.php</code> - <code>tests/E2E/ConcurrentBookingStressTest.php</code></p> <p>Running E2E Tests: <pre><code>php artisan test --testsuite=E2E\n</code></pre></p>"},{"location":"TESTING_STRATEGY/#4-performance-tests","title":"4. Performance Tests","text":"<p>Ensure system meets performance requirements.</p> <p>Coverage Areas: - Concurrent request handling - Database query performance - API response times - Memory usage</p> <p>Key Test Files: - <code>tests/E2E/ConcurrentBookingStressTest.php</code> - Performance assertions in E2E tests</p> <p>Running Performance Tests: <pre><code>php artisan test --filter=performance\n</code></pre></p>"},{"location":"TESTING_STRATEGY/#test-data-strategy","title":"Test Data Strategy","text":""},{"location":"TESTING_STRATEGY/#1-factories","title":"1. Factories","text":"<p>Use Laravel factories for consistent test data generation.</p> <pre><code>// Create test company with branches\n$company = Company::factory()\n    -&gt;has(Branch::factory()-&gt;count(3))\n    -&gt;has(Staff::factory()-&gt;count(5))\n    -&gt;create();\n</code></pre>"},{"location":"TESTING_STRATEGY/#2-seeders","title":"2. Seeders","text":"<p>Special seeders for test environments: - <code>TestDataSeeder</code> - Basic test data - <code>PerformanceTestSeeder</code> - Large datasets - <code>E2ETestSeeder</code> - Complete scenarios</p>"},{"location":"TESTING_STRATEGY/#3-mock-services","title":"3. Mock Services","text":"<p>Replace external services with mocks: - <code>MockCalcomV2Client</code> - Cal.com API mock - <code>MockRetellService</code> - Retell.ai API mock - <code>Mail::fake()</code> - Email testing - <code>Queue::fake()</code> - Queue testing</p>"},{"location":"TESTING_STRATEGY/#test-environment-configuration","title":"Test Environment Configuration","text":""},{"location":"TESTING_STRATEGY/#phpunit-configuration","title":"PHPUnit Configuration","text":"<pre><code>&lt;phpunit&gt;\n    &lt;testsuites&gt;\n        &lt;testsuite name=\"Unit\"&gt;\n            &lt;directory&gt;tests/Unit&lt;/directory&gt;\n        &lt;/testsuite&gt;\n        &lt;testsuite name=\"Integration\"&gt;\n            &lt;directory&gt;tests/Integration&lt;/directory&gt;\n        &lt;/testsuite&gt;\n        &lt;testsuite name=\"Feature\"&gt;\n            &lt;directory&gt;tests/Feature&lt;/directory&gt;\n        &lt;/testsuite&gt;\n        &lt;testsuite name=\"E2E\"&gt;\n            &lt;directory&gt;tests/E2E&lt;/directory&gt;\n        &lt;/testsuite&gt;\n    &lt;/testsuites&gt;\n    &lt;php&gt;\n        &lt;env name=\"APP_ENV\" value=\"testing\"/&gt;\n        &lt;env name=\"DB_CONNECTION\" value=\"sqlite\"/&gt;\n        &lt;env name=\"DB_DATABASE\" value=\":memory:\"/&gt;\n        &lt;env name=\"QUEUE_CONNECTION\" value=\"sync\"/&gt;\n        &lt;env name=\"CACHE_DRIVER\" value=\"array\"/&gt;\n    &lt;/php&gt;\n&lt;/phpunit&gt;\n</code></pre>"},{"location":"TESTING_STRATEGY/#test-database","title":"Test Database","text":"<ul> <li>SQLite in-memory for speed</li> <li>Migrations run before each test</li> <li>Transaction rollback after each test</li> </ul>"},{"location":"TESTING_STRATEGY/#mock-strategy","title":"Mock Strategy","text":""},{"location":"TESTING_STRATEGY/#external-apis","title":"External APIs","text":"<p>All external APIs should be mocked in tests:</p> <pre><code>// Mock Cal.com API\n$this-&gt;app-&gt;bind(CalcomV2Client::class, function () {\n    return new MockCalcomV2Client();\n});\n\n// Mock Retell API\n$this-&gt;app-&gt;bind(RetellV2Service::class, function () {\n    return new MockRetellService();\n});\n</code></pre>"},{"location":"TESTING_STRATEGY/#time-based-testing","title":"Time-based Testing","text":"<p>Use Carbon's test helpers:</p> <pre><code>// Freeze time\nCarbon::setTestNow('2024-01-15 10:00:00');\n\n// Travel to future\n$this-&gt;travel(5)-&gt;minutes();\n</code></pre>"},{"location":"TESTING_STRATEGY/#continuous-integration","title":"Continuous Integration","text":""},{"location":"TESTING_STRATEGY/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code>name: Tests\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n      - name: Install Dependencies\n        run: composer install\n      - name: Run Tests\n        run: php artisan test --parallel\n      - name: Upload Coverage\n        uses: codecov/codecov-action@v1\n</code></pre>"},{"location":"TESTING_STRATEGY/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<pre><code>#!/bin/sh\n# .git/hooks/pre-commit\n\n# Run tests before commit\nphp artisan test --testsuite=Unit --stop-on-failure\n\n# Check code style\n./vendor/bin/pint --test\n</code></pre>"},{"location":"TESTING_STRATEGY/#test-scenarios","title":"Test Scenarios","text":""},{"location":"TESTING_STRATEGY/#critical-business-flows","title":"Critical Business Flows","text":""},{"location":"TESTING_STRATEGY/#1-appointment-booking-flow","title":"1. Appointment Booking Flow","text":"<pre><code>1. Receive Retell webhook (call ended)\n2. Extract customer information\n3. Check availability via Cal.com\n4. Create appointment\n5. Send confirmation email\n</code></pre>"},{"location":"TESTING_STRATEGY/#2-webhook-deduplication","title":"2. Webhook Deduplication","text":"<pre><code>1. Receive duplicate webhook\n2. Check Redis for existing key\n3. Return cached response\n4. Verify no duplicate processing\n</code></pre>"},{"location":"TESTING_STRATEGY/#3-multi-tenancy-isolation","title":"3. Multi-Tenancy Isolation","text":"<pre><code>1. Create data for Company A\n2. Create data for Company B\n3. Verify Company A cannot access Company B data\n4. Test with different user contexts\n</code></pre>"},{"location":"TESTING_STRATEGY/#error-scenarios","title":"Error Scenarios","text":""},{"location":"TESTING_STRATEGY/#1-external-api-failures","title":"1. External API Failures","text":"<ul> <li>Cal.com timeout</li> <li>Retell.ai rate limit</li> <li>Network errors</li> <li>Invalid responses</li> </ul>"},{"location":"TESTING_STRATEGY/#2-data-integrity","title":"2. Data Integrity","text":"<ul> <li>Concurrent bookings</li> <li>Race conditions</li> <li>Transaction rollbacks</li> <li>Lock timeouts</li> </ul>"},{"location":"TESTING_STRATEGY/#3-security","title":"3. Security","text":"<ul> <li>Invalid signatures</li> <li>Unauthorized access</li> <li>SQL injection attempts</li> <li>XSS prevention</li> </ul>"},{"location":"TESTING_STRATEGY/#performance-benchmarks","title":"Performance Benchmarks","text":""},{"location":"TESTING_STRATEGY/#response-time-targets","title":"Response Time Targets","text":"<ul> <li>API endpoints: &lt; 200ms (p95)</li> <li>Webhook processing: &lt; 100ms</li> <li>Database queries: &lt; 50ms</li> <li>External API calls: &lt; 2s with timeout</li> </ul>"},{"location":"TESTING_STRATEGY/#load-testing","title":"Load Testing","text":"<pre><code># Using Apache Bench\nab -n 1000 -c 10 https://api.askproai.de/api/health\n\n# Using Locust\nlocust -f tests/LoadTests/booking_flow.py --host=https://api.askproai.de\n</code></pre>"},{"location":"TESTING_STRATEGY/#test-maintenance","title":"Test Maintenance","text":""},{"location":"TESTING_STRATEGY/#best-practices","title":"Best Practices","text":"<ol> <li>Keep tests fast: Use mocks, avoid sleep()</li> <li>Keep tests isolated: No dependencies between tests</li> <li>Keep tests readable: Clear names, arrange-act-assert</li> <li>Keep tests maintainable: Use factories, avoid hardcoded values</li> </ol>"},{"location":"TESTING_STRATEGY/#regular-tasks","title":"Regular Tasks","text":"<ul> <li>Weekly: Review failing tests</li> <li>Monthly: Update test data</li> <li>Quarterly: Performance baseline update</li> <li>Yearly: Test strategy review</li> </ul>"},{"location":"TESTING_STRATEGY/#debugging-failed-tests","title":"Debugging Failed Tests","text":""},{"location":"TESTING_STRATEGY/#local-debugging","title":"Local Debugging","text":"<pre><code># Run specific test with details\nphp artisan test --filter=test_can_book_appointment -vvv\n\n# Stop on first failure\nphp artisan test --stop-on-failure\n\n# With Xdebug\nXDEBUG_MODE=debug php artisan test\n</code></pre>"},{"location":"TESTING_STRATEGY/#ci-debugging","title":"CI Debugging","text":"<ul> <li>Check GitHub Actions logs</li> <li>Download artifacts</li> <li>Re-run with SSH access</li> <li>Use <code>ray()</code> for debugging</li> </ul>"},{"location":"TESTING_STRATEGY/#coverage-requirements","title":"Coverage Requirements","text":""},{"location":"TESTING_STRATEGY/#minimum-coverage","title":"Minimum Coverage","text":"<ul> <li>Overall: 80%</li> <li>Critical paths: 95%</li> <li>New code: 90%</li> </ul>"},{"location":"TESTING_STRATEGY/#coverage-reports","title":"Coverage Reports","text":"<pre><code># Generate HTML report\nphp artisan test --coverage-html coverage\n\n# Generate Clover report\nphp artisan test --coverage-clover coverage.xml\n</code></pre>"},{"location":"TESTING_STRATEGY/#testing-checklist","title":"Testing Checklist","text":""},{"location":"TESTING_STRATEGY/#before-deployment","title":"Before Deployment","text":"<ul> <li> All tests passing</li> <li> Coverage meets requirements</li> <li> Performance tests pass</li> <li> Security tests pass</li> <li> E2E tests pass</li> <li> No console.log or dd() statements</li> <li> Mocks disabled for production</li> </ul>"},{"location":"TESTING_STRATEGY/#after-deployment","title":"After Deployment","text":"<ul> <li> Smoke tests pass</li> <li> Health checks green</li> <li> No error spike in logs</li> <li> Performance metrics normal</li> </ul> <p>Last Updated: 2025-06-17</p>"},{"location":"TROUBLESHOOTING_GUIDE/","title":"AskProAI Troubleshooting Guide","text":""},{"location":"TROUBLESHOOTING_GUIDE/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"TROUBLESHOOTING_GUIDE/#1-booking-flow-issues","title":"1. Booking Flow Issues","text":""},{"location":"TROUBLESHOOTING_GUIDE/#problem-time-slot-no-longer-available-error","title":"Problem: \"Time slot no longer available\" error","text":"<p>Symptoms: - Customer gets error when trying to book - Slot was shown as available but booking fails</p> <p>Possible Causes: 1. Race condition - another booking took the slot 2. Stale cache data 3. Cal.com sync delay</p> <p>Solutions: <pre><code>-- Check for stuck locks\nSELECT * FROM appointment_locks \nWHERE expires_at &lt; NOW() \nAND branch_id = ?;\n\n-- Clean expired locks\nDELETE FROM appointment_locks WHERE expires_at &lt; NOW();\n</code></pre></p> <pre><code># Clear availability cache\nphp artisan cache:clear --tags=availability\n\n# Force Cal.com sync\nphp artisan calcom:sync-availability --branch=1\n</code></pre>"},{"location":"TROUBLESHOOTING_GUIDE/#problem-duplicate-bookings-created","title":"Problem: Duplicate bookings created","text":"<p>Symptoms: - Same appointment appears multiple times - Customer receives multiple confirmations</p> <p>Possible Causes: 1. Webhook processed multiple times 2. Frontend retry without idempotency 3. Queue worker issues</p> <p>Solutions: <pre><code># Check webhook deduplication\nredis-cli\n&gt; KEYS webhook:processing:*\n&gt; TTL webhook:processing:xyz\n\n# Check for duplicate webhooks in logs\ngrep \"Webhook already processed\" storage/logs/laravel.log | tail -20\n\n# Manually mark webhook as processed\nphp artisan webhook:mark-processed &lt;idempotency-key&gt;\n</code></pre></p>"},{"location":"TROUBLESHOOTING_GUIDE/#2-calcom-integration-issues","title":"2. Cal.com Integration Issues","text":""},{"location":"TROUBLESHOOTING_GUIDE/#problem-calcom-api-returns-403-forbidden","title":"Problem: Cal.com API returns 403 Forbidden","text":"<p>Symptoms: - All Cal.com requests fail - V1 API calls return 403</p> <p>Possible Causes: 1. Using V1 API with V2-only key 2. API key expired 3. IP not whitelisted</p> <p>Solutions: <pre><code># Test V2 API connection\nphp artisan tinker\n&gt;&gt;&gt; $service = new \\App\\Services\\CalcomV2Service();\n&gt;&gt;&gt; $service-&gt;testConnection();\n\n# Check API key format\n&gt;&gt;&gt; starts_with(config('services.calcom.api_key'), 'cal_live_');\n\n# Force V2 usage\n&gt;&gt;&gt; config(['services.calcom.force_v2' =&gt; true]);\n</code></pre></p>"},{"location":"TROUBLESHOOTING_GUIDE/#problem-calcom-sync-failing","title":"Problem: Cal.com sync failing","text":"<p>Symptoms: - Event types not updating - Availability out of sync - Bookings not appearing</p> <p>Possible Causes: 1. Circuit breaker open 2. Rate limiting 3. Network issues</p> <p>Solutions: <pre><code># Check circuit breaker status\nphp artisan circuit-breaker:status calcom\n\n# Reset circuit breaker\nphp artisan circuit-breaker:reset calcom\n\n# Check rate limit headers\ncurl -I -H \"Authorization: Bearer cal_live_xxx\" \\\n  https://api.cal.com/v2/event-types\n\n# Manual sync with debug\nphp artisan calcom:sync --debug --verbose\n</code></pre></p>"},{"location":"TROUBLESHOOTING_GUIDE/#3-retellai-integration-issues","title":"3. Retell.ai Integration Issues","text":""},{"location":"TROUBLESHOOTING_GUIDE/#problem-calls-not-importing","title":"Problem: Calls not importing","text":"<p>Symptoms: - No calls showing in dashboard - Webhooks not received - \"Anrufe abrufen\" button doesn't work</p> <p>Possible Causes: 1. Webhook not registered in Retell 2. Signature verification failing 3. Queue workers not running</p> <p>Solutions: <pre><code># Check if webhooks are being received\ntail -f storage/logs/laravel.log | grep -i retell\n\n# Test Retell API connection\nphp artisan retell:test-connection\n\n# Manual import of calls\nphp artisan retell:import-calls --days=7\n\n# Check webhook signature\ncurl -X POST http://localhost:8000/api/retell/webhook \\\n  -H \"x-retell-signature: test\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"event\":\"call_ended\",\"call_id\":\"test\"}'\n</code></pre></p>"},{"location":"TROUBLESHOOTING_GUIDE/#problem-agent-provisioning-fails","title":"Problem: Agent provisioning fails","text":"<p>Symptoms: - \"Failed to create agent\" error - Agent status stuck in \"provisioning\"</p> <p>Possible Causes: 1. Branch validation failing 2. Missing required data 3. API quota exceeded</p> <p>Solutions: <pre><code>// Test provisioning validation\n$branch = Branch::find(1);\n$validator = new \\App\\Services\\Provisioning\\ProvisioningValidator();\n$result = $validator-&gt;validateBranch($branch);\ndd($result-&gt;toArray());\n\n// Check for missing data\n&gt;&gt;&gt; $branch-&gt;services()-&gt;count();\n&gt;&gt;&gt; $branch-&gt;business_hours;\n&gt;&gt;&gt; $branch-&gt;phone_number;\n\n// Manual agent creation\n$provisioner = new \\App\\Services\\Provisioning\\RetellAgentProvisioner();\n$result = $provisioner-&gt;createAgentForBranch($branch);\n</code></pre></p>"},{"location":"TROUBLESHOOTING_GUIDE/#4-performance-issues","title":"4. Performance Issues","text":""},{"location":"TROUBLESHOOTING_GUIDE/#problem-slow-dashboard-loading","title":"Problem: Slow dashboard loading","text":"<p>Symptoms: - Dashboard takes &gt; 5 seconds to load - Timeout errors - High server load</p> <p>Possible Causes: 1. Missing database indexes 2. N+1 queries 3. No caching</p> <p>Solutions: <pre><code># Check slow queries\nphp artisan askproai:performance-monitor --slow-queries\n\n# Analyze specific query\nEXPLAIN SELECT * FROM appointments WHERE company_id = 1;\n\n# Add missing indexes\nphp artisan migrate --path=database/migrations/2025_06_17_add_performance_critical_indexes.php\n\n# Enable query log\nDB::enableQueryLog();\n// ... run slow operation ...\ndd(DB::getQueryLog());\n</code></pre></p>"},{"location":"TROUBLESHOOTING_GUIDE/#5-queueworker-issues","title":"5. Queue/Worker Issues","text":""},{"location":"TROUBLESHOOTING_GUIDE/#problem-jobs-not-processing","title":"Problem: Jobs not processing","text":"<p>Symptoms: - Webhooks queued but not processed - Emails not sending - Background tasks stuck</p> <p>Possible Causes: 1. Horizon not running 2. Redis connection issue 3. Jobs failing silently</p> <p>Solutions: <pre><code># Check Horizon status\nphp artisan horizon:status\n\n# Start Horizon\nphp artisan horizon\n\n# Check failed jobs\nphp artisan queue:failed\n\n# Retry failed jobs\nphp artisan queue:retry all\n\n# Monitor queue sizes\nredis-cli\n&gt; LLEN queues:webhooks\n&gt; LLEN queues:default\n\n# Clear stuck jobs\nphp artisan queue:clear webhooks\n</code></pre></p>"},{"location":"TROUBLESHOOTING_GUIDE/#6-multi-tenancy-issues","title":"6. Multi-Tenancy Issues","text":""},{"location":"TROUBLESHOOTING_GUIDE/#problem-data-leaking-between-companies","title":"Problem: Data leaking between companies","text":"<p>Symptoms: - Company A sees Company B's data - Appointments showing for wrong company</p> <p>Possible Causes: 1. Missing company_id scope 2. Global scope disabled 3. Raw queries without tenant filter</p> <p>Solutions: <pre><code>// Check if model has scope\n&gt;&gt;&gt; $model = new \\App\\Models\\Appointment();\n&gt;&gt;&gt; $model-&gt;getGlobalScopes();\n\n// Test tenant isolation\n&gt;&gt;&gt; auth()-&gt;user()-&gt;company_id = 1;\n&gt;&gt;&gt; Appointment::count(); // Should only show company 1\n&gt;&gt;&gt; auth()-&gt;user()-&gt;company_id = 2;\n&gt;&gt;&gt; Appointment::count(); // Should only show company 2\n\n// Find queries without scope\ngrep -r \"whereRaw\\|DB::raw\\|DB::select\" app/\n</code></pre></p>"},{"location":"TROUBLESHOOTING_GUIDE/#7-email-issues","title":"7. Email Issues","text":""},{"location":"TROUBLESHOOTING_GUIDE/#problem-confirmation-emails-not-sending","title":"Problem: Confirmation emails not sending","text":"<p>Symptoms: - No email after booking - Emails in queue but not sent</p> <p>Possible Causes: 1. SMTP configuration wrong 2. Email queued but worker not running 3. Template rendering error</p> <p>Solutions: <pre><code># Test email configuration\nphp artisan tinker\n&gt;&gt;&gt; Mail::raw('Test', fn($m) =&gt; $m-&gt;to('test@example.com')-&gt;subject('Test'));\n\n# Check mail queue\nphp artisan queue:work --queue=emails --tries=1\n\n# Preview email template\n&gt;&gt;&gt; $appointment = Appointment::first();\n&gt;&gt;&gt; return new \\App\\Mail\\AppointmentConfirmation($appointment);\n</code></pre></p>"},{"location":"TROUBLESHOOTING_GUIDE/#8-securityauthentication-issues","title":"8. Security/Authentication Issues","text":""},{"location":"TROUBLESHOOTING_GUIDE/#problem-api-returns-401-unauthorized","title":"Problem: API returns 401 Unauthorized","text":"<p>Symptoms: - Valid token rejected - Can't access protected routes</p> <p>Possible Causes: 1. Token expired 2. Wrong token type 3. Sanctum not configured</p> <p>Solutions: <pre><code># Check token\ncurl -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  http://localhost:8000/api/user\n\n# Generate new token\nphp artisan tinker\n&gt;&gt;&gt; $user = User::first();\n&gt;&gt;&gt; $user-&gt;createToken('api')-&gt;plainTextToken;\n\n# Check Sanctum config\n&gt;&gt;&gt; config('sanctum.guard');\n&gt;&gt;&gt; config('auth.guards.sanctum');\n</code></pre></p>"},{"location":"TROUBLESHOOTING_GUIDE/#monitoring-commands","title":"Monitoring Commands","text":""},{"location":"TROUBLESHOOTING_GUIDE/#health-checks","title":"Health Checks","text":"<pre><code># Overall system health\ncurl https://api.askproai.de/health\n\n# Cal.com integration health\ncurl https://api.askproai.de/health/calcom\n\n# Database health\nphp artisan db:show\n</code></pre>"},{"location":"TROUBLESHOOTING_GUIDE/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Real-time performance monitor\nphp artisan askproai:performance-monitor --live\n\n# Generate performance report\nphp artisan askproai:performance-monitor --report &gt; performance.json\n\n# Check specific metrics\nphp artisan askproai:performance-monitor --metric=response_time\n</code></pre>"},{"location":"TROUBLESHOOTING_GUIDE/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable debug logging for booking flow\nBOOKING_DEBUG=true php artisan serve\n\n# Enable SQL query logging\nDB_LOG_QUERIES=true php artisan serve\n\n# Verbose webhook processing\nWEBHOOK_DEBUG=true php artisan horizon\n</code></pre>"},{"location":"TROUBLESHOOTING_GUIDE/#emergency-procedures","title":"Emergency Procedures","text":""},{"location":"TROUBLESHOOTING_GUIDE/#1-system-overload","title":"1. System Overload","text":"<pre><code># Disable non-critical features\nphp artisan down --allow=127.0.0.1\n\n# Scale down workers\nphp artisan horizon:pause\n\n# Clear caches\nphp artisan optimize:clear\n\n# Emergency mode\ntouch storage/framework/emergency\n</code></pre>"},{"location":"TROUBLESHOOTING_GUIDE/#2-database-issues","title":"2. Database Issues","text":"<pre><code># Check connections\nphp artisan db:show\n\n# Kill long-running queries\nmysql -e \"SHOW PROCESSLIST\" | grep -v Sleep\nmysql -e \"KILL QUERY &lt;process_id&gt;\"\n\n# Reset connection pool\nphp artisan db:reconnect\n</code></pre>"},{"location":"TROUBLESHOOTING_GUIDE/#3-api-outages","title":"3. API Outages","text":"<pre><code># Enable fallback mode\nphp artisan config:set services.calcom.fallback_enabled true\n\n# Use cached data only\nphp artisan config:set services.calcom.cache_only true\n\n# Disable external APIs temporarily\ntouch storage/framework/maintenance/calcom\n</code></pre>"},{"location":"TROUBLESHOOTING_GUIDE/#log-locations","title":"Log Locations","text":"<ul> <li>Application Logs: <code>/storage/logs/laravel.log</code></li> <li>Queue Logs: <code>/storage/logs/horizon.log</code></li> <li>Web Server Logs: <code>/var/log/nginx/error.log</code></li> <li>PHP Logs: <code>/var/log/php-fpm/error.log</code></li> <li>Database Logs: <code>/var/log/mysql/error.log</code></li> </ul>"},{"location":"TROUBLESHOOTING_GUIDE/#getting-help","title":"Getting Help","text":""},{"location":"TROUBLESHOOTING_GUIDE/#internal-resources","title":"Internal Resources","text":"<ul> <li>Slack: #askproai-tech</li> <li>Wiki: https://wiki.askproai.internal</li> <li>Monitoring: https://monitoring.askproai.de</li> </ul>"},{"location":"TROUBLESHOOTING_GUIDE/#external-support","title":"External Support","text":"<ul> <li>Cal.com Support: support@cal.com</li> <li>Retell.ai Support: support@retellai.com</li> <li>Laravel Discord: https://discord.gg/laravel</li> </ul> <p>Last Updated: 2025-06-17</p>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/","title":"Universal Multi-Tenant, Multi-Location Booking System","text":""},{"location":"UNIVERSAL_BOOKING_SYSTEM/#overview","title":"Overview","text":"<p>The Universal Booking System is a comprehensive solution for handling appointment bookings across multiple tenants (companies) and their various locations (branches). It intelligently routes customers to the most suitable branch and staff member based on various criteria including location, service requirements, availability, and preferences.</p>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#key-features","title":"Key Features","text":""},{"location":"UNIVERSAL_BOOKING_SYSTEM/#1-intelligent-phone-number-resolution","title":"1. Intelligent Phone Number Resolution","text":"<ul> <li>Maps incoming calls to specific branches or companies</li> <li>Multiple resolution methods with confidence scoring:</li> <li>Metadata-based (100% confidence)</li> <li>Phone number mapping (90% confidence)</li> <li>Agent ID mapping (80% confidence)</li> <li>Caller history (70% confidence)</li> <li>Fallback resolution (30% confidence)</li> </ul>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#2-multi-branch-support","title":"2. Multi-Branch Support","text":"<ul> <li>Customers can book at any branch offering their required service</li> <li>Cross-branch availability checking</li> <li>Mobile staff who work at multiple locations</li> <li>Branch selection based on various strategies</li> </ul>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#3-smart-staff-matching","title":"3. Smart Staff Matching","text":"<ul> <li>Skill-based matching for services</li> <li>Language preference support</li> <li>Experience and rating consideration</li> <li>Workload balancing</li> <li>Customer preference memory</li> </ul>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#4-flexible-branch-selection-strategies","title":"4. Flexible Branch Selection Strategies","text":"<ul> <li>Nearest Location: Prioritizes geographic proximity</li> <li>First Available: Books at branch with earliest slot</li> <li>Load Balanced: Distributes bookings evenly</li> </ul>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#architecture-components","title":"Architecture Components","text":""},{"location":"UNIVERSAL_BOOKING_SYSTEM/#core-services","title":"Core Services","text":""},{"location":"UNIVERSAL_BOOKING_SYSTEM/#universalbookingorchestrator","title":"UniversalBookingOrchestrator","text":"<p>The main orchestrator that coordinates the entire booking flow: <pre><code>$orchestrator = app(UniversalBookingOrchestrator::class);\n$result = $orchestrator-&gt;processBookingRequest($bookingData, $context);\n</code></pre></p>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#phonenumberresolver","title":"PhoneNumberResolver","text":"<p>Enhanced resolver for multi-location scenarios: <pre><code>$resolver = app(PhoneNumberResolver::class);\n$context = $resolver-&gt;resolveFromWebhook($webhookData);\n// Returns: branch_id, company_id, agent_id, resolution_method, confidence\n</code></pre></p>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#staffservicematcher","title":"StaffServiceMatcher","text":"<p>Intelligent staff selection based on requirements: <pre><code>$matcher = app(StaffServiceMatcher::class);\n$eligibleStaff = $matcher-&gt;findEligibleStaff($branch, $serviceRequirements);\n</code></pre></p>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#unifiedavailabilityservice","title":"UnifiedAvailabilityService","text":"<p>Aggregates availability across branches and staff: <pre><code>$availability = app(UnifiedAvailabilityService::class);\n$slots = $availability-&gt;getMultiBranchAvailability($branches, $requirements, $dateRange);\n</code></pre></p>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#branch-selection-strategies","title":"Branch Selection Strategies","text":"<p>Strategies implement <code>BranchSelectionStrategyInterface</code>:</p> <pre><code>interface BranchSelectionStrategyInterface\n{\n    public function selectBranches(array $branches, Customer $customer, array $serviceRequirements): array;\n    public function getName(): string;\n}\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#configuration","title":"Configuration","text":""},{"location":"UNIVERSAL_BOOKING_SYSTEM/#environment-variables","title":"Environment Variables","text":"<pre><code># Branch Selection Strategy\nBOOKING_BRANCH_STRATEGY=nearest  # Options: nearest, first_available, load_balanced\n\n# Time Constraints\nBOOKING_MIN_ADVANCE=60          # Minimum advance booking (minutes)\nBOOKING_MAX_ADVANCE=90          # Maximum advance booking (days)\nBOOKING_DEFAULT_DURATION=30     # Default appointment duration\nBOOKING_BUFFER_TIME=15          # Buffer between appointments\nBOOKING_SLOT_INTERVAL=15        # Time slot intervals\n\n# Multi-Location\nBOOKING_CROSS_BRANCH=true       # Enable cross-branch booking\nBOOKING_MAX_DISTANCE=50         # Max distance for suggestions (km)\nBOOKING_MOBILE_STAFF=true       # Consider mobile staff\n\n# Customer Preferences\nBOOKING_REMEMBER_BRANCH=true    # Remember preferred branch\nBOOKING_REMEMBER_STAFF=true     # Remember preferred staff\nBOOKING_PREFERENCE_WEIGHT=0.7   # Weight for preferences (0-1)\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#configuration-file","title":"Configuration File","text":"<p>Located at <code>config/booking.php</code>:</p> <pre><code>return [\n    'default_branch_strategy' =&gt; env('BOOKING_BRANCH_STRATEGY', 'nearest'),\n    'time_constraints' =&gt; [\n        'min_advance_booking' =&gt; 60,\n        'max_advance_booking' =&gt; 90,\n        'default_duration' =&gt; 30,\n        'buffer_time' =&gt; 15,\n        'slot_interval' =&gt; 15,\n    ],\n    'multi_location' =&gt; [\n        'enable_cross_branch' =&gt; true,\n        'max_distance_km' =&gt; 50,\n        'enable_mobile_staff' =&gt; true,\n    ],\n    // ... more configuration\n];\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#database-schema-enhancements","title":"Database Schema Enhancements","text":""},{"location":"UNIVERSAL_BOOKING_SYSTEM/#customer-preferences","title":"Customer Preferences","text":"<pre><code>customers\n  - preferred_branch_id (UUID, nullable)\n  - preferred_staff_id (UUID, nullable)\n  - location_data (JSON - city, postal_code, coordinates)\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#staff-capabilities","title":"Staff Capabilities","text":"<pre><code>staff\n  - skills (JSON array)\n  - languages (JSON array, default: ['de'])\n  - mobility_radius_km (integer)\n  - specializations (JSON array)\n  - average_rating (decimal)\n  - certifications (JSON array)\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#service-requirements","title":"Service Requirements","text":"<pre><code>services\n  - required_skills (JSON array)\n  - required_certifications (JSON array)\n  - complexity_level (enum: basic, intermediate, advanced, expert)\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#branch-features","title":"Branch Features","text":"<pre><code>branches\n  - coordinates (JSON - lat, lng)\n  - service_radius_km (integer)\n  - accepts_walkins (boolean)\n  - parking_available (boolean)\n  - public_transport_access (text)\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#multi-branch-staff","title":"Multi-Branch Staff","text":"<pre><code>staff_branches (junction table)\n  - staff_id\n  - branch_id\n  - is_primary (boolean)\n  - working_days (JSON)\n  - travel_compensation (decimal)\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#usage-examples","title":"Usage Examples","text":""},{"location":"UNIVERSAL_BOOKING_SYSTEM/#basic-booking-request","title":"Basic Booking Request","text":"<pre><code>$bookingRequest = [\n    'company_id' =&gt; $companyId,\n    'service_name' =&gt; 'Haircut',\n    'date' =&gt; '2025-06-20',\n    'time' =&gt; '14:00',\n    'customer' =&gt; [\n        'name' =&gt; 'John Doe',\n        'phone' =&gt; '+49 30 12345678',\n        'email' =&gt; 'john@example.com'\n    ]\n];\n\n$result = $orchestrator-&gt;processBookingRequest($bookingRequest);\n\nif ($result['success']) {\n    $appointment = $result['appointment'];\n    echo \"Booked at {$appointment-&gt;branch-&gt;name} with {$appointment-&gt;staff-&gt;name}\";\n}\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#with-specific-preferences","title":"With Specific Preferences","text":"<pre><code>$bookingRequest = [\n    'company_id' =&gt; $companyId,\n    'branch_id' =&gt; $preferredBranchId,  // Optional: specific branch\n    'service_id' =&gt; $serviceId,\n    'date' =&gt; '2025-06-20',\n    'time' =&gt; '14:00',\n    'staff_preference' =&gt; 'Maria',      // Optional: preferred staff name\n    'language' =&gt; 'en',                 // Optional: language preference\n    'customer' =&gt; [\n        'name' =&gt; 'John Doe',\n        'phone' =&gt; '+49 30 12345678'\n    ]\n];\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#phone-webhook-integration","title":"Phone Webhook Integration","text":"<pre><code>// In RetellWebhookHandler\n$phoneResolver = app(PhoneNumberResolver::class);\n$context = $phoneResolver-&gt;resolveFromWebhook($webhookData);\n\n$bookingRequest = [\n    'company_id' =&gt; $context['company_id'],\n    'branch_id' =&gt; $context['branch_id'],\n    // ... rest of booking data from webhook\n];\n\n$result = $orchestrator-&gt;processBookingRequest($bookingRequest, $context);\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#flow-diagram","title":"Flow Diagram","text":"<pre><code>Phone Call \u2192 Retell.ai\n    \u2193\nWebhook \u2192 PhoneNumberResolver\n    \u2193\nResolve Company/Branch Context\n    \u2193\nUniversalBookingOrchestrator\n    \u251c\u2500\u2500 Find/Create Customer\n    \u251c\u2500\u2500 Analyze Service Requirements\n    \u251c\u2500\u2500 Select Suitable Branches (Strategy)\n    \u251c\u2500\u2500 Find Eligible Staff (Matcher)\n    \u251c\u2500\u2500 Check Availability (Unified Service)\n    \u251c\u2500\u2500 Score &amp; Select Optimal Option\n    \u251c\u2500\u2500 Create Appointment\n    \u251c\u2500\u2500 Sync with Cal.com\n    \u2514\u2500\u2500 Send Notifications\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#advanced-features","title":"Advanced Features","text":""},{"location":"UNIVERSAL_BOOKING_SYSTEM/#custom-branch-selection-strategy","title":"Custom Branch Selection Strategy","text":"<pre><code>class PreferredPartnerStrategy implements BranchSelectionStrategyInterface\n{\n    public function selectBranches(array $branches, Customer $customer, array $serviceRequirements): array\n    {\n        // Custom logic to prioritize partner branches\n        return array_filter($branches, function($branch) {\n            return $branch-&gt;metadata['is_partner'] ?? false;\n        });\n    }\n\n    public function getName(): string\n    {\n        return 'preferred_partner';\n    }\n}\n\n// Register in service provider\n$orchestrator-&gt;setBranchSelectionStrategy(new PreferredPartnerStrategy());\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#staff-skill-matching","title":"Staff Skill Matching","text":"<pre><code>// Define service with requirements\n$service-&gt;update([\n    'required_skills' =&gt; ['color_specialist', 'senior_stylist'],\n    'complexity_level' =&gt; 'advanced'\n]);\n\n// Staff with matching skills\n$staff-&gt;update([\n    'skills' =&gt; ['color_specialist', 'senior_stylist', 'makeup_artist'],\n    'certifications' =&gt; ['Wella Color Expert', 'L\\'Oreal Professional']\n]);\n\n// The system automatically matches staff to service requirements\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#multi-language-support","title":"Multi-Language Support","text":"<pre><code>// Customer speaks Turkish\n$bookingRequest['language'] = 'tr';\n\n// System finds staff who speak Turkish\n$staff-&gt;languages = ['de', 'en', 'tr'];  // Will be preferred\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#monitoring-debugging","title":"Monitoring &amp; Debugging","text":""},{"location":"UNIVERSAL_BOOKING_SYSTEM/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code>BOOKING_DEBUG=true\nBOOKING_LOG_AVAILABILITY=true\nBOOKING_LOG_BRANCHES=true\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#check-resolution-confidence","title":"Check Resolution Confidence","text":"<pre><code>Log::info('Phone resolution', [\n    'method' =&gt; $context['resolution_method'],\n    'confidence' =&gt; $context['confidence'],\n    'branch_id' =&gt; $context['branch_id']\n]);\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#availability-debugging","title":"Availability Debugging","text":"<pre><code>$availabilityService-&gt;clearStaffAvailabilityCache($staff);\n$slots = $availabilityService-&gt;getStaffAvailability($staff, $dateRange, 30);\nLog::info('Available slots', ['count' =&gt; count($slots), 'slots' =&gt; $slots]);\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Caching: Availability data is cached for 5 minutes by default</li> <li>Eager Loading: Relationships are loaded to prevent N+1 queries</li> <li>Async Processing: Webhooks are processed asynchronously</li> <li>Connection Pooling: Database connections are pooled</li> <li>Rate Limiting: API endpoints have adaptive rate limiting</li> </ol>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#security-features","title":"Security Features","text":"<ol> <li>Webhook Signature Verification: All webhooks are verified</li> <li>Multi-Tenancy Isolation: Data is automatically scoped by company</li> <li>Input Validation: Phone numbers and other inputs are validated</li> <li>SQL Injection Prevention: Using parameterized queries</li> <li>API Rate Limiting: Prevents abuse and DDoS</li> </ol>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>AI-Powered Predictions: Predict no-shows and optimize overbooking</li> <li>Dynamic Pricing: Adjust prices based on demand and time</li> <li>Route Optimization: For mobile service providers</li> <li>Customer Scoring: Prioritize reliable customers</li> <li>Automated Rescheduling: Handle cancellations intelligently</li> <li>Multi-Provider Marketplace: Book across different companies</li> </ol>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#troubleshooting","title":"Troubleshooting","text":""},{"location":"UNIVERSAL_BOOKING_SYSTEM/#common-issues","title":"Common Issues","text":"<ol> <li>\"Could not resolve company\"</li> <li>Check phone number mapping in <code>phone_numbers</code> table</li> <li>Verify branch <code>phone_number</code> field</li> <li> <p>Check if branch is active</p> </li> <li> <p>\"No eligible staff found\"</p> </li> <li>Verify staff is active and assigned to branch</li> <li>Check service assignments in <code>staff_event_types</code></li> <li> <p>Verify skill requirements match</p> </li> <li> <p>\"No available slots\"</p> </li> <li>Check staff working hours</li> <li>Verify Cal.com integration</li> <li>Clear availability cache</li> </ol>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#debug-commands","title":"Debug Commands","text":"<pre><code># Test phone resolution\nphp artisan askproai:test-phone-resolution +49 30 12345678\n\n# Check branch availability\nphp artisan askproai:check-availability --branch=UUID --date=2025-06-20\n\n# Sync staff capabilities\nphp artisan askproai:sync-staff-capabilities\n\n# Clear booking caches\nphp artisan booking:clear-cache\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#api-endpoints","title":"API Endpoints","text":""},{"location":"UNIVERSAL_BOOKING_SYSTEM/#check-availability","title":"Check Availability","text":"<pre><code>POST /api/booking/check-availability\n{\n    \"company_id\": \"uuid\",\n    \"service_id\": \"uuid\",\n    \"date\": \"2025-06-20\",\n    \"branch_id\": \"uuid\" (optional)\n}\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#create-booking","title":"Create Booking","text":"<pre><code>POST /api/booking/create\n{\n    \"company_id\": \"uuid\",\n    \"service_id\": \"uuid\",\n    \"date\": \"2025-06-20\",\n    \"time\": \"14:00\",\n    \"customer\": {\n        \"name\": \"John Doe\",\n        \"phone\": \"+49 30 12345678\",\n        \"email\": \"john@example.com\"\n    },\n    \"preferences\": {\n        \"branch_id\": \"uuid\",\n        \"staff_name\": \"Maria\",\n        \"language\": \"en\"\n    }\n}\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_SYSTEM/#get-booking-options","title":"Get Booking Options","text":"<pre><code>POST /api/booking/options\n{\n    \"company_id\": \"uuid\",\n    \"service_id\": \"uuid\",\n    \"date_range\": {\n        \"start\": \"2025-06-20\",\n        \"end\": \"2025-06-27\"\n    },\n    \"location\": {\n        \"postal_code\": \"10115\",\n        \"city\": \"Berlin\"\n    }\n}\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/","title":"Universeller Multi-Tenant Telefon-zu-Termin Test Guide","text":""},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#ubersicht","title":"\u00dcbersicht","text":"<p>Dieses Dokument beschreibt, wie das universelle Buchungssystem f\u00fcr verschiedene Branchen und Multi-Location-Szenarien getestet werden kann.</p>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#systemarchitektur","title":"Systemarchitektur","text":""},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#kernkomponenten","title":"Kernkomponenten","text":"<ol> <li>PhoneNumberResolver - L\u00f6st Telefonnummern zu Branches/Companies auf</li> <li>HotlineRouter - Verwaltet Hotline-Anrufe mit Standortauswahl</li> <li>StaffSkillMatcher - Findet passende Mitarbeiter basierend auf Skills</li> <li>AlternativeSlotFinder - Schl\u00e4gt alternative Termine vor</li> <li>UniversalBookingOrchestrator - Koordiniert den gesamten Buchungsflow</li> </ol>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#datenmodell-erweiterungen","title":"Datenmodell-Erweiterungen","text":"<ul> <li>phone_numbers - Mapping von Telefonnummern zu Branches/Hotlines</li> <li>staff.skills/languages/certifications - Erweiterte Mitarbeiter-Eigenschaften</li> <li>customers.preferred_branch_id/staff_id - Kundenpr\u00e4ferenzen</li> <li>branches.coordinates/features - Multi-Location Features</li> </ul>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#test-szenarien","title":"Test-Szenarien","text":""},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#1-friseur-salon-demo-gmbh","title":"1. Friseur (Salon Demo GmbH)","text":"<p>Szenario: Einzelstandort mit spezialisierten Mitarbeitern</p> <p>Test-Daten: - Company: Salon Demo GmbH - Branch: Berlin Mitte - Telefon: +49 30 98765432 (Direktwahl) - Mitarbeiter:   - Anna Schmidt: Damenhaarschnitt, Extensions, F\u00e4rben (DE, EN)   - Max Weber: Herrenhaarschnitt (DE, EN, TR)   - Lisa M\u00fcller: Damenhaarschnitt, F\u00e4rben (DE, FR)</p> <p>Test-Flow: <pre><code>1. Anruf an +49 30 98765432\n2. \"Ich m\u00f6chte einen Termin f\u00fcr Damenhaarschnitt\"\n3. System pr\u00fcft verf\u00fcgbare Mitarbeiter (Anna oder Lisa)\n4. Bei Zeitkonflikt: Alternative Zeiten oder anderer Mitarbeiter\n5. Buchungsbest\u00e4tigung\n</code></pre></p> <p>Erwartetes Verhalten: - Nur Anna oder Lisa werden f\u00fcr Damenhaarschnitt vorgeschlagen - Max wird nicht vorgeschlagen (bietet Service nicht an) - Bei Sprachpr\u00e4ferenz Franz\u00f6sisch wird Lisa bevorzugt</p>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#2-fitness-studio-fitnow-gmbh","title":"2. Fitness-Studio (FitNow GmbH)","text":"<p>Szenario: Multi-Location mit Hotline</p> <p>Test-Daten: - Company: FitNow GmbH - Hotline: +49 40 11223344 - Branches:   - Hamburg City: +49 40 87654321   - Hamburg Altona: +49 40 76543210 - Services: Probetraining, Personal Training, Ern\u00e4hrungsberatung</p> <p>Test-Flow A - Hotline: <pre><code>1. Anruf an +49 40 11223344 (Hotline)\n2. \"F\u00fcr Hamburg City dr\u00fccken Sie die 1, f\u00fcr Altona die 2\"\n3. Kunde w\u00e4hlt 1\n4. \"Ich m\u00f6chte ein Probetraining vereinbaren\"\n5. System pr\u00fcft Verf\u00fcgbarkeit in Hamburg City\n6. Buchungsbest\u00e4tigung\n</code></pre></p> <p>Test-Flow B - Direktwahl: <pre><code>1. Anruf an +49 40 76543210 (Altona direkt)\n2. \"Ich suche einen Personal Trainer der Arabisch spricht\"\n3. System findet Ahmed Hassan (spricht AR, DE, EN)\n4. Terminvorschlag mit Ahmed\n5. Buchungsbest\u00e4tigung\n</code></pre></p> <p>Erwartetes Verhalten: - Hotline f\u00fchrt zu Standortauswahl - Direktwahl \u00fcberspringt Standortauswahl - Skill-Matching ber\u00fccksichtigt Sprachen und Spezialisierungen</p>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#3-askproai-munchen-test","title":"3. AskProAI M\u00fcnchen Test","text":"<p>Szenario: Test-Filiale f\u00fcr Entwicklung</p> <p>Test-Daten: - Branch: AskProAI M\u00fcnchen Test - Telefon: +49 89 12345678 - Services: Demo-Termin, Beratungsgespr\u00e4ch, Setup, Schulung</p> <p>Test-Flow: <pre><code>1. Anruf an +49 89 12345678\n2. \"Ich m\u00f6chte eine Demo vereinbaren\"\n3. System findet Dr. Test M\u00fcnchen\n4. Terminvorschlag\n5. Buchungsbest\u00e4tigung\n</code></pre></p>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#api-testing","title":"API Testing","text":""},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#function-call-test","title":"Function Call Test","text":"<pre><code># Test availability check\ncurl -X POST https://api.askproai.de/api/retell/function-call \\\n  -H \"Content-Type: application/json\" \\\n  -H \"x-retell-signature: YOUR_SIGNATURE\" \\\n  -d '{\n    \"function_name\": \"collect_appointment_data\",\n    \"parameters\": {\n      \"verfuegbarkeit_pruefen\": true,\n      \"datum\": \"25.06.2025\",\n      \"uhrzeit\": \"14:00 Uhr\",\n      \"dienstleistung\": \"Damenhaarschnitt\",\n      \"alternative_termine_gewuenscht\": true\n    },\n    \"call\": {\n      \"to_number\": \"+49 30 98765432\",\n      \"from_number\": \"+49 170 1234567\",\n      \"agent_id\": \"agent_salon_demo_berlin\"\n    }\n  }'\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#erwartete-response","title":"Erwartete Response","text":"<pre><code>{\n  \"success\": true,\n  \"verfuegbar\": false,\n  \"datum_geprueft\": \"25.06.2025\",\n  \"uhrzeit_geprueft\": \"14:00\",\n  \"alternative_termine\": \"heute um 15:00 Uhr, oder morgen um 14:00 Uhr\",\n  \"alternative_anzahl\": 2,\n  \"nachricht\": \"Der gew\u00fcnschte Termin ist leider nicht verf\u00fcgbar. Ich h\u00e4tte folgende Alternativen: heute um 15:00 Uhr, oder morgen um 14:00 Uhr\"\n}\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#debugging","title":"Debugging","text":""},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#1-phone-number-resolution","title":"1. Phone Number Resolution","text":"<pre><code>// Test phone number resolution\n$resolver = app(PhoneNumberResolver::class);\n$result = $resolver-&gt;resolveFromWebhook([\n    'to' =&gt; '+49 30 98765432',\n    'from' =&gt; '+49 170 1234567'\n]);\n\n// Result should contain:\n// - branch_id\n// - company_id\n// - resolution_method\n// - confidence score\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#2-staff-skill-matching","title":"2. Staff Skill Matching","text":"<pre><code>// Test staff matching\n$matcher = app(StaffSkillMatcher::class);\n$branch = Branch::find('branch-id');\n$staff = $matcher-&gt;findEligibleStaff($branch, [\n    'service_name' =&gt; 'Personal Training',\n    'language' =&gt; 'en'\n]);\n\n// Should return staff sorted by match score\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#3-alternative-slot-finding","title":"3. Alternative Slot Finding","text":"<pre><code>// Test alternative slots\n$finder = app(AlternativeSlotFinder::class);\n$alternatives = $finder-&gt;findAlternatives([\n    'branch_id' =&gt; 'branch-id',\n    'staff_id' =&gt; 'staff-id',\n    'date' =&gt; '2025-06-25',\n    'time' =&gt; '14:00',\n    'service_name' =&gt; 'Damenhaarschnitt',\n    'allow_other_branches' =&gt; true\n]);\n\n// Should return array of alternatives with scores\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#monitoring","title":"Monitoring","text":""},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#key-metrics","title":"Key Metrics","text":"<ol> <li>Phone Resolution Success Rate</li> <li>Target: &gt;95%</li> <li> <p>Monitor: Fallback usage</p> </li> <li> <p>Staff Match Rate</p> </li> <li>Target: &gt;90% find suitable staff</li> <li> <p>Monitor: No-match scenarios</p> </li> <li> <p>Alternative Acceptance Rate</p> </li> <li>Target: &gt;60% accept alternatives</li> <li>Monitor: Most accepted alternative types</li> </ol>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#logs-to-monitor","title":"Logs to Monitor","text":"<pre><code># Phone resolution logs\ngrep \"Branch resolved from\" storage/logs/laravel.log\n\n# Staff matching logs\ngrep \"Staff skill matching completed\" storage/logs/laravel.log\n\n# Alternative finding logs\ngrep \"alternatives found for slot\" storage/logs/laravel.log\n\n# Hotline routing logs\ngrep \"route_to_branch\" storage/logs/laravel.log\n</code></pre>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#common-issues","title":"Common Issues","text":""},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#issue-could-not-resolve-company-from-call-data","title":"Issue: \"Could not resolve company from call data\"","text":"<p>Ursache: Telefonnummer nicht in phone_numbers Tabelle L\u00f6sung:  <pre><code>INSERT INTO phone_numbers (company_id, branch_id, number, type, active)\nVALUES (company_id, branch_id, '+49...', 'direct', 1);\n</code></pre></p>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#issue-no-eligible-staff-found","title":"Issue: \"No eligible staff found\"","text":"<p>Ursache: Keine Mitarbeiter mit passenden Services/Skills L\u00f6sung:  - Pr\u00fcfen Sie staff_services Zuordnungen - Pr\u00fcfen Sie staff.active und staff.is_bookable</p>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#issue-no-alternatives-found","title":"Issue: \"No alternatives found\"","text":"<p>Ursache: Keine verf\u00fcgbaren Slots in Suchzeitraum L\u00f6sung: - Erweitern Sie den Suchzeitraum - Aktivieren Sie allow_other_branches</p>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#best-practices","title":"Best Practices","text":"<ol> <li>Phone Number Setup</li> <li>Immer mit L\u00e4ndercode (+49)</li> <li>Eindeutige Nummern pro Branch</li> <li> <p>Hotline f\u00fcr Multi-Location</p> </li> <li> <p>Staff Configuration</p> </li> <li>Skills vollst\u00e4ndig pflegen</li> <li>Sprachen angeben</li> <li> <p>Experience Level setzen</p> </li> <li> <p>Service Mapping</p> </li> <li>Services eindeutig benennen</li> <li>Staff-Service-Zuordnungen aktuell halten</li> <li> <p>Dauer realistisch setzen</p> </li> <li> <p>Testing</p> </li> <li>Verschiedene Tageszeiten testen</li> <li>Verschiedene Sprachen testen</li> <li>Edge Cases (keine Verf\u00fcgbarkeit) testen</li> </ol>"},{"location":"UNIVERSAL_BOOKING_TEST_GUIDE/#retellai-prompt-anpassung","title":"Retell.ai Prompt Anpassung","text":"<p>Der Prompt muss folgende Variablen unterst\u00fctzen:</p> <pre><code>{{company_name}} - Firmenname\n{{branch_name}} - Filialname (bei Multi-Location)\n{{services}} - Verf\u00fcgbare Services\n{{business_hours}} - \u00d6ffnungszeiten\n</code></pre> <p>Beispiel-Prompt-Struktur: <pre><code>Du bist der KI-Assistent von {{company_name}}.\n[Bei Multi-Location: Du nimmst Anrufe f\u00fcr {{branch_name}} entgegen.]\n\nVerf\u00fcgbare Services:\n{{services}}\n\n\u00d6ffnungszeiten:\n{{business_hours}}\n\nBei der Terminbuchung:\n1. Erfrage Service-Wunsch\n2. Erfrage Datum und Uhrzeit\n3. Pr\u00fcfe Verf\u00fcgbarkeit mit function call\n4. Biete Alternativen bei Bedarf\n5. Best\u00e4tige die Buchung\n</code></pre></p>"},{"location":"database_cleanup_plan/","title":"\ud83d\uddd1\ufe0f Datenbank-Bereinigungsplan","text":""},{"location":"database_cleanup_plan/#aktuelle-situation-119-tabellen","title":"\ud83d\udcca Aktuelle Situation: 119 Tabellen","text":""},{"location":"database_cleanup_plan/#zu-loschende-tabellen-99-tabellen","title":"\ud83d\udd34 ZU L\u00d6SCHENDE TABELLEN (99 Tabellen)","text":""},{"location":"database_cleanup_plan/#1-reservation-system-12-tabellen-komplett-entfernen","title":"1. Reservation System (12 Tabellen) - KOMPLETT ENTFERNEN","text":"<pre><code>reservation_accessories\nreservation_color_rules\nreservation_files\nreservation_guests\nreservation_instances\nreservation_reminders\nreservation_resources\nreservation_series\nreservation_statuses\nreservation_types\nreservation_users\nreservation_waitlist_requests\n</code></pre>"},{"location":"database_cleanup_plan/#2-resource-management-14-tabellen-nicht-benotigt","title":"2. Resource Management (14 Tabellen) - NICHT BEN\u00d6TIGT","text":"<pre><code>resources\nresource_accessories\nresource_group_assignment\nresource_groups\nresource_status_reasons\nresource_type_assignment\nresource_types\naccessories\nblackout_instances\nblackout_series\nblackout_series_resources\npeak_times\nquotas\nschedules\n</code></pre>"},{"location":"database_cleanup_plan/#3-oauth-system-5-tabellen-nicht-verwendet","title":"3. OAuth System (5 Tabellen) - NICHT VERWENDET","text":"<pre><code>oauth_access_tokens\noauth_auth_codes\noauth_clients\noauth_personal_access_clients\noauth_refresh_tokens\n</code></pre>"},{"location":"database_cleanup_plan/#4-announcement-system-3-tabellen-nicht-benotigt","title":"4. Announcement System (3 Tabellen) - NICHT BEN\u00d6TIGT","text":"<pre><code>announcements\nannouncement_groups\nannouncement_resources\n</code></pre>"},{"location":"database_cleanup_plan/#5-custom-attributes-4-tabellen-zu-komplex-fur-mvp","title":"5. Custom Attributes (4 Tabellen) - ZU KOMPLEX F\u00dcR MVP","text":"<pre><code>custom_attributes\ncustom_attribute_categories\ncustom_attribute_entities\ncustom_attribute_values\n</code></pre>"},{"location":"database_cleanup_plan/#6-user-management-overkill-8-tabellen","title":"6. User Management Overkill (8 Tabellen)","text":"<pre><code>user_email_preferences\nuser_groups\nuser_preferences\nuser_resource_permissions\nuser_session\nuser_statuses\ngroup_resource_permissions\ngroup_roles\n</code></pre>"},{"location":"database_cleanup_plan/#7-redundantealte-tabellen-20-tabellen","title":"7. Redundante/Alte Tabellen (20+ Tabellen)","text":"<pre><code>agents (verwenden branches.retell_agent_id)\naccount_activation\nactivity_log (zu detailliert)\napi_health_logs (nicht genutzt)\nbusiness_hours_templates (in branches integriert)\ncalendar_mappings (veraltet)\ncalendars (veraltet)\nconversion_targets\ndashboard_configurations\ndbversion\ndummy_companies\nevent_type_mappings (veraltet)\nkunden (Duplikat von customers)\nlaravel_users (Duplikat)\nlayouts\nmaster_services\nnotes\nnotification_log\nreseller_tenant\nroles_old\nsaved_reports\nslow_query_log\nstaff_branches_and_staff_services_tables\nstaff_service_assignments_backup\ntenants\ntests\ntime_blocks\nvalidation_results\n</code></pre>"},{"location":"database_cleanup_plan/#kern-tabellen-die-bleiben-20-tabellen","title":"\u2705 KERN-TABELLEN DIE BLEIBEN (20 Tabellen)","text":""},{"location":"database_cleanup_plan/#1-firmen-struktur-3","title":"1. Firmen &amp; Struktur (3)","text":"<ul> <li><code>companies</code> - Mandanten</li> <li><code>branches</code> - Filialen/Standorte</li> <li><code>phone_numbers</code> - Telefonnummern \u2192 Filialen</li> </ul>"},{"location":"database_cleanup_plan/#2-personen-3","title":"2. Personen (3)","text":"<ul> <li><code>users</code> - System-Benutzer</li> <li><code>staff</code> - Mitarbeiter</li> <li><code>customers</code> - Kunden</li> </ul>"},{"location":"database_cleanup_plan/#3-termine-anrufe-2","title":"3. Termine &amp; Anrufe (2)","text":"<ul> <li><code>appointments</code> - Termine</li> <li><code>calls</code> - Anrufe</li> </ul>"},{"location":"database_cleanup_plan/#4-services-zuordnungen-4","title":"4. Services &amp; Zuordnungen (4)","text":"<ul> <li><code>services</code> - Dienstleistungen</li> <li><code>staff_services</code> - Mitarbeiter \u2194 Services</li> <li><code>staff_event_types</code> - Mitarbeiter \u2194 Cal.com Events</li> <li><code>working_hours</code> - Arbeitszeiten</li> </ul>"},{"location":"database_cleanup_plan/#5-calcom-integration-3","title":"5. Cal.com Integration (3)","text":"<ul> <li><code>calcom_event_types</code> - Event Types</li> <li><code>calcom_bookings</code> - Buchungen</li> <li><code>calcom_sync_logs</code> - Sync Status</li> </ul>"},{"location":"database_cleanup_plan/#6-system-5","title":"6. System (5)","text":"<ul> <li><code>migrations</code> - Laravel Migrations</li> <li><code>jobs</code> - Queue Jobs</li> <li><code>failed_jobs</code> - Fehlgeschlagene Jobs</li> <li><code>cache</code> - Cache (optional)</li> <li><code>cache_locks</code> - Cache Locks (optional)</li> </ul>"},{"location":"database_cleanup_plan/#7-zugriff-sicherheit-3","title":"7. Zugriff &amp; Sicherheit (3)","text":"<ul> <li><code>permissions</code> - Berechtigungen</li> <li><code>roles</code> - Rollen</li> <li><code>role_has_permissions</code> - Rollen \u2194 Berechtigungen</li> <li><code>model_has_roles</code> - Model \u2194 Rollen</li> <li><code>model_has_permissions</code> - Model \u2194 Berechtigungen</li> </ul>"},{"location":"database_cleanup_plan/#8-bezahlung-spater-5","title":"8. Bezahlung (sp\u00e4ter) (5)","text":"<ul> <li><code>invoices</code> - Rechnungen</li> <li><code>billing_periods</code> - Abrechnungszeitr\u00e4ume</li> <li><code>company_pricing</code> - Firmen-Preise</li> <li><code>branch_pricing_overrides</code> - Filial-Preise</li> <li><code>payments</code> (sp\u00e4ter)</li> </ul>"},{"location":"database_cleanup_plan/#ergebnis","title":"\ud83d\udcc8 ERGEBNIS","text":"<ul> <li>Vorher: 119 Tabellen</li> <li>Nachher: 20 Kern-Tabellen</li> <li>Reduzierung: 83% weniger Komplexit\u00e4t!</li> </ul>"},{"location":"service_consolidation_plan/","title":"\ud83d\udd27 Service Konsolidierungsplan","text":""},{"location":"service_consolidation_plan/#aktuelle-situation-36-services-viel-zu-viele","title":"\ud83d\udcca Aktuelle Situation: 36 Services (viel zu viele!)","text":""},{"location":"service_consolidation_plan/#calcom-services-10-1","title":"Cal.com Services (10 \u2192 1)","text":"<p>Behalten: - \u2705 <code>CalcomV2Service.php</code> - Neueste Version, vollst\u00e4ndig</p> <p>L\u00f6schen: - \u274c <code>CalcomService.php</code> - Alte v1 API - \u274c <code>CalcomDebugService.php</code> - Nur f\u00fcr Debugging - \u274c <code>CalcomEventSyncService.php</code> - In V2 integriert - \u274c <code>CalcomEventTypeImportService.php</code> - In V2 integriert - \u274c <code>CalcomEventTypeSyncService.php</code> - Redundant - \u274c <code>CalcomImportService.php</code> - Alte Version - \u274c <code>CalcomSyncService.php</code> - Redundant - \u274c <code>CalcomUnifiedService.php</code> - Experiment, nicht verwendet - \u274c <code>CalcomV2MigrationService.php</code> - Migration abgeschlossen</p>"},{"location":"service_consolidation_plan/#retell-services-5-1","title":"Retell Services (5 \u2192 1)","text":"<p>Behalten: - \u2705 <code>RetellV2Service.php</code> - Neueste Version</p> <p>L\u00f6schen: - \u274c <code>RetellAIService.php</code> - Alte Version - \u274c <code>RetellAgentService.php</code> - In V2 integriert - \u274c <code>RetellService.php</code> - Alte v1 - \u274c <code>RetellV1Service.php</code> - Explizit alte Version</p>"},{"location":"service_consolidation_plan/#andere-redundante-services","title":"Andere redundante Services","text":"<p>L\u00f6schen: - \u274c <code>AppointmentService.php</code> - Wird durch SmartBookingService ersetzt - \u274c <code>BookingService.php</code> - Redundant - \u274c <code>CallService.php</code> - In SmartBookingService integrieren - \u274c <code>CustomerService.php</code> - Zu komplex f\u00fcr MVP</p>"},{"location":"service_consolidation_plan/#neue-konsolidierte-services-3-total","title":"Neue konsolidierte Services (3 Total)","text":"<ol> <li>SmartBookingService - Alles rund um Terminbuchung</li> <li>IntegrationService - Wrapper f\u00fcr CalcomV2 + RetellV2</li> <li>NotificationService - Email, sp\u00e4ter SMS</li> </ol>"},{"location":"service_consolidation_plan/#ergebnis-von-36-auf-15-services-58","title":"\ud83c\udfaf Ergebnis: Von 36 auf ~15 Services (-58%)","text":""}]}