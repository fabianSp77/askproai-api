/**
 * Portal Universal Fix
 * Complete solution for Alpine.js and Livewire issues across the entire portal
 */
(function() {
    'use strict';
    
    //console.log('[Portal Universal Fix] Initializing...');
    
    // Configuration
    const config = {
        debug: true,
        retryAttempts: 3,
        retryDelay: 100,
        alpineInitDelay: 50,
        livewireInitDelay: 100
    };
    
    // State tracking
    const state = {
        alpineReady: false,
        livewireReady: false,
        componentsFixed: new Set(),
        observerActive: false
    };
    
    /**
     * Wait for dependencies
     */
    function waitFor(checkFn, callback, maxAttempts = 50) {
        let attempts = 0;
        const interval = setInterval(() => {
            if (checkFn() || attempts >= maxAttempts) {
                clearInterval(interval);
                if (checkFn()) {
                    callback();
                } else {
                    console.warn('[Portal Universal Fix] Timeout waiting for:', checkFn.toString());
                }
            }
            attempts++;
        }, 100);
    }
    
    /**
     * Force load frameworks if missing
     */
    function forceLoadFrameworks() {
        // Check for Livewire in script tags
        if (!window.Livewire) {
            const scripts = Array.from(document.scripts);
            scripts.forEach(script => {
                if (script.textContent && script.textContent.includes('window.Livewire')) {
                    //console.log('[Portal Universal Fix] Found Livewire in script tag, evaluating...');
                    try {
                        eval(script.textContent);
                    } catch (e) {
                        console.error('[Portal Universal Fix] Error evaluating Livewire script:', e);
                    }
                }
            });
        }
        
        // Alpine might be bundled with Livewire
        if (window.Livewire && !window.Alpine) {
            //console.log('[Portal Universal Fix] Checking if Alpine is bundled with Livewire...');
            // In Livewire v3, Alpine is available as Livewire.Alpine
            if (window.Livewire.Alpine) {
                window.Alpine = window.Livewire.Alpine;
                //console.log('[Portal Universal Fix] Found Alpine in Livewire.Alpine');
            }
        }
        
        // Initialize missing Alpine plugins
        if (window.Alpine && !window.Alpine.$persist) {
            //console.log('[Portal Universal Fix] Adding missing Alpine plugins...');
            
            // Add $persist plugin
            window.Alpine.magic('persist', () => {
                return (value) => {
                    const key = `_x_${value}`;
                    return {
                        init(value) {
                            const stored = localStorage.getItem(key);
                            if (stored !== null) {
                                try {
                                    return JSON.parse(stored);
                                } catch (e) {
                                    return stored;
                                }
                            }
                            return value;
                        },
                        set(value) {
                            localStorage.setItem(key, JSON.stringify(value));
                        },
                        as(alias) {
                            const aliasKey = `_x_${alias}`;
                            return {
                                init(value) {
                                    const stored = localStorage.getItem(aliasKey);
                                    if (stored !== null) {
                                        try {
                                            return JSON.parse(stored);
                                        } catch (e) {
                                            return stored;
                                        }
                                    }
                                    return value;
                                },
                                set(value) {
                                    localStorage.setItem(aliasKey, JSON.stringify(value));
                                }
                            };
                        }
                    };
                };
            });
            
            // Add other missing plugins
            if (!window.Alpine.plugin) {
                window.Alpine.plugin = function(callback) {
                    callback(window.Alpine);
                };
            }
        }
    }
    
    /**
     * Initialize Alpine.js components
     */
    function initializeAlpine() {
        if (!window.Alpine) {
            console.warn('[Portal Universal Fix] Alpine.js not found');
            return;
        }
        
        //console.log('[Portal Universal Fix] Initializing Alpine components...');
        
        // CRITICAL: Initialize sidebar store first
        if (!window.Alpine.store('sidebar')) {
            //console.log('[Portal Universal Fix] Creating missing sidebar store');
            
            // Initialize with persisted data or defaults
            const persistedGroups = (() => {
                try {
                    const stored = localStorage.getItem('filament.sidebar.collapsedGroups');
                    return stored ? JSON.parse(stored) : [];
                } catch (e) {
                    return [];
                }
            })();
            
            window.Alpine.store('sidebar', {
                isOpen: window.matchMedia('(min-width: 1024px)').matches,
                collapsedGroups: persistedGroups,
                
                open() {
                    this.isOpen = true;
                },
                
                close() {
                    this.isOpen = false;
                },
                
                toggle() {
                    this.isOpen = !this.isOpen;
                },
                
                groupIsCollapsed(group) {
                    return this.collapsedGroups.includes(group);
                },
                
                toggleCollapsedGroup(group) {
                    if (this.groupIsCollapsed(group)) {
                        this.collapsedGroups = this.collapsedGroups.filter(g => g !== group);
                    } else {
                        this.collapsedGroups.push(group);
                    }
                    // Persist to localStorage
                    try {
                        localStorage.setItem('filament.sidebar.collapsedGroups', JSON.stringify(this.collapsedGroups));
                    } catch (e) {
                        console.error('[Portal Universal Fix] Error persisting sidebar state:', e);
                    }
                }
            });
        }
        
        // Also ensure theme store exists
        if (!window.Alpine.store('theme')) {
            window.Alpine.store('theme', 'system');
        }
        
        // Find all uninitialized Alpine components
        const alpineElements = document.querySelectorAll('[x-data]:not([data-alpine-init])');
        let initialized = 0;
        
        alpineElements.forEach(element => {
            try {
                // Skip if already has Alpine instance
                if (element.__x) return;
                
                // Mark as initialized to prevent double init
                element.setAttribute('data-alpine-init', 'true');
                
                // Initialize the component
                Alpine.initTree(element);
                initialized++;
                
                // Special handling for dropdowns
                const xData = element.getAttribute('x-data');
                if (xData && (xData.includes('dropdown') || xData.includes('open'))) {
                    ensureDropdownFunctionality(element);
                }
            } catch (e) {
                console.error('[Portal Universal Fix] Error initializing Alpine component:', e);
                element.removeAttribute('data-alpine-init');
            }
        });
        
        if (initialized > 0) {
            //console.log(`[Portal Universal Fix] Initialized ${initialized} Alpine components`);
        }
        
        state.alpineReady = true;
    }
    
    /**
     * Fix Livewire components
     */
    function fixLivewireComponents() {
        if (!window.Livewire) {
            console.warn('[Portal Universal Fix] Livewire not found');
            return;
        }
        
        //console.log('[Portal Universal Fix] Fixing Livewire components...');
        
        // Fix wire:click handlers
        document.querySelectorAll('[wire\\:click]:not([data-wire-fixed])').forEach(element => {
            element.setAttribute('data-wire-fixed', 'true');
            element.style.cursor = 'pointer';
            element.style.pointerEvents = 'auto';
            
            // Ensure element is focusable
            if (!element.hasAttribute('tabindex') && 
                ['BUTTON', 'A', 'LI'].includes(element.tagName)) {
                element.setAttribute('tabindex', '0');
            }
        });
        
        // Fix wire:model elements
        document.querySelectorAll('[wire\\:model]:not([data-model-fixed])').forEach(element => {
            element.setAttribute('data-model-fixed', 'true');
            element.disabled = false;
            element.style.cursor = 'auto';
            
            // Special handling for selects
            if (element.tagName === 'SELECT') {
                element.style.cursor = 'pointer';
            }
        });
        
        // Fix statistics widgets that should auto-update
        document.querySelectorAll('[wire\\:poll]:not([data-poll-fixed])').forEach(element => {
            element.setAttribute('data-poll-fixed', 'true');
            
            // Find the Livewire component
            const component = element.closest('[wire\\:id]');
            if (component) {
                const componentId = component.getAttribute('wire:id');
                const livewireComponent = window.Livewire.find(componentId);
                
                if (livewireComponent) {
                    // Force a refresh
                    //console.log('[Portal Universal Fix] Refreshing polled component:', componentId);
                    livewireComponent.$refresh();
                }
            }
        });
        
        state.livewireReady = true;
    }
    
    /**
     * Ensure dropdown functionality
     */
    function ensureDropdownFunctionality(element) {
        const trigger = element.querySelector('button[x-ref="trigger"], button[type="button"]');
        const panel = element.querySelector('[x-ref="panel"], .fi-dropdown-panel, .absolute');
        
        if (!trigger || !panel) return;
        
        // Ensure panel is properly styled
        panel.style.zIndex = '9999';
        
        // Make sure Alpine data is accessible
        if (element.__x) {
            const alpineData = element.__x.$data;
            
            // Add click handler if missing
            if (!trigger.hasAttribute('data-dropdown-enhanced')) {
                trigger.setAttribute('data-dropdown-enhanced', 'true');
                
                trigger.addEventListener('click', function(e) {
                    e.stopPropagation();
                    
                    // Toggle using Alpine data if available
                    if (alpineData && typeof alpineData.toggle === 'function') {
                        alpineData.toggle();
                    } else if (alpineData && 'open' in alpineData) {
                        alpineData.open = !alpineData.open;
                    }
                });
            }
        }
        
        // Ensure dropdown items are clickable
        panel.querySelectorAll('button, a, [wire\\:click]').forEach(item => {
            item.style.cursor = 'pointer';
            item.style.pointerEvents = 'auto';
        });
    }
    
    /**
     * Fix Filament-specific components
     */
    function fixFilamentComponents() {
        //console.log('[Portal Universal Fix] Fixing Filament components...');
        
        // Fix stat widgets (the boxes that show numbers)
        document.querySelectorAll('.fi-wi-stats-overview-stat').forEach(stat => {
            if (!stat.hasAttribute('data-stat-fixed')) {
                stat.setAttribute('data-stat-fixed', 'true');
                
                // Find value elements that might be hidden
                const valueElements = stat.querySelectorAll('.fi-wi-stats-overview-stat-value, [class*="value"]');
                valueElements.forEach(el => {
                    // Remove any display:none or visibility:hidden
                    el.style.display = '';
                    el.style.visibility = 'visible';
                    el.style.opacity = '1';
                });
                
                // Force Livewire refresh if it's a wire:poll component
                const pollElement = stat.closest('[wire\\:poll]');
                if (pollElement) {
                    const component = pollElement.closest('[wire\\:id]');
                    if (component && window.Livewire) {
                        const componentId = component.getAttribute('wire:id');
                        const livewireComponent = window.Livewire.find(componentId);
                        if (livewireComponent) {
                            livewireComponent.$refresh();
                        }
                    }
                }
            }
        });
        
        // Fix select/search components
        document.querySelectorAll('.fi-fo-select').forEach(select => {
            if (!select.hasAttribute('data-select-fixed')) {
                select.setAttribute('data-select-fixed', 'true');
                
                // Find Alpine component
                const alpineComponent = select.closest('[x-data]');
                if (alpineComponent && !alpineComponent.__x && window.Alpine) {
                    Alpine.initTree(alpineComponent);
                }
            }
        });
        
        // Fix table filters
        document.querySelectorAll('.fi-ta-filters').forEach(filter => {
            const dropdowns = filter.querySelectorAll('.fi-dropdown');
            dropdowns.forEach(dropdown => {
                if (!dropdown.hasAttribute('data-filter-fixed')) {
                    dropdown.setAttribute('data-filter-fixed', 'true');
                    ensureDropdownFunctionality(dropdown);
                }
            });
        });
    }
    
    /**
     * Global click handler for closing dropdowns
     */
    function setupGlobalHandlers() {
        // Close dropdowns when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.fi-dropdown')) {
                // Close all open dropdowns
                document.querySelectorAll('[x-data]').forEach(element => {
                    if (element.__x && element.__x.$data && 'open' in element.__x.$data) {
                        element.__x.$data.open = false;
                    }
                });
            }
        });
        
        // Handle dynamically loaded content
        const observer = new MutationObserver(function(mutations) {
            let shouldReapply = false;
            
            mutations.forEach(mutation => {
                if (mutation.addedNodes.length > 0) {
                    mutation.addedNodes.forEach(node => {
                        if (node.nodeType === 1) {
                            if (node.querySelector && (
                                node.querySelector('[x-data]') ||
                                node.querySelector('[wire\\:id]') ||
                                node.querySelector('.fi-dropdown') ||
                                node.querySelector('.fi-wi-stats-overview-stat')
                            )) {
                                shouldReapply = true;
                            }
                        }
                    });
                }
            });
            
            if (shouldReapply) {
                //console.log('[Portal Universal Fix] New content detected, reapplying fixes...');
                setTimeout(() => {
                    initializeAlpine();
                    fixLivewireComponents();
                    fixFilamentComponents();
                }, 100);
            }
        });
        
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
        
        state.observerActive = true;
    }
    
    /**
     * Main initialization
     */
    function initialize() {
        //console.log('[Portal Universal Fix] Starting initialization...');
        
        // First, try to force load frameworks
        forceLoadFrameworks();
        
        // Check if Alpine is already loaded but not initialized properly
        if (window.Alpine && typeof window.Alpine.version === 'undefined') {
            //console.log('[Portal Universal Fix] Alpine found but not started, initializing...');
            try {
                // Add event listener before starting Alpine
                document.addEventListener('alpine:init', () => {
                    //console.log('[Portal Universal Fix] Alpine init event fired');
                    forceLoadFrameworks(); // Ensure plugins are loaded
                });
                
                window.Alpine.start();
            } catch (e) {
                console.error('[Portal Universal Fix] Error starting Alpine:', e);
            }
        }
        
        // Wait for Alpine
        waitFor(
            () => window.Alpine && window.Alpine.version,
            () => {
                //console.log('[Portal Universal Fix] Alpine.js fully loaded, version:', window.Alpine.version);
                
                // Ensure plugins are available
                forceLoadFrameworks();
                
                setTimeout(initializeAlpine, config.alpineInitDelay);
            }
        );
        
        // Wait for Livewire
        waitFor(
            () => window.Livewire,
            () => {
                //console.log('[Portal Universal Fix] Livewire detected');
                
                // Setup Livewire hooks
                if (window.Livewire) {
                    // Hook into Livewire lifecycle
                    Livewire.hook('message.processed', () => {
                        setTimeout(() => {
                            fixLivewireComponents();
                            fixFilamentComponents();
                        }, 50);
                    });
                    
                    Livewire.hook('element.updated', (el) => {
                        if (el.hasAttribute('x-data')) {
                            setTimeout(() => initializeAlpine(), 50);
                        }
                    });
                }
                
                setTimeout(fixLivewireComponents, config.livewireInitDelay);
            }
        );
        
        // Fix Filament components regardless
        setTimeout(fixFilamentComponents, 200);
        
        // Setup global handlers
        setupGlobalHandlers();
        
        // Handle page navigation
        document.addEventListener('livewire:navigated', () => {
            //console.log('[Portal Universal Fix] Page navigated, reapplying fixes...');
            setTimeout(() => {
                forceLoadFrameworks();
                initializeAlpine();
                fixLivewireComponents();
                fixFilamentComponents();
            }, 100);
        });
        
        // Listen for framework loaded event
        window.addEventListener('frameworks-loaded', () => {
            //console.log('[Portal Universal Fix] Frameworks loaded event received');
            setTimeout(() => {
                initializeAlpine();
                fixLivewireComponents();
                fixFilamentComponents();
            }, 100);
        });
        
        // Also listen for Alpine init if it hasn't fired yet
        document.addEventListener('alpine:init', () => {
            //console.log('[Portal Universal Fix] Alpine init event (late binding)');
            forceLoadFrameworks();
        });
    }
    
    /**
     * Public API for debugging
     */
    window.portalFix = {
        status: function() {
            //console.log('=== Portal Fix Status ===');
            //console.log('Alpine Ready:', state.alpineReady);
            //console.log('Livewire Ready:', state.livewireReady);
            //console.log('Observer Active:', state.observerActive);
            //console.log('Fixed Components:', state.componentsFixed.size);
            //console.log('Alpine Components:', document.querySelectorAll('[x-data]').length);
            //console.log('Livewire Components:', document.querySelectorAll('[wire\\:id]').length);
            //console.log('Dropdowns:', document.querySelectorAll('.fi-dropdown').length);
            //console.log('Stat Widgets:', document.querySelectorAll('.fi-wi-stats-overview-stat').length);
        },
        
        reinit: function() {
            //console.log('[Portal Universal Fix] Manual reinitialization...');
            initializeAlpine();
            fixLivewireComponents();
            fixFilamentComponents();
        },
        
        fixDropdowns: function() {
            document.querySelectorAll('.fi-dropdown').forEach(ensureDropdownFunctionality);
        },
        
        refreshStats: function() {
            document.querySelectorAll('[wire\\:poll]').forEach(element => {
                const component = element.closest('[wire\\:id]');
                if (component && window.Livewire) {
                    const componentId = component.getAttribute('wire:id');
                    const livewireComponent = window.Livewire.find(componentId);
                    if (livewireComponent) {
                        livewireComponent.$refresh();
                    }
                }
            });
        }
    };
    
    // Start initialization when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initialize);
    } else {
        initialize();
    }
    
    //console.log('[Portal Universal Fix] Loaded. Use window.portalFix.status() for debugging');
})();