/**
 * Admin Portal Dropdown Fix
 * Consolidates all dropdown functionality into one clean solution
 * Fixes: Dropdowns not closing, buttons not clickable, Alpine conflicts
 */

(function() {
    'use strict';
    
    // Wait for Alpine to be ready
    document.addEventListener('alpine:init', () => {
        console.log('[AdminDropdownFix] Initializing dropdown fixes...');
        
        // Register a simple dropdown component that works with Filament
        Alpine.data('dropdownFixed', () => ({
            open: false,
            
            toggle() {
                this.open = !this.open;
            },
            
            close() {
                this.open = false;
            },
            
            init() {
                // Close on click outside
                this.$watch('open', value => {
                    if (value) {
                        this.$nextTick(() => {
                            const clickHandler = (e) => {
                                if (!this.$el.contains(e.target)) {
                                    this.close();
                                    document.removeEventListener('click', clickHandler);
                                }
                            };
                            // Add delay to prevent immediate close
                            setTimeout(() => {
                                document.addEventListener('click', clickHandler);
                            }, 10);
                        });
                    }
                });
                
                // Close on escape
                this.$el.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape' && this.open) {
                        this.close();
                    }
                });
            }
        }));
        
        // Fix Filament's native dropdowns
        Alpine.magic('closeDropdown', () => {
            return () => {
                // Find parent dropdown and close it
                const dropdown = event.target.closest('[x-data*="open"]');
                if (dropdown && dropdown._x_dataStack) {
                    const data = dropdown._x_dataStack[0];
                    if (data && typeof data.open !== 'undefined') {
                        data.open = false;
                    }
                }
            };
        });
    });
    
    // Ensure all interactive elements are clickable
    document.addEventListener('DOMContentLoaded', () => {
        console.log('[AdminDropdownFix] Fixing pointer events...');
        
        // Fix pointer events on buttons and dropdowns
        const fixPointerEvents = () => {
            // Fix all buttons
            document.querySelectorAll('button, [role="button"], .fi-btn, .fi-dropdown-trigger').forEach(el => {
                el.style.pointerEvents = 'auto';
                el.style.cursor = 'pointer';
            });
            
            // Fix dropdown items
            document.querySelectorAll('.fi-dropdown-item, [role="menuitem"]').forEach(el => {
                el.style.pointerEvents = 'auto';
                el.style.cursor = 'pointer';
            });
            
            // Fix links
            document.querySelectorAll('a, .fi-link').forEach(el => {
                el.style.pointerEvents = 'auto';
                el.style.cursor = 'pointer';
            });
        };
        
        // Run immediately and after Livewire updates
        fixPointerEvents();
        
        // Re-apply fixes after Livewire updates
        if (window.Livewire) {
            Livewire.hook('message.processed', () => {
                setTimeout(fixPointerEvents, 50);
            });
        }
        
        // Observe DOM changes and fix new elements
        const observer = new MutationObserver(() => {
            fixPointerEvents();
        });
        
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    });
    
    // Override problematic global functions
    window.toggleDropdown = function() {
        if (this && typeof this.open !== 'undefined') {
            this.open = !this.open;
        }
    };
    
    window.closeDropdown = function() {
        if (this && typeof this.open !== 'undefined') {
            this.open = false;
        }
    };
    
    console.log('[AdminDropdownFix] Dropdown fixes loaded successfully');
})();