/**
 * EMERGENCY MOBILE FIX
 * Entfernt alle Event-Blocker und stellt Mobile-Funktionalität wieder her
 */

(function() {
    'use strict';
    
    console.log('[EMERGENCY FIX] Starting mobile repair...');
    
    // 1. OVERRIDE ALLE preventDefault und stopPropagation
    const originalPreventDefault = Event.prototype.preventDefault;
    const originalStopPropagation = Event.prototype.stopPropagation;
    
    // Temporär deaktivieren für Debugging
    Event.prototype.preventDefault = function() {
        console.warn('[EMERGENCY] preventDefault blocked:', this.type, this.target);
        // Erlaube nur für form submits
        if (this.type === 'submit') {
            originalPreventDefault.call(this);
        }
    };
    
    Event.prototype.stopPropagation = function() {
        console.warn('[EMERGENCY] stopPropagation blocked:', this.type, this.target);
        // Komplett blockieren für jetzt
    };
    
    // 2. STELLE SICHER DASS MOBILE MENU BUTTON FUNKTIONIERT
    function fixMobileMenuButton() {
        console.log('[EMERGENCY] Fixing mobile menu button...');
        
        // Finde alle möglichen Menu Buttons
        const selectors = [
            'button[x-on\\:click*="sidebarOpen"]',
            'button[x-on\\:click*="toggle"]',
            'button[aria-label*="menu"]',
            '.fi-topbar-item:first-child button',
            '.fi-icon-btn',
            '[x-data] button'
        ];
        
        const buttons = [];
        selectors.forEach(selector => {
            document.querySelectorAll(selector).forEach(btn => {
                if (!buttons.includes(btn)) {
                    buttons.push(btn);
                }
            });
        });
        
        console.log('[EMERGENCY] Found buttons:', buttons.length);
        
        buttons.forEach((button, index) => {
            // Entferne alle existierenden Event Listener
            const newButton = button.cloneNode(true);
            button.parentNode.replaceChild(newButton, button);
            
            // Füge direkten Click Handler hinzu
            newButton.addEventListener('click', function(e) {
                console.log('[EMERGENCY] Menu button clicked!');
                
                // Toggle sidebar class direkt
                document.body.classList.toggle('fi-sidebar-open');
                
                // Versuche Alpine.js zu nutzen wenn verfügbar
                if (window.Alpine && Alpine.store('sidebar')) {
                    Alpine.store('sidebar').toggle();
                }
                
                // Verhindere andere Handler
                e.stopImmediatePropagation();
            }, true);
            
            // Stelle sicher dass Button sichtbar ist
            newButton.style.cssText = `
                display: flex !important;
                opacity: 1 !important;
                visibility: visible !important;
                pointer-events: auto !important;
                cursor: pointer !important;
                z-index: 9999 !important;
                position: relative !important;
                width: 44px !important;
                height: 44px !important;
                align-items: center !important;
                justify-content: center !important;
            `;
            
            // Debug Border
            if (index === 0) {
                newButton.style.border = '2px solid red';
            }
        });
    }
    
    // 3. SIDEBAR CLICK-OUTSIDE HANDLER
    function setupSidebarClickOutside() {
        document.addEventListener('click', function(e) {
            if (document.body.classList.contains('fi-sidebar-open')) {
                const sidebar = document.querySelector('.fi-sidebar');
                const menuButton = e.target.closest('button[x-on\\:click*="sidebar"], .fi-topbar-item button');
                
                if (!sidebar?.contains(e.target) && !menuButton) {
                    console.log('[EMERGENCY] Closing sidebar (click outside)');
                    document.body.classList.remove('fi-sidebar-open');
                    
                    if (window.Alpine && Alpine.store('sidebar')) {
                        Alpine.store('sidebar').close();
                    }
                }
            }
        });
    }
    
    // 4. TOUCH EVENT SUPPORT
    function setupTouchSupport() {
        let touchStartX = 0;
        let touchStartY = 0;
        const threshold = 100;
        
        document.addEventListener('touchstart', function(e) {
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
        }, { passive: true });
        
        document.addEventListener('touchend', function(e) {
            if (!e.changedTouches.length) return;
            
            const touchEndX = e.changedTouches[0].clientX;
            const touchEndY = e.changedTouches[0].clientY;
            const diffX = touchEndX - touchStartX;
            const diffY = Math.abs(touchEndY - touchStartY);
            
            // Swipe from left edge to open
            if (touchStartX < 20 && diffX > threshold && diffY < 50) {
                console.log('[EMERGENCY] Opening sidebar (swipe)');
                document.body.classList.add('fi-sidebar-open');
                if (window.Alpine && Alpine.store('sidebar')) {
                    Alpine.store('sidebar').open();
                }
            }
            
            // Swipe to close
            if (document.body.classList.contains('fi-sidebar-open') && diffX < -threshold && diffY < 50) {
                console.log('[EMERGENCY] Closing sidebar (swipe)');
                document.body.classList.remove('fi-sidebar-open');
                if (window.Alpine && Alpine.store('sidebar')) {
                    Alpine.store('sidebar').close();
                }
            }
        }, { passive: true });
    }
    
    // 5. FIX DROPDOWNS
    function fixDropdowns() {
        console.log('[EMERGENCY] Fixing dropdowns...');
        
        // Entferne alle x-show="false" die Dropdowns verstecken
        document.querySelectorAll('[x-show="false"], [x-show="open"], [x-show="show"]').forEach(el => {
            if (el.getAttribute('x-show') === 'false') {
                el.style.display = 'none';
            }
        });
        
        // Click handler für Dropdown Toggle
        document.addEventListener('click', function(e) {
            const trigger = e.target.closest('[x-on\\:click*="toggle"], [x-on\\:click*="open"]');
            if (trigger) {
                const dropdown = trigger.nextElementSibling || trigger.parentElement.querySelector('.fi-dropdown-panel');
                if (dropdown) {
                    const isVisible = dropdown.style.display !== 'none';
                    dropdown.style.display = isVisible ? 'none' : 'block';
                    console.log('[EMERGENCY] Toggled dropdown:', !isVisible);
                }
            }
        });
    }
    
    // 6. ENTFERNE ALLE OVERLAYS
    function removeOverlays() {
        // Entferne style tags die pointer-events setzen
        document.querySelectorAll('style').forEach(style => {
            if (style.textContent.includes('pointer-events: none')) {
                console.log('[EMERGENCY] Removing problematic style tag');
                style.remove();
            }
        });
        
        // Entferne inline styles mit pointer-events: none
        document.querySelectorAll('[style*="pointer-events: none"]').forEach(el => {
            el.style.pointerEvents = 'auto';
        });
    }
    
    // 7. ALPINE.JS EMERGENCY SETUP
    function setupAlpineEmergency() {
        if (window.Alpine) {
            console.log('[EMERGENCY] Setting up Alpine emergency stores...');
            
            // Ensure sidebar store exists
            if (!Alpine.store('sidebar')) {
                Alpine.store('sidebar', {
                    isOpen: false,
                    toggle() {
                        this.isOpen = !this.isOpen;
                        document.body.classList.toggle('fi-sidebar-open', this.isOpen);
                        console.log('[EMERGENCY] Sidebar toggled:', this.isOpen);
                    },
                    open() {
                        this.isOpen = true;
                        document.body.classList.add('fi-sidebar-open');
                    },
                    close() {
                        this.isOpen = false;
                        document.body.classList.remove('fi-sidebar-open');
                    }
                });
            }
        }
    }
    
    // 8. RUN ALL FIXES
    function runAllFixes() {
        console.log('[EMERGENCY] Running all fixes...');
        
        fixMobileMenuButton();
        setupSidebarClickOutside();
        setupTouchSupport();
        fixDropdowns();
        removeOverlays();
        setupAlpineEmergency();
        
        // Re-run periodically to catch dynamic content
        setTimeout(runAllFixes, 2000);
    }
    
    // Start fixes when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', runAllFixes);
    } else {
        runAllFixes();
    }
    
    // Also run on Alpine init
    document.addEventListener('alpine:init', setupAlpineEmergency);
    document.addEventListener('alpine:initialized', runAllFixes);
    
    // Run on Livewire updates
    if (window.Livewire) {
        Livewire.hook('message.processed', () => {
            setTimeout(fixMobileMenuButton, 100);
        });
    }
    
    // Global debug function
    window.emergencyDebug = {
        checkClickable: function() {
            document.querySelectorAll('button, a, [role="button"]').forEach(el => {
                const styles = getComputedStyle(el);
                if (styles.pointerEvents === 'none') {
                    console.error('Not clickable:', el, 'pointer-events:', styles.pointerEvents);
                    el.style.border = '3px solid red';
                }
            });
        },
        
        testMenuButton: function() {
            const button = document.querySelector('.fi-topbar-item:first-child button');
            if (button) {
                console.log('Clicking menu button programmatically...');
                button.click();
            } else {
                console.error('Menu button not found!');
            }
        },
        
        showAllButtons: function() {
            document.querySelectorAll('button').forEach((btn, i) => {
                btn.style.border = '2px solid blue';
                btn.style.position = 'relative';
                btn.innerHTML += `<span style="position: absolute; top: -20px; left: 0; background: yellow; color: black; font-size: 10px; z-index: 9999;">${i}</span>`;
            });
        }
    };
    
    console.log('[EMERGENCY FIX] Mobile repair complete! Debug with: emergencyDebug.checkClickable()');
})();