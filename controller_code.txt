========= CONTROLLER-INHALTE =========
Datum der Erfassung: Mo 24. Mär 10:53:35 CET 2025

--- RetellWebhookController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Call;
use App\Models\Kunde;
use App\Services\RetellToCalService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Carbon\Carbon;

class RetellWebhookController extends Controller
{
    public function handleWebhook(Request $request)
    {
        Log::info('Retell.ai Webhook empfangen', [
            'call_id' => $request->input('call_id'),
            'phone_number' => $request->input('phone_number')
        ]);

        try {
            // Validierung der eingehenden Daten
            $validatedData = $request->validate([
                'call_id' => 'required|string|unique:calls,call_id',
                'status' => 'required|string',
                'phone_number' => 'nullable|string',
                'duration' => 'nullable|integer|min:0',
                'transcript' => 'nullable|string',
                'summary' => 'nullable|string',
                'user_sentiment' => 'nullable|string',
                'disconnect_reason' => 'nullable|string',
            ]);

            // Speichere Call mit allen Rohdaten für spätere Nachvollziehbarkeit
            $call = Call::create([
                'call_id' => $validatedData['call_id'],
                'call_status' => $validatedData['status'],
                'user_sentiment' => $validatedData['user_sentiment'] ?? null,
                'successful' => $request->input('call_successful', true),
                'call_time' => Carbon::now(),
                'call_duration' => $validatedData['duration'] ?? 0,
                'phone_number' => $validatedData['phone_number'] ?? null,
                'name' => $request->input('name') ?? $request->input('_name') ?? 'Unbekannt',
                'email' => $request->input('email') ?? $request->input('_email'),
                'summary' => $validatedData['summary'] ?? null,
                'transcript' => $validatedData['transcript'] ?? null,
                'disconnect_reason' => $validatedData['disconnect_reason'] ?? null,
                'raw_data' => $request->all(),
            ]);

            // Kunden zuordnen
            $this->associateCustomer($call, $request);

            // Automatische Terminbuchung (falls Anruf erfolgreich)
            if ($call->successful) {
                $retellToCalService = new RetellToCalService();
                $appointment = $retellToCalService->createAppointmentFromCall($call);

                if ($appointment) {
                    Log::info('Termin erfolgreich gebucht', [
                        'call_id' => $call->id,
                        'appointment_id' => $appointment->id,
                        'provider' => $appointment->provider,
                    ]);
                } else {
                    Log::warning('Termin konnte nicht gebucht werden', [
                        'call_id' => $call->id,
                    ]);
                }
            }

            // Erfolgreiche Antwort zurückgeben
            return response()->json([
                'success' => true,
                'call_id' => $call->id,
                'message' => 'Webhook erfolgreich verarbeitet'
            ]);

        } catch (\Exception $e) {
            Log::error('Retell.ai Webhook Fehler: ' . $e->getMessage(), [
                'exception' => $e,
                'trace' => $e->getTraceAsString(),
                'request' => $request->all()
            ]);

            return response()->json([
                'success' => false,
                'error' => 'Interner Serverfehler: ' . $e->getMessage()
            ], 500);
        }
    }

    private function associateCustomer(Call $call, Request $request)
    {
        try {
            $phone = preg_replace('/[^0-9+]/', '', $request->input('phone_number'));

            $kunde = Kunde::where('telefonnummer', 'like', '%' . $phone . '%')->first();

            if (!$kunde && ($request->input('name') || $request->input('_name'))) {
                $kunde = Kunde::create([
                    'name' => $request->input('name') ?? $request->input('_name') ?? 'Unbekannt',
                    'email' => $request->input('email') ?? $request->input('_email'),
                    'telefonnummer' => $phone
                ]);

                Log::info('Neuer Kunde aus Retell.ai Call erstellt', ['kunde_id' => $kunde->id]);
            }

            if ($kunde) {
                $call->kunde_id = $kunde->id;
                $call->save();

                Log::info('Kunde mit Call verknüpft', [
                    'call_id' => $call->id,
                    'kunde_id' => $kunde->id
                ]);
            }
        } catch (\Exception $e) {
            Log::error('Fehler bei Kundenverknüpfung: ' . $e->getMessage(), [
                'exception' => $e,
                'call_id' => $call->id
            ]);
        }
    }
}

--- CalcomController.php ---
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Services\CalcomService;
use Illuminate\Support\Facades\Validator;

class CalcomController extends Controller
{
    protected $calcomService;

    public function __construct(CalcomService $calcomService)
    {
        $this->calcomService = $calcomService;
    }

    public function checkAvailability(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'dateFrom' => 'required|date_format:Y-m-d\TH:i:s.u\Z',
            'dateTo' => 'required|date_format:Y-m-d\TH:i:s.u\Z',
            'eventTypeId' => 'required|numeric'
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        $result = $this->calcomService->checkAvailability(
            $request->dateFrom,
            $request->dateTo,
            $request->eventTypeId
        );

        if (!$result) {
            return response()->json(['error' => 'Verfügbarkeitsprüfung fehlgeschlagen'], 500);
        }

        return response()->json($result);
    }

    public function bookAppointment(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'eventTypeId' => 'required|numeric',
            'start' => 'required|date_format:Y-m-d\TH:i:s.u\Z',
            'end' => 'required|date_format:Y-m-d\TH:i:s.u\Z',
            'customerName' => 'required|string|max:255',
            'customerEmail' => 'required|email|max:255',
            'customerPhone' => 'sometimes|string|max:20'
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        $result = $this->calcomService->bookAppointment(
            $request->eventTypeId,
            $request->start,
            $request->end,
            $request->customerName,
            $request->customerEmail,
            $request->customerPhone ?? null
        );

        if (!$result) {
            return response()->json(['error' => 'Terminbuchung fehlgeschlagen'], 500);
        }

        return response()->json($result);
    }
}

--- AuthServiceProvider.php ---
<?php

namespace App\Providers;

use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;
use Laravel\Passport\Passport;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * Die Policy-Mappings für die Anwendung.
     *
     * @var array<class-string, class-string>
     */
    protected $policies = [
        // 'App\Models\Model' => 'App\Policies\ModelPolicy',
    ];

    /**
     * Alle Authentifizierungs/Autorisierungs-Services registrieren.
     */
    public function boot(): void
    {
        $this->registerPolicies();

        // Passport konfigurieren
        Passport::loadKeysFrom(base_path('storage'));
        Passport::tokensExpireIn(now()->addDays(15));
        Passport::refreshTokensExpireIn(now()->addDays(30));
        Passport::personalAccessTokensExpireIn(now()->addMonths(6));
    }
}

