<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\URL;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Livewire\Component;
use Illuminate\Support\Facades\Blade;
use Filament\Support\Assets\Js;
use Filament\Support\Facades\FilamentAsset;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        // Force HTTPS in production
        if ($this->app->environment('production')) {
            URL::forceScheme('https');
        }
        
        // Fix for Livewire in a subfolder
        if (config('app.url')) {
            $appUrl = config('app.url');
            $this->app['request']->server->set('SCRIPT_NAME', parse_url($appUrl, PHP_URL_PATH) . '/index.php');
        }
        
        // Register the security layer service provider
        $this->app->register(\App\Providers\SecurityLayerServiceProvider::class);
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        // Prevent lazy loading in production
        Model::preventLazyLoading(!$this->app->isProduction());
        
        // Listen to database queries in development
        if ($this->app->environment('local')) {
            DB::listen(function ($query) {
                logger()->debug('Query executed', [
                    'sql' => $query->sql,
                    'bindings' => $query->bindings,
                    'time' => $query->time,
                ]);
            });
        }
        
        // Add custom middleware alias
        $this->app['router']->aliasMiddleware('company.scope', \App\Http\Middleware\CompanyScope::class);
        
        // Fix URL generation for Livewire
        Component::macro('getPublicUrl', function () {
            return rtrim(config('app.url'), '/');
        });
        
        // Custom Blade directives
        Blade::directive('money', function ($expression) {
            return "<?php echo number_format($expression / 100, 2, ',', '.') . ' â‚¬'; ?>";
        });
        
        Blade::directive('datetime', function ($expression) {
            return "<?php echo ($expression) ? ($expression)->format('d.m.Y H:i') : '-'; ?>";
        });
        
        // Set locale
        setlocale(LC_TIME, 'de_DE.UTF-8');
        
        // Handle authentication events
        Auth::viaRemember(function ($user) {
            logger()->info('User logged in via remember token', ['user_id' => $user->id]);
        });
        
        // Register Filament assets
        FilamentAsset::register([
            Js::make('ultimate-ui-system', __DIR__ . '/../../resources/js/ultimate-ui-system.js'),
        ], 'app');
    }
}