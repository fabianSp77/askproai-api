<?php

namespace App\Jobs;

use App\Models\Call;
use App\Models\Integration;
use App\Models\Appointment;
use App\Services\CalcomService;
use Carbon\Carbon;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Log;

class ProcessRetellCallJob implements ShouldQueue
{
    use Dispatchable, Queueable, SerializesModels;

    /** Freigegebene Nutzlast von Retell */
    public function __construct(private array $payload) {}

    public function handle(CalcomService $cal): void
    {
        /* 1) Call sichern --------------------------------------------------- */
        $call = Call::create([
            'external_id' => $this->payload['call_id']    ?? null,
            'transcript'  => $this->payload['transcript'] ?? '',
            'raw'         => $this->payload,
        ]);

        /* 2) Aktive Retell-Integration holen ------------------------------- */
        $integration = Integration::where('system', 'retell')
                                  ->where('active', true)
                                  ->first();
        if (! $integration) {
            Log::warning('[ProcessRetellCallJob] Keine aktive Retell-Integration gefunden');
            return;
        }

        /* 3) Customer-ID sofort in Call schreiben -------------------------- */
        $call->update(['customer_id' => $integration->customer_id]);

        /* 4) Erstes freies Zeitfenster (nÃ¤chste 7 Tage) -------------------- */
        $from = Carbon::now()->toIso8601String();
        $to   = Carbon::now()->addWeek()->toIso8601String();

        $slots = $cal->availableSlots($from, $to)->json('timeSlots') ?? [];
        $slot  = $slots[0] ?? null;

        if (! $slot) {
            Log::warning('[ProcessRetellCallJob] Kein freier Slot gefunden');
            return;
        }

        /* 5) Termin buchen -------------------------------------------------- */
        $bookingResp = $cal->createBooking([
            'eventTypeId' => env('CALCOM_EVENT_TYPE_ID'),
            'start'       => $slot['start'],
            'end'         => $slot['end'],
            'attendees'   => [[
                'email' => $this->payload['caller_email'] ?? '',
                'name'  => $this->payload['caller_name']  ?? 'Unbekannt',
            ]],
            'metadata'    => ['call_id' => $call->id],
        ]);

        $booking = $bookingResp->json();

        /* 6) Termin in DB spiegeln ----------------------------------------- */
        Appointment::create([
            'customer_id' => $integration->customer_id,
            'external_id' => $booking['uid']   ?? null,
            'starts_at'   => $slot['start'],
            'ends_at'     => $slot['end'],
            'payload'     => $booking,
            'status'      => $booking['status'] ?? 'pending',
        ]);

        Log::info('[ProcessRetellCallJob] Booking erstellt', [
            'booking_id' => $booking['uid'] ?? null,
            'slot'       => $slot,
        ]);
    }
}
PHP
