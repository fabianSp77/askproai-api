" | base64 --decode | sudo tee /var/www/api-gateway/app/Services/CalcomService.php > /dev/null
