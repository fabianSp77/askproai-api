<?php

namespace App\Database;

use Illuminate\Database\Connectors\MySqlConnector;
use PDO;
use App\Services\Database\ConnectionPoolManager;

class PooledMySqlConnector extends MySqlConnector
{
    /**
     * Establish a database connection.
     *
     * @param  array  $config
     * @return \PDO
     */
    public function connect(array $config)
    {
        // If pooling is disabled, use parent implementation
        if (!config('database.pool.enabled', false)) {
            return parent::connect($config);
        }
        
        // Try to get connection from pool
        $poolManager = ConnectionPoolManager::getInstance();
        
        try {
            // Create a unique key for this connection config
            $poolKey = $this->getPoolKey($config);
            
            // Try to get existing connection from pool
            $connection = $poolManager->getConnection($poolKey);
            
            if ($connection instanceof PDO && $this->isConnectionHealthy($connection)) {
                return $connection;
            }
            
            // If no healthy connection, create new one
            $dsn = $this->getDsn($config);
            $options = $this->getOptions($config);
            $connection = $this->createNewConnection($dsn, $config, $options);
            
            // Add to pool for reuse
            $poolManager->addConnection($poolKey, $connection);
            
            return $connection;
            
        } catch (\Exception $e) {
            // Fallback to parent implementation if pooling fails
            report($e);
            return parent::connect($config);
        }
    }
    
    /**
     * Create a new PDO connection with custom settings.
     *
     * @param  string  $dsn
     * @param  array  $config
     * @param  array  $options
     * @return \PDO
     */
    protected function createNewConnection($dsn, array $config, array $options)
    {
        // Override persistent connections setting
        $options[PDO::ATTR_PERSISTENT] = false;
        
        // Add connection timeout
        $options[PDO::ATTR_TIMEOUT] = $config['timeout'] ?? 5;
        
        $connection = $this->createPdoConnection(
            $dsn, $config['username'], $config['password'], $options
        );
        
        // Set session variables
        if (isset($config['init_commands']) && is_array($config['init_commands'])) {
            foreach ($config['init_commands'] as $command) {
                $connection->exec($command);
            }
        } else {
            // Default init commands
            $connection->exec("SET NAMES 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'");
            $connection->exec("SET SESSION sql_mode='TRADITIONAL,NO_AUTO_VALUE_ON_ZERO'");
            $connection->exec("SET SESSION wait_timeout=120");
        }
        
        return $connection;
    }
    
    /**
     * Check if a connection is still healthy.
     *
     * @param  \PDO  $connection
     * @return bool
     */
    protected function isConnectionHealthy(PDO $connection): bool
    {
        try {
            $result = $connection->query('SELECT 1');
            return $result !== false;
        } catch (\Exception $e) {
            return false;
        }
    }
    
    /**
     * Get a unique key for the connection pool.
     *
     * @param  array  $config
     * @return string
     */
    protected function getPoolKey(array $config): string
    {
        return sprintf(
            '%s:%s:%s:%s',
            $config['host'] ?? 'localhost',
            $config['port'] ?? 3306,
            $config['database'],
            $config['username']
        );
    }
}