<?php

namespace App\Filament\Admin\Resources;

use Filament\Resources\Resource;
use Filament\Tables\Table;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Actions\Action;
use Filament\Tables\Actions\BulkAction;
use Filament\Tables\Enums\FiltersLayout;
use Filament\Support\Enums\ActionSize;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\HtmlString;
use Filament\Forms\Components\Select;
use Filament\Notifications\Notification;

abstract class UltimateResource extends Resource
{
    // Enable premium features
    protected static bool $hasMultiView = true;
    protected static bool $hasInlineEditing = true;
    protected static bool $hasCommandPalette = true;
    protected static bool $hasSmartFiltering = true;
    protected static bool $hasVirtualScrolling = true;
    protected static bool $hasRichInteractions = true;
    protected static bool $hasAIFeatures = true;
    
    // View types available
    protected static array $viewTypes = ['table', 'grid', 'kanban', 'calendar', 'timeline'];
    protected static string $defaultView = 'table';
    
    /**
     * Configure the table with premium features
     */
    public static function configureUltimateTable(Table $table): Table
    {
        return $table
            // Enable polling for real-time updates
            ->poll('10s')
            
            // Premium styling
            ->striped()
            ->extremePaginationLinks()
            ->paginated([10, 25, 50, 100, 250])
            ->recordClasses(fn ($record) => static::getRecordClasses($record))
            
            // Enable column features
            ->columnToggleFormColumns(3)
            ->columnToggleFormMaxHeight('600px')
            ->persistColumnSearchesInSession()
            ->persistFiltersInSession()
            ->persistSearchInSession()
            ->persistSortInSession()
            
            // Virtual scrolling data attributes
            ->extraAttributes([
                'x-data' => 'ultimateTable',
                'x-init' => 'init()',
                'class' => 'ultimate-resource-table',
                'data-resource' => static::class,
                'data-virtual-scroll' => static::$hasVirtualScrolling ? 'true' : 'false',
                'data-inline-edit' => static::$hasInlineEditing ? 'true' : 'false',
                '@keydown.cmd.k.window' => 'openCommandPalette',
                '@keydown.ctrl.k.window' => 'openCommandPalette',
            ])
            
            // Header actions for view switching
            ->headerActions([
                static::getViewSwitcherAction(),
                static::getExportAction(),
                static::getSmartFilterAction(),
            ])
            
            // Enable filters with smart layout
            ->filters(static::getSmartFilters(), layout: FiltersLayout::Dropdown)
            ->filtersFormColumns(4)
            
            // Bulk actions with keyboard shortcuts
            ->bulkActions([
                BulkAction::make('quick-edit')
                    ->label('Quick Edit')
                    ->icon('heroicon-o-pencil-square')
                    ->color('primary')
                    ->size(ActionSize::Small)
                    ->deselectRecordsAfterCompletion()
                    ->form(fn () => static::getQuickEditForm())
                    ->action(fn ($records, array $data) => static::quickEditRecords($records, $data))
                    ->keyBindings(['cmd+e', 'ctrl+e']),
                    
                ...static::getDefaultBulkActions(),
            ])
            
            // Add inline editing to all text columns
            ->modifyQueryUsing(fn (Builder $query) => static::optimizeQuery($query));
    }
    
    /**
     * Get view switcher action
     */
    protected static function getViewSwitcherAction(): Action
    {
        return Action::make('view-switcher')
            ->label('View')
            ->icon('heroicon-o-squares-2x2')
            ->color('gray')
            ->size(ActionSize::Small)
            ->extraAttributes([
                'x-data' => '{ open: false }',
                '@click' => 'open = !open',
                'class' => 'view-switcher-trigger',
            ])
            ->modalContent(new HtmlString('
                <div class="view-switcher-modal" x-data="viewSwitcher">
                    <div class="grid grid-cols-5 gap-3">
                        <button @click="switchView(\'table\')" 
                                :class="currentView === \'table\' ? \'active\' : \'\'"
                                class="view-option p-4 rounded-lg border-2 transition-all hover:scale-105">
                            <svg class="w-8 h-8 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                            </svg>
                            <span class="text-sm font-medium">Table</span>
                            <kbd class="text-xs mt-1 opacity-60">⌘1</kbd>
                        </button>
                        
                        <button @click="switchView(\'grid\')" 
                                :class="currentView === \'grid\' ? \'active\' : \'\'"
                                class="view-option p-4 rounded-lg border-2 transition-all hover:scale-105">
                            <svg class="w-8 h-8 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path>
                            </svg>
                            <span class="text-sm font-medium">Grid</span>
                            <kbd class="text-xs mt-1 opacity-60">⌘2</kbd>
                        </button>
                        
                        <button @click="switchView(\'kanban\')" 
                                :class="currentView === \'kanban\' ? \'active\' : \'\'"
                                class="view-option p-4 rounded-lg border-2 transition-all hover:scale-105">
                            <svg class="w-8 h-8 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2"></path>
                            </svg>
                            <span class="text-sm font-medium">Kanban</span>
                            <kbd class="text-xs mt-1 opacity-60">⌘3</kbd>
                        </button>
                        
                        <button @click="switchView(\'calendar\')" 
                                :class="currentView === \'calendar\' ? \'active\' : \'\'"
                                class="view-option p-4 rounded-lg border-2 transition-all hover:scale-105">
                            <svg class="w-8 h-8 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            <span class="text-sm font-medium">Calendar</span>
                            <kbd class="text-xs mt-1 opacity-60">⌘4</kbd>
                        </button>
                        
                        <button @click="switchView(\'timeline\')" 
                                :class="currentView === \'timeline\' ? \'active\' : \'\'"
                                class="view-option p-4 rounded-lg border-2 transition-all hover:scale-105">
                            <svg class="w-8 h-8 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <span class="text-sm font-medium">Timeline</span>
                            <kbd class="text-xs mt-1 opacity-60">⌘5</kbd>
                        </button>
                    </div>
                    
                    <div class="mt-6 text-center text-sm text-gray-500">
                        <p>Press number keys 1-5 to quickly switch views</p>
                    </div>
                </div>
            '))
            ->modalWidth('2xl')
            ->modalHeading('Choose View Type');
    }
    
    /**
     * Get export action with multiple formats
     */
    protected static function getExportAction(): Action
    {
        return Action::make('export')
            ->label('Export')
            ->icon('heroicon-o-arrow-down-tray')
            ->color('gray')
            ->size(ActionSize::Small)
            ->form([
                Select::make('format')
                    ->label('Export Format')
                    ->options([
                        'csv' => 'CSV',
                        'xlsx' => 'Excel',
                        'pdf' => 'PDF',
                        'json' => 'JSON',
                    ])
                    ->default('csv')
                    ->required(),
                    
                Select::make('columns')
                    ->label('Columns to Export')
                    ->multiple()
                    ->options(fn () => static::getExportableColumns())
                    ->default(fn () => array_keys(static::getExportableColumns())),
            ])
            ->action(fn (array $data) => static::exportRecords($data));
    }
    
    /**
     * Get smart filter action
     */
    protected static function getSmartFilterAction(): Action
    {
        return Action::make('smart-filter')
            ->label('Smart Filter')
            ->icon('heroicon-o-sparkles')
            ->color('primary')
            ->size(ActionSize::Small)
            ->extraAttributes([
                'x-data' => '{ open: false }',
                '@click' => 'open = !open; $nextTick(() => $refs.smartFilterInput?.focus())',
                'class' => 'smart-filter-trigger',
            ])
            ->modalContent(new HtmlString('
                <div class="smart-filter-modal" x-data="smartFilter">
                    <div class="space-y-4">
                        <div>
                            <input 
                                x-ref="smartFilterInput"
                                x-model="query"
                                @input="parseQuery"
                                type="text" 
                                placeholder="Type naturally: \'calls from last week with positive sentiment\'"
                                class="w-full px-4 py-3 text-lg border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200"
                                autocomplete="off"
                            />
                            <p class="mt-2 text-sm text-gray-500">
                                Examples: "created today", "high priority", "contains email", "assigned to John"
                            </p>
                        </div>
                        
                        <div x-show="suggestions.length > 0" class="border-t pt-4">
                            <h4 class="text-sm font-medium text-gray-700 mb-2">Suggestions:</h4>
                            <div class="flex flex-wrap gap-2">
                                <template x-for="suggestion in suggestions" :key="suggestion">
                                    <button 
                                        @click="applySuggestion(suggestion)"
                                        class="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-full text-sm transition-colors"
                                        x-text="suggestion">
                                    </button>
                                </template>
                            </div>
                        </div>
                        
                        <div x-show="filters.length > 0" class="border-t pt-4">
                            <h4 class="text-sm font-medium text-gray-700 mb-2">Applied Filters:</h4>
                            <div class="space-y-2">
                                <template x-for="filter in filters" :key="filter.id">
                                    <div class="flex items-center justify-between p-2 bg-blue-50 rounded-lg">
                                        <span class="text-sm" x-text="filter.label"></span>
                                        <button @click="removeFilter(filter.id)" class="text-red-500 hover:text-red-700">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                            </svg>
                                        </button>
                                    </div>
                                </template>
                            </div>
                        </div>
                    </div>
                </div>
            '))
            ->modalWidth('2xl')
            ->modalHeading('Smart Natural Language Filter')
            ->modalSubmitActionLabel('Apply Filters')
            ->modalCancelActionLabel('Cancel');
    }
    
    /**
     * Make columns inline editable
     */
    protected static function makeInlineEditable(TextColumn $column, string $field): TextColumn
    {
        if (!static::$hasInlineEditing) {
            return $column;
        }
        
        return $column
            ->extraAttributes([
                'x-data' => '{ editing: false, value: null }',
                'x-on:dblclick' => 'editing = true; value = $el.innerText',
                'class' => 'inline-editable cursor-text',
                'data-field' => $field,
            ])
            ->html()
            ->formatStateUsing(function ($state, $record) use ($field) {
                $value = htmlspecialchars($state ?? '');
                $recordId = $record->getKey();
                
                return <<<HTML
                    <div class="inline-edit-wrapper">
                        <span x-show="!editing" x-on:dblclick="editing = true; value = '$value'">{$value}</span>
                        <input 
                            x-show="editing" 
                            x-model="value" 
                            x-on:blur="editing = false; \$wire.updateField('$recordId', '$field', value)"
                            x-on:keydown.enter="editing = false; \$wire.updateField('$recordId', '$field', value)"
                            x-on:keydown.escape="editing = false; value = '$value'"
                            type="text" 
                            class="inline-edit-input"
                            x-init="\$el.focus()"
                        />
                    </div>
                HTML;
            });
    }
    
    /**
     * Get smart filters based on the model
     */
    protected static function getSmartFilters(): array
    {
        return [];
    }
    
    /**
     * Get record classes for styling
     */
    protected static function getRecordClasses($record): string
    {
        return 'ultimate-record hover:shadow-md transition-all duration-200';
    }
    
    /**
     * Optimize query for performance
     */
    protected static function optimizeQuery(Builder $query): Builder
    {
        // Override in child classes to add eager loading
        return $query;
    }
    
    /**
     * Get quick edit form fields
     */
    protected static function getQuickEditForm(): array
    {
        return [];
    }
    
    /**
     * Quick edit multiple records
     */
    protected static function quickEditRecords($records, array $data): void
    {
        foreach ($records as $record) {
            $record->update($data);
        }
        
        Notification::make()
            ->title('Records updated successfully')
            ->success()
            ->send();
    }
    
    /**
     * Get exportable columns
     */
    protected static function getExportableColumns(): array
    {
        return [];
    }
    
    /**
     * Export records in specified format
     */
    protected static function exportRecords(array $data): mixed
    {
        // Implementation would handle different export formats
        Notification::make()
            ->title('Export started')
            ->body('Your export will be ready shortly.')
            ->success()
            ->send();
            
        return null;
    }
    
    /**
     * Get default bulk actions
     */
    protected static function getDefaultBulkActions(): array
    {
        return [];
    }
}