<?php

namespace App\Filament\Admin\Resources;

use App\Filament\Admin\Resources\UltimateCustomerResource\Pages;
use App\Filament\Admin\Resources\UltimateCustomerResource\RelationManagers;
use App\Filament\Admin\Resources\Concerns\MultiTenantResource;
use App\Filament\Admin\Resources\Concerns\UltimateResourceUI;
use App\Filament\Admin\Resources\Concerns\HandlesNullRecords;
use App\Models\Customer;
use App\Models\Company;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Filament\Tables\Columns\TextColumn;
use App\Filament\Tables\Columns\SafeTextColumn;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Support\Enums\FontWeight;
use Filament\Tables\Enums\FiltersLayout;
use Filament\Tables\Actions\Action;
use Filament\Tables\Actions\BulkAction;
use Illuminate\Database\Eloquent\Collection;
use Filament\Notifications\Notification;
use Filament\Forms\Components\ViewField;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\HtmlString;
use Carbon\Carbon;

class UltimateCustomerResource extends Resource
{
    use MultiTenantResource, UltimateResourceUI, HandlesNullRecords;
    
    protected static ?string $model = Customer::class;
    protected static ?string $navigationIcon = 'heroicon-o-users';
    protected static ?string $navigationLabel = 'Kunden';
    protected static ?int $navigationSort = 3;
    protected static ?string $slug = 'ultimate-customers';
    
    public static function canViewAny(): bool
    {
        return true;
    }
    
    public static function shouldRegisterNavigation(): bool
    {
        return false; // Temporarily disable from navigation
    }
    
    public static function canView($record): bool
    {
        return true;
    }

    public static function table(Table $table): Table
    {
        $table = static::configureTableWithNullSafety($table);
        
        return $table
                ->columns(self::getTableColumns())
                ->filters(self::getTableFilters())
                ->actions(self::getTableActions())
                ->bulkActions(self::getTableBulkActions())
                ->defaultSort('created_at', 'desc')
                ->poll('30s')
                ->striped()
                ->searchDebounce('500ms')
                ->persistColumnSearchesInSession()
                ->persistFiltersInSession()
                ->persistSortInSession()
                ->extremePaginationLinks()
                ->paginated([10, 25, 50, 100])
                ->recordClasses(fn ($record) => match(true) {
                    !$record => '',
                    $record->is_vip ?? false => 'border-l-4 border-yellow-500',
                    ($record->no_show_count ?? 0) > 2 => 'border-l-4 border-red-500',
                    ($record->appointment_count ?? 0) > 10 => 'border-l-4 border-green-500',
                    default => '',
                })
                ->contentGrid(fn () => self::getContentGrid())
                ->modifyQueryUsing(fn ($query) => $query
                    ->whereNotNull('customers.id')
                    ->withCount(['appointments', 'calls'])
                    ->with(['company']))
                ->filtersLayout(FiltersLayout::Dropdown)
                ->filtersFormColumns(3)
                ->filtersTriggerAction(
                    fn (Action $action) => $action
                        ->button()
                        ->label('Smart Filters')
                        ->icon('heroicon-m-funnel')
                        ->badge(fn () => self::getActiveFiltersCount())
                        ->badgeColor('primary')
                );
    }
    
    protected static function getTableColumns(): array
    {
        return [
            Tables\Columns\Layout\Stack::make([
                Tables\Columns\Layout\Split::make([
                    Tables\Columns\Layout\Stack::make([
                        SafeTextColumn::make('name')
                            ->label('Name')
                            ->searchable()
                            ->weight(FontWeight::Bold)
                            ->size('lg')
                            ->icon('heroicon-m-user')
                            ->iconColor('primary')
                            ->extraAttributes([
                                'class' => 'inline-editable',
                                'data-field' => 'name',
                            ]),
                            
                        Tables\Columns\Layout\Split::make([
                            SafeTextColumn::make('email')
                                ->label('E-Mail')
                                ->searchable()
                                ->icon('heroicon-m-envelope')
                                ->iconColor('gray')
                                ->size('sm')
                                ->color('gray')
                                ->copyable()
                                ->copyMessage('E-Mail kopiert!')
                                ->placeholder('Keine E-Mail')
                                ->extraAttributes([
                                    'class' => 'inline-editable',
                                    'data-field' => 'email',
                                ]),
                                
                            SafeTextColumn::make('phone')
                                ->label('Telefon')
                                ->searchable()
                                ->icon('heroicon-m-phone')
                                ->iconColor('gray')
                                ->size('sm')
                                ->color('gray')
                                ->copyable()
                                ->copyMessage('Nummer kopiert!')
                                ->placeholder('Keine Nummer')
                                ->extraAttributes([
                                    'class' => 'inline-editable',
                                    'data-field' => 'phone',
                                ]),
                        ])->from('md'),
                    ]),
                    
                    Tables\Columns\Layout\Stack::make([
                        SafeTextColumn::make('customer_type')
                            ->label('Typ')
                            ->badge()
                            ->formatStateUsing(fn (?string $state): string => match ($state) {
                                'private' => 'Privat',
                                'business' => 'GeschÃ¤ft',
                                'vip' => 'VIP',
                                default => ucfirst($state ?? ''),
                            })
                            ->color(fn (?string $state): string => match ($state) {
                                'vip' => 'warning',
                                'business' => 'info',
                                default => 'gray',
                            })
                            ->icon(fn (?string $state): string => match ($state) {
                                'vip' => 'heroicon-o-star',
                                'business' => 'heroicon-o-briefcase',
                                default => 'heroicon-o-user',
                            }),
                            
                        SafeTextColumn::make('status')
                            ->label('Status')
                            ->badge()
                            ->formatStateUsing(fn (?string $state): string => match ($state) {
                                'active' => 'Aktiv',
                                'inactive' => 'Inaktiv',
                                'blocked' => 'Gesperrt',
                                default => ucfirst($state ?? ''),
                            })
                            ->color(fn (?string $state): string => match ($state) {
                                'active' => 'success',
                                'inactive' => 'gray',
                                'blocked' => 'danger',
                                default => 'gray',
                            }),
                    ])->alignEnd(),
                ])->from('md'),
                
                Tables\Columns\Layout\Split::make([
                    SafeTextColumn::make('appointments_count')
                        ->label('Termine')
                        ->counts('appointments')
                        ->badge()
                        ->color(fn ($state) => match(true) {
                            ($state ?? 0) > 10 => 'success',
                            ($state ?? 0) > 5 => 'info',
                            ($state ?? 0) > 0 => 'gray',
                            default => 'gray',
                        })
                        ->icon('heroicon-m-calendar-days')
                        ->formatStateUsing(fn ($state) => ($state ?? 0) . ' Termine'),
                        
                    SafeTextColumn::make('calls_count')
                        ->label('Anrufe')
                        ->counts('calls')
                        ->badge()
                        ->color('gray')
                        ->icon('heroicon-m-phone')
                        ->formatStateUsing(fn ($state) => ($state ?? 0) . ' Anrufe'),
                        
                    SafeTextColumn::make('no_show_count')
                        ->label('No-Shows')
                        ->badge()
                        ->color(fn ($state) => match(true) {
                            ($state ?? 0) > 2 => 'danger',
                            ($state ?? 0) > 0 => 'warning',
                            default => 'success',
                        })
                        ->icon('heroicon-m-exclamation-triangle')
                        ->formatStateUsing(fn ($state) => ($state ?? 0) . ' No-Shows')
                        ->visible(fn ($state) => ($state ?? 0) > 0),
                ])->from('md'),
                
                Tables\Columns\Layout\Panel::make([
                    Tables\Columns\Layout\Split::make([
                        SafeTextColumn::make('last_appointment_date')
                            ->label('Letzter Termin')
                            ->getStateUsing(fn ($record) => 
                                $record?->appointments()
                                    ->where('status', 'completed')
                                    ->latest('starts_at')
                                    ->first()?->starts_at
                            )
                            ->date('d.m.Y')
                            ->placeholder('Noch kein Termin')
                            ->icon('heroicon-m-calendar')
                            ->iconColor('gray')
                            ->size('sm'),
                            
                        SafeTextColumn::make('next_appointment_date')
                            ->label('NÃ¤chster Termin')
                            ->getStateUsing(fn ($record) => 
                                $record?->appointments()
                                    ->whereIn('status', ['scheduled', 'confirmed'])
                                    ->where('starts_at', '>', now())
                                    ->oldest('starts_at')
                                    ->first()?->starts_at
                            )
                            ->dateTime('d.m.Y H:i')
                            ->placeholder('Kein Termin geplant')
                            ->icon('heroicon-m-calendar-days')
                            ->iconColor('primary')
                            ->size('sm')
                            ->weight(FontWeight::SemiBold)
                            ->color('primary'),
                    ]),
                ])->collapsed(),
                
                Tables\Columns\Layout\Split::make([
                    SafeTextColumn::make('created_at')
                        ->label('Kunde seit')
                        ->date('d.m.Y')
                        ->sortable()
                        ->icon('heroicon-m-clock')
                        ->iconColor('gray')
                        ->size('sm')
                        ->color('gray')
                        ->default(''),
                        
                    SafeTextColumn::make('lifetime_value')
                        ->label('Umsatz')
                        ->getStateUsing(fn ($record) => 
                            $record?->appointments()
                                ->where('status', 'completed')
                                ->join('services', 'appointments.service_id', '=', 'services.id')
                                ->sum('services.price') ?? 0
                        )
                        ->money('EUR')
                        ->badge()
                        ->color('success')
                        ->alignEnd(),
                ])->from('md'),
            ])->space(2),
            
            // Hidden columns for search and filtering
            // Temporarily removed company_name column due to null record issue
                
            SafeTextColumn::make('address')
                ->label('Adresse')
                ->searchable()
                ->toggleable(isToggledHiddenByDefault: true),
                
            SafeTextColumn::make('notes')
                ->label('Notizen')
                ->searchable()
                ->toggleable(isToggledHiddenByDefault: true),
        ];
    }
    
    protected static function getTableFilters(): array
    {
        return array_merge(
            static::getMultiTenantFilters(),
            [
                Tables\Filters\SelectFilter::make('customer_type')
                    ->label('Kundentyp')
                    ->multiple()
                    ->options([
                        'private' => 'Privat',
                        'business' => 'GeschÃ¤ft',
                        'vip' => 'VIP',
                    ]),
                    
                Tables\Filters\SelectFilter::make('status')
                    ->label('Status')
                    ->multiple()
                    ->options([
                        'active' => 'Aktiv',
                        'inactive' => 'Inaktiv',
                        'blocked' => 'Gesperrt',
                    ])
                    ->default(['active']),
                    
                Tables\Filters\Filter::make('has_appointments')
                    ->label('Mit Terminen')
                    ->query(fn (Builder $query): Builder => 
                        $query->has('appointments')
                    ),
                    
                Tables\Filters\Filter::make('no_appointments')
                    ->label('Ohne Termine')
                    ->query(fn (Builder $query): Builder => 
                        $query->doesntHave('appointments')
                    ),
                    
                Tables\Filters\Filter::make('high_value')
                    ->label('High-Value Kunden')
                    ->query(fn (Builder $query): Builder => 
                        $query->withCount('appointments')
                            ->having('appointments_count', '>', 5)
                    ),
                    
                Tables\Filters\Filter::make('risk_customers')
                    ->label('Risiko-Kunden')
                    ->query(fn (Builder $query): Builder => 
                        $query->where('no_show_count', '>', 2)
                    ),
                    
                Tables\Filters\Filter::make('new_customers')
                    ->label('Neue Kunden')
                    ->query(fn (Builder $query): Builder => 
                        $query->where('created_at', '>=', now()->subDays(30))
                    ),
                    
                Tables\Filters\Filter::make('inactive_customers')
                    ->label('Inaktive Kunden')
                    ->query(fn (Builder $query): Builder => 
                        $query->whereDoesntHave('appointments', function ($q) {
                            $q->where('starts_at', '>=', now()->subMonths(6));
                        })
                    ),
                    
                Tables\Filters\Filter::make('birthday_this_month')
                    ->label('Geburtstag diesen Monat')
                    ->query(fn (Builder $query): Builder => 
                        $query->whereMonth('birthday', now()->month)
                    ),
            ]
        );
    }
    
    protected static function getTableActions(): array
    {
        return [
            Tables\Actions\ActionGroup::make([
                Tables\Actions\ViewAction::make()
                    ->modalWidth('7xl'),
                    
                Tables\Actions\EditAction::make(),
                    
                Tables\Actions\Action::make('create_appointment')
                    ->label('Termin buchen')
                    ->icon('heroicon-o-calendar-days')
                    ->color('success')
                    ->form([
                        Forms\Components\DateTimePicker::make('starts_at')
                            ->label('Termin')
                            ->required()
                            ->native(false)
                            ->displayFormat('d.m.Y H:i')
                            ->minutesStep(15)
                            ->minDate(now()),
                            
                        Forms\Components\Select::make('service_id')
                            ->label('Leistung')
                            ->relationship('company.services', 'name')
                            ->preload()
                            ->required()
                            ->searchable(),
                            
                        Forms\Components\Select::make('staff_id')
                            ->label('Mitarbeiter')
                            ->relationship('company.staff', 'name')
                            ->preload()
                            ->searchable(),
                            
                        Forms\Components\Select::make('branch_id')
                            ->label('Filiale')
                            ->relationship('company.branches', 'name')
                            ->preload()
                            ->required()
                            ->searchable(),
                            
                        Forms\Components\Textarea::make('notes')
                            ->label('Notizen')
                            ->rows(3),
                    ])
                    ->action(function (array $data, Customer $record) {
                        $appointment = \App\Models\Appointment::create([
                            'customer_id' => $record->id,
                            'company_id' => $record->company_id,
                            'branch_id' => $data['branch_id'],
                            'service_id' => $data['service_id'],
                            'staff_id' => $data['staff_id'] ?? null,
                            'starts_at' => $data['starts_at'],
                            'ends_at' => Carbon::parse($data['starts_at'])->addMinutes(60),
                            'status' => 'scheduled',
                            'notes' => $data['notes'] ?? null,
                            'source' => 'admin',
                        ]);
                        
                        Notification::make()
                            ->title('Termin erstellt')
                            ->success()
                            ->body('Der Termin wurde erfolgreich angelegt.')
                            ->send();
                    }),
                    
                Tables\Actions\Action::make('send_message')
                    ->label('Nachricht senden')
                    ->icon('heroicon-o-chat-bubble-left')
                    ->color('info')
                    ->form([
                        Forms\Components\Select::make('channel')
                            ->label('Kanal')
                            ->options([
                                'email' => 'E-Mail',
                                'sms' => 'SMS',
                                'whatsapp' => 'WhatsApp',
                            ])
                            ->default('email')
                            ->required()
                            ->reactive(),
                            
                        Forms\Components\TextInput::make('subject')
                            ->label('Betreff')
                            ->required()
                            ->visible(fn ($get) => $get('channel') === 'email'),
                            
                        Forms\Components\Textarea::make('message')
                            ->label('Nachricht')
                            ->required()
                            ->rows(5),
                            
                        Forms\Components\Toggle::make('save_as_template')
                            ->label('Als Vorlage speichern'),
                    ])
                    ->action(function (array $data, Customer $record) {
                        // Send message logic
                        Notification::make()
                            ->title('Nachricht gesendet')
                            ->success()
                            ->send();
                    }),
                    
                Tables\Actions\Action::make('add_note')
                    ->label('Notiz hinzufÃ¼gen')
                    ->icon('heroicon-o-pencil-square')
                    ->color('gray')
                    ->form([
                        Forms\Components\Textarea::make('note')
                            ->label('Notiz')
                            ->required()
                            ->rows(4),
                            
                        Forms\Components\Select::make('note_type')
                            ->label('Typ')
                            ->options([
                                'general' => 'Allgemein',
                                'preference' => 'PrÃ¤ferenz',
                                'medical' => 'Medizinisch',
                                'complaint' => 'Beschwerde',
                                'compliment' => 'Lob',
                            ])
                            ->default('general'),
                    ])
                    ->action(function (array $data, Customer $record) {
                        $record->notes()->create([
                            'content' => $data['note'],
                            'type' => $data['note_type'],
                            'user_id' => auth()->id(),
                        ]);
                        
                        Notification::make()
                            ->title('Notiz hinzugefÃ¼gt')
                            ->success()
                            ->send();
                    }),
                    
                Tables\Actions\Action::make('mark_vip')
                    ->label('Als VIP markieren')
                    ->icon('heroicon-o-star')
                    ->color('warning')
                    ->visible(fn ($record) => $record && $record->customer_type !== 'vip')
                    ->requiresConfirmation()
                    ->modalHeading('Als VIP markieren')
                    ->modalDescription('Dieser Kunde wird als VIP markiert und erhÃ¤lt bevorzugte Behandlung.')
                    ->action(function (Customer $record) {
                        $record->update(['customer_type' => 'vip']);
                        
                        Notification::make()
                            ->title('VIP Status aktiviert')
                            ->success()
                            ->send();
                    }),
                    
                Tables\Actions\Action::make('block_customer')
                    ->label('Kunde sperren')
                    ->icon('heroicon-o-no-symbol')
                    ->color('danger')
                    ->visible(fn ($record) => $record && $record->status !== 'blocked')
                    ->requiresConfirmation()
                    ->modalHeading('Kunde sperren')
                    ->form([
                        Forms\Components\Textarea::make('block_reason')
                            ->label('Grund der Sperrung')
                            ->required()
                            ->rows(3),
                    ])
                    ->action(function (array $data, Customer $record) {
                        $record->update([
                            'status' => 'blocked',
                            'block_reason' => $data['block_reason'],
                            'blocked_at' => now(),
                        ]);
                        
                        Notification::make()
                            ->title('Kunde gesperrt')
                            ->warning()
                            ->send();
                    }),
                    
                Tables\Actions\Action::make('merge_duplicate')
                    ->label('Duplikat zusammenfÃ¼hren')
                    ->icon('heroicon-o-arrows-pointing-in')
                    ->color('warning')
                    ->form([
                        Forms\Components\Select::make('target_customer_id')
                            ->label('Mit diesem Kunden zusammenfÃ¼hren')
                            ->searchable()
                            ->getSearchResultsUsing(fn (string $search): array =>
                                Customer::whereNotNull('id')
                                    ->where(function($q) use ($search) {
                                        $q->where('name', 'like', "%{$search}%")
                                          ->orWhere('email', 'like', "%{$search}%")
                                          ->orWhere('phone', 'like', "%{$search}%");
                                    })
                                    ->limit(10)
                                    ->pluck('name', 'id')
                                    ->toArray()
                            )
                            ->required(),
                    ])
                    ->action(function (array $data, Customer $record) {
                        // Merge customers logic
                        $targetCustomer = Customer::find($data['target_customer_id']);
                        
                        // Move all appointments
                        $record->appointments()->update(['customer_id' => $targetCustomer->id]);
                        
                        // Move all calls
                        $record->calls()->update(['customer_id' => $targetCustomer->id]);
                        
                        // Merge data
                        if (empty($targetCustomer->email) && !empty($record->email)) {
                            $targetCustomer->email = $record->email;
                        }
                        if (empty($targetCustomer->phone) && !empty($record->phone)) {
                            $targetCustomer->phone = $record->phone;
                        }
                        
                        $targetCustomer->save();
                        $record->delete();
                        
                        Notification::make()
                            ->title('Kunden zusammengefÃ¼hrt')
                            ->success()
                            ->send();
                    }),
            ])->tooltip('Aktionen'),
            
            // Quick actions
            Tables\Actions\Action::make('quick_call')
                ->label('')
                ->icon('heroicon-o-phone')
                ->color('primary')
                ->tooltip('Anrufen')
                ->url(fn ($record) => $record ? "tel:{$record->phone}" : null)
                ->openUrlInNewTab()
                ->visible(fn ($record) => $record && !empty($record->phone))
                ->iconButton(),
                
            Tables\Actions\Action::make('quick_email')
                ->label('')
                ->icon('heroicon-o-envelope')
                ->color('info')
                ->tooltip('E-Mail senden')
                ->url(fn ($record) => $record ? "mailto:{$record->email}" : null)
                ->visible(fn ($record) => $record && !empty($record->email))
                ->iconButton(),
                
            Tables\Actions\Action::make('quick_whatsapp')
                ->label('')
                ->icon('heroicon-o-chat-bubble-left-ellipsis')
                ->color('success')
                ->tooltip('WhatsApp')
                ->url(fn ($record) => $record && $record->phone ? "https://wa.me/" . preg_replace('/[^0-9]/', '', $record->phone) : null)
                ->openUrlInNewTab()
                ->visible(fn ($record) => $record && !empty($record->phone))
                ->iconButton(),
        ];
    }
    
    protected static function getTableBulkActions(): array
    {
        return [
            BulkAction::make('send_campaign')
                ->label('Kampagne senden')
                ->icon('heroicon-o-megaphone')
                ->color('primary')
                ->form([
                    Forms\Components\Select::make('campaign_type')
                        ->label('Kampagnentyp')
                        ->options([
                            'birthday' => 'GeburtstagswÃ¼nsche',
                            'reminder' => 'Terminerinnerung',
                            'promotion' => 'Angebot',
                            'survey' => 'Kundenbefragung',
                        ])
                        ->required(),
                        
                    Forms\Components\Select::make('channel')
                        ->label('Kanal')
                        ->options([
                            'email' => 'E-Mail',
                            'sms' => 'SMS',
                            'both' => 'E-Mail & SMS',
                        ])
                        ->default('email')
                        ->required(),
                        
                    Forms\Components\RichEditor::make('content')
                        ->label('Inhalt')
                        ->required()
                        ->toolbarButtons([
                            'bold',
                            'italic',
                            'link',
                            'bulletList',
                            'orderedList',
                        ]),
                ])
                ->action(function (Collection $records, array $data) {
                    // Send campaign logic
                    Notification::make()
                        ->title('Kampagne gestartet')
                        ->success()
                        ->body('Die Kampagne wird an ' . count($records) . ' Kunden gesendet.')
                        ->send();
                }),
                
            BulkAction::make('add_tag')
                ->label('Tag hinzufÃ¼gen')
                ->icon('heroicon-o-tag')
                ->color('info')
                ->form([
                    Forms\Components\TextInput::make('tag')
                        ->label('Tag')
                        ->required()
                        ->placeholder('z.B. Newsletter, VIP, etc.'),
                ])
                ->action(function (Collection $records, array $data) {
                    foreach ($records as $record) {
                        $record->tags()->create(['name' => $data['tag']]);
                    }
                    
                    Notification::make()
                        ->title('Tag hinzugefÃ¼gt')
                        ->success()
                        ->body('Der Tag wurde zu ' . count($records) . ' Kunden hinzugefÃ¼gt.')
                        ->send();
                }),
                
            BulkAction::make('update_status')
                ->label('Status Ã¤ndern')
                ->icon('heroicon-o-arrow-path')
                ->color('warning')
                ->form([
                    Forms\Components\Select::make('status')
                        ->label('Neuer Status')
                        ->options([
                            'active' => 'Aktiv',
                            'inactive' => 'Inaktiv',
                            'blocked' => 'Gesperrt',
                        ])
                        ->required(),
                ])
                ->action(function (Collection $records, array $data) {
                    $records->each->update(['status' => $data['status']]);
                    
                    Notification::make()
                        ->title('Status aktualisiert')
                        ->success()
                        ->body(count($records) . ' Kunden wurden aktualisiert.')
                        ->send();
                }),
                
            BulkAction::make('export')
                ->label('Exportieren')
                ->icon('heroicon-o-arrow-down-tray')
                ->color('gray')
                ->form([
                    Forms\Components\Select::make('format')
                        ->label('Format')
                        ->options([
                            'csv' => 'CSV',
                            'xlsx' => 'Excel',
                            'pdf' => 'PDF',
                            'vcard' => 'vCard',
                        ])
                        ->default('csv')
                        ->required(),
                        
                    Forms\Components\CheckboxList::make('columns')
                        ->label('Spalten')
                        ->options([
                            'name' => 'Name',
                            'email' => 'E-Mail',
                            'phone' => 'Telefon',
                            'address' => 'Adresse',
                            'birthday' => 'Geburtstag',
                            'customer_type' => 'Typ',
                            'appointment_count' => 'Anzahl Termine',
                            'last_appointment' => 'Letzter Termin',
                            'lifetime_value' => 'Umsatz',
                            'notes' => 'Notizen',
                        ])
                        ->default(['name', 'email', 'phone', 'customer_type'])
                        ->columns(2),
                ])
                ->action(function (Collection $records, array $data) {
                    // Export logic here
                    return response()->streamDownload(function () use ($records, $data) {
                        // Generate export file
                    }, 'customers-export.' . $data['format']);
                }),
                
            BulkAction::make('delete_inactive')
                ->label('Inaktive lÃ¶schen')
                ->icon('heroicon-o-trash')
                ->color('danger')
                ->requiresConfirmation()
                ->modalHeading('Inaktive Kunden lÃ¶schen')
                ->modalDescription('Alle ausgewÃ¤hlten inaktiven Kunden ohne Termine in den letzten 12 Monaten werden gelÃ¶scht.')
                ->action(function (Collection $records) {
                    $deleted = 0;
                    foreach ($records as $record) {
                        if ($record->appointments()->where('starts_at', '>=', now()->subYear())->count() === 0) {
                            $record->delete();
                            $deleted++;
                        }
                    }
                    
                    Notification::make()
                        ->title('Kunden gelÃ¶scht')
                        ->warning()
                        ->body($deleted . ' inaktive Kunden wurden gelÃ¶scht.')
                        ->send();
                }),
        ];
    }
    
    protected static function getActiveFiltersCount(): ?string
    {
        // Count active filters
        $count = 0;
        // Implementation here
        return $count > 0 ? (string) $count : null;
    }

    public static function getRelations(): array
    {
        return [
            // RelationManagers\AppointmentsRelationManager::class,
            // RelationManagers\CallsRelationManager::class,
            // RelationManagers\NotesRelationManager::class,
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\UltimateListCustomers::route('/'),
            'create' => Pages\CreateCustomer::route('/create'),
            'edit' => Pages\EditCustomer::route('/{record}/edit'),
            'view' => Pages\ViewCustomer::route('/{record}'),
        ];
    }
    
    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::where('created_at', '>=', today())->count();
    }
    
    public static function getNavigationBadgeColor(): ?string
    {
        return static::getModel()::where('created_at', '>=', today())->count() > 0 ? 'primary' : 'gray';
    }
}