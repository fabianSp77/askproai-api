<?php

namespace App\Filament\Admin\Resources;

use App\Filament\Admin\Resources\AppointmentResource\Pages;
use App\Models\Appointment;
use App\Filament\Components\StatusBadge;
use App\Filament\Components\ActionButton;
use App\Filament\Components\DateRangePicker;
use App\Filament\Components\SearchableSelect;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Tables;
use Filament\Tables\Table;
use Filament\Support\Enums\MaxWidth;
use Filament\Notifications\Notification;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\HtmlString;

class AppointmentResource extends EnhancedResourceSimple
{
    protected static ?string $model = Appointment::class;
    protected static ?string $navigationIcon = 'heroicon-o-calendar';
    protected static ?string $navigationLabel = 'Termine';
    protected static ?string $pluralLabel = 'Termine';
    protected static ?string $label = 'Termin';
    protected static ?string $navigationGroup = 'Geschäftsvorgänge';
    protected static ?int $navigationSort = 10;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('Termindetails')
                    ->description('Grundlegende Informationen zum Termin')
                    ->icon('heroicon-o-calendar-days')
                    ->schema([
                        Forms\Components\Grid::make(3)
                            ->schema([
                                SearchableSelect::customer('customer_id')
                                    ->required(),
                                    
                                SearchableSelect::service('service_id')
                                    ->reactive()
                                    ->afterStateUpdated(function ($state, Forms\Set $set) {
                                        if ($state) {
                                            $service = \App\Models\Service::find($state);
                                            if ($service && $service->duration) {
                                                // Auto-calculate end time based on service duration
                                                $set('duration_minutes', $service->duration);
                                            }
                                        }
                                    }),
                                    
                                SearchableSelect::staff('staff_id')
                                    ->reactive(),
                            ]),
                            
                        Forms\Components\Grid::make(3)
                            ->schema([
                                Forms\Components\DateTimePicker::make('starts_at')
                                    ->label('Beginn')
                                    ->required()
                                    ->native(false)
                                    ->minutesStep(15)
                                    ->seconds(false)
                                    ->reactive()
                                    ->afterStateUpdated(function ($state, Forms\Get $get, Forms\Set $set) {
                                        if ($state && $duration = $get('duration_minutes')) {
                                            $set('ends_at', \Carbon\Carbon::parse($state)->addMinutes($duration));
                                        }
                                    }),
                                    
                                Forms\Components\DateTimePicker::make('ends_at')
                                    ->label('Ende')
                                    ->required()
                                    ->native(false)
                                    ->minutesStep(15)
                                    ->seconds(false)
                                    ->minDate(fn (Forms\Get $get) => $get('starts_at')),
                                    
                                Forms\Components\Hidden::make('duration_minutes'),
                                    
                                SearchableSelect::status('status', [
                                    'pending' => 'Ausstehend',
                                    'confirmed' => 'Bestätigt',
                                    'completed' => 'Abgeschlossen',
                                    'cancelled' => 'Abgesagt',
                                    'no_show' => 'Nicht erschienen',
                                ])
                                ->default('pending')
                                ->required(),
                            ]),
                            
                        SearchableSelect::branch('branch_id')
                            ->columnSpanFull(),
                            
                        Forms\Components\Textarea::make('notes')
                            ->label('Notizen')
                            ->rows(3)
                            ->columnSpanFull()
                            ->helperText('Interne Notizen zum Termin'),
                    ]),
                    
                Forms\Components\Section::make('Konfliktprüfung')
                    ->description('Überprüfung auf Terminüberschneidungen')
                    ->icon('heroicon-o-exclamation-triangle')
                    ->schema([
                        Forms\Components\Placeholder::make('conflict_check')
                            ->content(function (Forms\Get $get) {
                                $staffId = $get('staff_id');
                                $startsAt = $get('starts_at');
                                $endsAt = $get('ends_at');
                                
                                if (!$staffId || !$startsAt || !$endsAt) {
                                    return new HtmlString('<div class="text-gray-500">Wählen Sie Mitarbeiter und Zeit aus, um Konflikte zu prüfen.</div>');
                                }
                                
                                // Check for conflicts
                                $conflicts = Appointment::where('staff_id', $staffId)
                                    ->where(function ($query) use ($startsAt, $endsAt) {
                                        $query->whereBetween('starts_at', [$startsAt, $endsAt])
                                            ->orWhereBetween('ends_at', [$startsAt, $endsAt])
                                            ->orWhere(function ($q) use ($startsAt, $endsAt) {
                                                $q->where('starts_at', '<=', $startsAt)
                                                  ->where('ends_at', '>=', $endsAt);
                                            });
                                    })
                                    ->whereNotIn('status', ['cancelled'])
                                    ->exists();
                                    
                                if ($conflicts) {
                                    return new HtmlString('<div class="bg-red-50 dark:bg-red-900/20 p-3 rounded-lg border border-red-200 dark:border-red-800">
                                        <div class="flex items-center space-x-2">
                                            <svg class="w-5 h-5 text-red-600 dark:text-red-400" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                                            </svg>
                                            <span class="text-red-700 dark:text-red-300 font-medium">Konflikt erkannt!</span>
                                        </div>
                                        <p class="text-sm text-red-600 dark:text-red-400 mt-1">Der Mitarbeiter hat bereits einen Termin zu dieser Zeit.</p>
                                    </div>');
                                }
                                
                                return new HtmlString('<div class="bg-green-50 dark:bg-green-900/20 p-3 rounded-lg border border-green-200 dark:border-green-800">
                                    <div class="flex items-center space-x-2">
                                        <svg class="w-5 h-5 text-green-600 dark:text-green-400" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                                        </svg>
                                        <span class="text-green-700 dark:text-green-300 font-medium">Keine Konflikte</span>
                                    </div>
                                    <p class="text-sm text-green-600 dark:text-green-400 mt-1">Der Termin kann gebucht werden.</p>
                                </div>');
                            })
                            ->columnSpanFull(),
                    ])
                    ->collapsed()
                    ->reactive(),
            ]);
    }

    public static function table(Table $table): Table
    {
        $table = parent::enhanceTable($table);
        
        return $table
            ->modifyQueryUsing(fn ($query) => $query->with(['customer', 'staff', 'branch', 'service']))
            ->striped()
            ->columns([
                Tables\Columns\TextColumn::make('id')
                    ->label('ID')
                    ->sortable()
                    ->searchable()
                    ->toggleable(isToggledHiddenByDefault: true),
                    
                Tables\Columns\TextColumn::make('customer.name')
                    ->label('Kunde')
                    ->sortable()
                    ->searchable()
                    ->icon('heroicon-m-user')
                    ->iconPosition('before')
                    ->default('Kein Kunde')
                    ->description(fn ($record) => $record->customer?->phone ?? ''),
                    
                Tables\Columns\TextColumn::make('service.name')
                    ->label('Service')
                    ->sortable()
                    ->searchable()
                    ->badge()
                    ->default('Kein Service')
                    ->color('info'),
                    
                Tables\Columns\TextColumn::make('staff.name')
                    ->label('Mitarbeiter')
                    ->sortable()
                    ->searchable()
                    ->icon('heroicon-m-user-circle')
                    ->default('Kein Mitarbeiter')
                    ->iconPosition('before'),
                    
                Tables\Columns\TextColumn::make('starts_at')
                    ->label('Datum & Zeit')
                    ->dateTime('d.m.Y H:i')
                    ->sortable()
                    ->description(function ($record) {
                        if (!$record->starts_at || !$record->ends_at) return null;
                        $duration = \Carbon\Carbon::parse($record->starts_at)->diffInMinutes($record->ends_at);
                        return $duration . ' Minuten';
                    })
                    ->color(function ($record) {
                        $startsAt = \Carbon\Carbon::parse($record->starts_at);
                        if ($startsAt->isPast()) return 'gray';
                        if ($startsAt->isToday()) return 'warning';
                        if ($startsAt->isTomorrow()) return 'info';
                        return null;
                    }),
                    
                StatusBadge::appointmentStatus('status'),
                
                Tables\Columns\TextColumn::make('branch.name')
                    ->label('Filiale')
                    ->sortable()
                    ->toggleable()
                    ->badge()
                    ->default('Keine Filiale')
                    ->color('success'),
                    
                Tables\Columns\IconColumn::make('checked_in_at')
                    ->label('Check-in')
                    ->boolean()
                    ->trueIcon('heroicon-o-check-badge')
                    ->falseIcon('heroicon-o-x-circle')
                    ->trueColor('success')
                    ->falseColor('gray')
                    ->toggleable(),
                    
                Tables\Columns\TextColumn::make('price')
                    ->label('Umsatz')
                    ->money('EUR')
                    ->sortable()
                    ->default('0.00')
                    ->color(fn ($state) => $state > 100 ? 'success' : null)
                    ->icon(fn ($state) => $state > 100 ? 'heroicon-m-arrow-trending-up' : null)
                    ->iconPosition('after'),
                    
                Tables\Columns\TextColumn::make('created_at')
                    ->label('Erstellt')
                    ->dateTime('d.m.Y H:i')
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('status')
                    ->label('Status')
                    ->options([
                        'pending' => 'Ausstehend',
                        'confirmed' => 'Bestätigt',
                        'completed' => 'Abgeschlossen',
                        'cancelled' => 'Abgesagt',
                        'no_show' => 'Nicht erschienen',
                    ])
                    ->multiple(),
                    
                DateRangePicker::withPresets('starts_at', 'Termin'),
                
                // Temporarily disabled filters due to null relationship issues
                // TODO: Re-enable when data integrity is fixed
                    
                Tables\Filters\TernaryFilter::make('upcoming')
                    ->label('Bevorstehend')
                    ->queries(
                        true: fn (Builder $query) => $query->where('starts_at', '>=', now()),
                        false: fn (Builder $query) => $query->where('starts_at', '<', now()),
                    ),
            ], layout: Tables\Enums\FiltersLayout::AboveContentCollapsible)
            ->actions([
                Tables\Actions\ActionGroup::make([
                    Tables\Actions\ViewAction::make()
                        ->modalWidth(MaxWidth::FiveExtraLarge)
                        ->modalContent(fn ($record) => view('filament.modals.appointment-details', [
                            'appointment' => $record,
                        ])),
                    Tables\Actions\EditAction::make(),
                    ActionButton::checkIn()
                        ->visible(fn ($record) => !$record->checked_in_at && $record->status !== 'cancelled'),
                    ActionButton::cancel(),
                    ActionButton::reschedule(),
                    Tables\Actions\Action::make('sendReminder')
                        ->label('Erinnerung senden')
                        ->icon('heroicon-o-bell')
                        ->color('info')
                        ->requiresConfirmation()
                        ->modalDescription('Möchten Sie wirklich eine Erinnerung an den Kunden senden?')
                        ->action(function ($record) {
                            // Send reminder logic
                            Notification::make()
                                ->title('Erinnerung gesendet')
                                ->body('Die Terminerinnerung wurde erfolgreich an ' . $record->customer->name . ' versendet.')
                                ->success()
                                ->send();
                        })
                        ->visible(fn ($record) => $record->status === 'confirmed' && \Carbon\Carbon::parse($record->starts_at)->isFuture()),
                    Tables\Actions\Action::make('duplicate')
                        ->label('Duplizieren')
                        ->icon('heroicon-o-document-duplicate')
                        ->color('gray')
                        ->action(function ($record) {
                            $newAppointment = $record->replicate();
                            $newAppointment->starts_at = now()->addWeek();
                            $newAppointment->ends_at = now()->addWeek()->addMinutes($record->starts_at->diffInMinutes($record->ends_at));
                            $newAppointment->status = 'pending';
                            $newAppointment->checked_in_at = null;
                            $newAppointment->save();
                            
                            Notification::make()
                                ->title('Termin dupliziert')
                                ->body('Ein neuer Termin wurde für nächste Woche erstellt.')
                                ->success()
                                ->send();
                                
                            return redirect()->to(static::getUrl('edit', ['record' => $newAppointment]));
                        }),
                ]),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\BulkAction::make('bulkCancel')
                        ->label('Ausgewählte absagen')
                        ->icon('heroicon-o-x-circle')
                        ->color('danger')
                        ->requiresConfirmation()
                        ->form([
                            Forms\Components\Textarea::make('reason')
                                ->label('Grund')
                                ->required(),
                            Forms\Components\Toggle::make('notify')
                                ->label('Kunden benachrichtigen')
                                ->default(true),
                        ])
                        ->action(function ($records, array $data) {
                            $records->each(function ($record) use ($data) {
                                $record->update([
                                    'status' => 'cancelled',
                                    'cancellation_reason' => $data['reason'],
                                ]);
                            });
                            
                            Notification::make()
                                ->title('Termine abgesagt')
                                ->body($records->count() . ' Termine wurden abgesagt.')
                                ->warning()
                                ->send();
                        }),
                    Tables\Actions\BulkAction::make('bulkConfirm')
                        ->label('Ausgewählte bestätigen')
                        ->icon('heroicon-o-check-circle')
                        ->color('success')
                        ->requiresConfirmation()
                        ->action(function ($records) {
                            $confirmed = 0;
                            $records->each(function ($record) use (&$confirmed) {
                                if ($record->status === 'pending') {
                                    $record->update(['status' => 'confirmed']);
                                    $confirmed++;
                                }
                            });
                            
                            Notification::make()
                                ->title('Termine bestätigt')
                                ->body($confirmed . ' Termine wurden bestätigt.')
                                ->success()
                                ->send();
                        }),
                    Tables\Actions\BulkAction::make('bulkSendReminders')
                        ->label('Erinnerungen senden')
                        ->icon('heroicon-o-bell')
                        ->color('info')
                        ->requiresConfirmation()
                        ->form([
                            Forms\Components\Select::make('template')
                                ->label('Vorlage')
                                ->options([
                                    'reminder_24h' => '24 Stunden vorher',
                                    'reminder_2h' => '2 Stunden vorher',
                                    'reminder_custom' => 'Benutzerdefiniert',
                                ])
                                ->required(),
                            Forms\Components\Textarea::make('custom_message')
                                ->label('Nachricht')
                                ->visible(fn (Forms\Get $get) => $get('template') === 'reminder_custom')
                                ->required(fn (Forms\Get $get) => $get('template') === 'reminder_custom'),
                        ])
                        ->action(function ($records, array $data) {
                            $sent = 0;
                            $records->each(function ($record) use (&$sent) {
                                if ($record->status === 'confirmed' && \Carbon\Carbon::parse($record->starts_at)->isFuture()) {
                                    // Queue reminder
                                    $sent++;
                                }
                            });
                            
                            Notification::make()
                                ->title('Erinnerungen versendet')
                                ->body($sent . ' Erinnerungen wurden in die Warteschlange gestellt.')
                                ->success()
                                ->send();
                        }),
                    Tables\Actions\BulkAction::make('bulkExport')
                        ->label('Exportieren')
                        ->icon('heroicon-o-arrow-down-tray')
                        ->color('gray')
                        ->form([
                            Forms\Components\Select::make('format')
                                ->label('Format')
                                ->options([
                                    'pdf' => 'PDF',
                                    'excel' => 'Excel',
                                    'csv' => 'CSV',
                                ])
                                ->required(),
                        ])
                        ->action(function ($records, array $data) {
                            // Export logic
                            Notification::make()
                                ->title('Export gestartet')
                                ->body('Der Export wird vorbereitet.')
                                ->success()
                                ->send();
                        }),
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->headerActions([
                Tables\Actions\Action::make('calendarView')
                    ->label('Kalenderansicht')
                    ->icon('heroicon-o-calendar')
                    ->url(route('filament.admin.resources.appointments.calendar'))
                    ->openUrlInNewTab(),
            ])
            ->defaultSort('starts_at', 'asc')
            ->poll('30s');
    }

    public static function getRelations(): array
    {
        return [];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListAppointments::route('/'),
            'create' => Pages\CreateAppointment::route('/create'),
            'edit' => Pages\EditAppointment::route('/{record}/edit'),
            'calendar' => Pages\CalendarAppointments::route('/calendar'),
        ];
    }
    
    public static function getGloballySearchableAttributes(): array
    {
        return ['id', 'customer.name', 'customer.email', 'customer.phone', 'staff.name', 'service.name'];
    }
    
    public static function getGlobalSearchResultDetails($record): array
    {
        return [
            'Kunde' => $record->customer?->name,
            'Service' => $record->service?->name,
            'Datum' => $record->starts_at?->format('d.m.Y H:i'),
        ];
    }
    
    protected static function getExportColumns(): array
    {
        return [
            'id' => 'ID',
            'customer.name' => 'Kunde',
            'customer.email' => 'Kunde E-Mail',
            'customer.phone' => 'Kunde Telefon',
            'service.name' => 'Service',
            'staff.name' => 'Mitarbeiter',
            'branch.name' => 'Filiale',
            'starts_at' => 'Startzeit',
            'ends_at' => 'Endzeit',
            'status' => 'Status',
            'notes' => 'Notizen',
            'created_at' => 'Erstellt am',
        ];
    }
    
    protected static function getStatusOptions(): array
    {
        return [
            'pending' => 'Ausstehend',
            'confirmed' => 'Bestätigt',
            'completed' => 'Abgeschlossen',
            'cancelled' => 'Abgesagt',
            'no_show' => 'Nicht erschienen',
        ];
    }
}
