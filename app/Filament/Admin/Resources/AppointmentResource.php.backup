<?php

namespace App\Filament\Admin\Resources;

use App\Filament\Admin\Resources\AppointmentResource\Pages;
use App\Models\Appointment;
use App\Models\CalcomEventType;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Tables;
use Filament\Tables\Table;
use Filament\Resources\Resource;
use Filament\Support\Enums\MaxWidth;
use Filament\Notifications\Notification;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\HtmlString;
use Carbon\Carbon;

class AppointmentResource extends Resource
{
    protected static ?string $model = Appointment::class;
    protected static ?string $navigationIcon = 'heroicon-o-calendar';
    protected static ?string $navigationLabel = 'Termine';
    protected static ?string $pluralLabel = 'Termine';
    protected static ?string $label = 'Termin';
    protected static ?string $navigationGroup = 'Geschäftsvorgänge';
    protected static ?int $navigationSort = 10;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('Termindetails')
                    ->description('Grundlegende Informationen zum Termin')
                    ->icon('heroicon-o-calendar-days')
                    ->schema([
                        Forms\Components\Grid::make(3)
                            ->schema([
                                Forms\Components\Select::make('customer_id')
                                    ->label('Kunde')
                                    ->relationship('customer', 'name')
                                    ->searchable()
                                    ->preload()
                                    ->nullable()
                                    ->createOptionForm([
                                        Forms\Components\TextInput::make('name')
                                            ->required(),
                                        Forms\Components\TextInput::make('email')
                                            ->email(),
                                        Forms\Components\TextInput::make('phone'),
                                    ])
                                    ->helperText(function ($state) {
                                        if (!$state) return '';
                                        $customer = \App\Models\Customer::find($state);
                                        if (!$customer) return '';
                                        $parts = [];
                                        if ($customer->phone) $parts[] = $customer->phone;
                                        if ($customer->email) $parts[] = $customer->email;
                                        return implode(' • ', $parts);
                                    }),
                                    
                                Forms\Components\Select::make('staff_id')
                                    ->label('Mitarbeiter')
                                    ->relationship('staff', 'name')
                                    ->searchable()
                                    ->preload()
                                    ->nullable(),
                                    
                                Forms\Components\Select::make('calcom_event_type_id')
                                    ->label('Event-Typ')
                                    ->relationship('calcomEventType', 'name')
                                    ->searchable()
                                    ->preload()
                                    ->nullable(),
                            ]),
                            
                        Forms\Components\Grid::make(2)
                            ->schema([
                                Forms\Components\Select::make('branch_id')
                                    ->label('Filiale')
                                    ->relationship('branch', 'name')
                                    ->searchable()
                                    ->preload()
                                    ->nullable(),
                                    
                                Forms\Components\Select::make('service_id')
                                    ->label('Leistung')
                                    ->relationship('service', 'name')
                                    ->searchable()
                                    ->preload()
                                    ->nullable()
                                    ->reactive()
                                    ->afterStateUpdated(function ($state, callable $set) {
                                        if ($state) {
                                            $service = \App\Models\Service::find($state);
                                            if ($service && $service->default_duration_minutes) {
                                                $set('duration_minutes', $service->default_duration_minutes);
                                            }
                                        }
                                    }),
                            ]),
                            
                        Forms\Components\Grid::make(3)
                            ->schema([
                                Forms\Components\DateTimePicker::make('starts_at')
                                    ->label('Beginn')
                                    ->required()
                                    ->native(false)
                                    ->minutesStep(15)
                                    ->seconds(false),
                                    
                                Forms\Components\DateTimePicker::make('ends_at')
                                    ->label('Ende')
                                    ->native(false)
                                    ->minutesStep(15)
                                    ->seconds(false),
                                    
                                Forms\Components\Select::make('status')
                                    ->label('Status')
                                    ->options([
                                        'pending' => 'Ausstehend',
                                        'confirmed' => 'Bestätigt',
                                        'completed' => 'Abgeschlossen',
                                        'cancelled' => 'Abgesagt',
                                        'no_show' => 'Nicht erschienen',
                                    ])
                                    ->default('pending')
                                    ->required(),
                            ]),
                            
                        Forms\Components\Textarea::make('payload')
                            ->label('Details')
                            ->rows(3)
                            ->columnSpanFull()
                            ->formatStateUsing(fn ($state) => is_array($state) ? json_encode($state, JSON_PRETTY_PRINT) : $state)
                            ->helperText('JSON-Daten aus der Retell-Integration'),
                    ]),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->modifyQueryUsing(fn ($query) => $query->with(['customer', 'staff', 'service', 'branch', 'calcomEventType']))
            ->striped()
            ->columns([
                Tables\Columns\TextColumn::make('id')
                    ->label('ID')
                    ->sortable()
                    ->searchable()
                    ->toggleable(isToggledHiddenByDefault: true),
                    
                Tables\Columns\TextColumn::make('customer.name')
                    ->label('Kunde')
                    ->sortable()
                    ->searchable()
                    ->icon('heroicon-m-user')
                    ->iconPosition('before')
                    ->default('Kein Kunde')
                    ->description(function ($record) {
                        $parts = [];
                        if ($record->customer?->phone) $parts[] = $record->customer->phone;
                        if ($record->customer?->email) $parts[] = $record->customer->email;
                        return implode(' • ', $parts);
                    })
                    ->copyable()
                    ->copyableState(fn ($record) => $record->customer?->phone),
                    
                Tables\Columns\TextColumn::make('calcomEventType.name')
                    ->label('Event-Typ')
                    ->sortable()
                    ->searchable()
                    ->badge()
                    ->default('Kein Event-Typ')
                    ->color('info'),
                    
                Tables\Columns\TextColumn::make('staff.name')
                    ->label('Mitarbeiter')
                    ->sortable()
                    ->searchable()
                    ->icon('heroicon-m-user-circle')
                    ->default('Kein Mitarbeiter')
                    ->iconPosition('before'),
                    
                Tables\Columns\TextColumn::make('starts_at')
                    ->label('Datum & Zeit')
                    ->dateTime('d.m.Y H:i')
                    ->sortable()
                    ->description(function ($record) {
                        if (!$record->starts_at || !$record->ends_at) return null;
                        $duration = Carbon::parse($record->starts_at)->diffInMinutes($record->ends_at);
                        return $duration . ' Minuten';
                    })
                    ->color(function ($record) {
                        if (!$record->starts_at) return null;
                        $startsAt = Carbon::parse($record->starts_at);
                        if ($startsAt->isPast()) return 'gray';
                        if ($startsAt->isToday()) return 'warning';
                        if ($startsAt->isTomorrow()) return 'info';
                        return null;
                    }),
                    
                Tables\Columns\TextColumn::make('status')
                    ->label('Status')
                    ->badge()
                    ->color(fn (string $state): string => match ($state) {
                        'pending' => 'warning',
                        'confirmed' => 'info',
                        'completed' => 'success',
                        'cancelled' => 'danger',
                        'no_show' => 'gray',
                        default => 'gray',
                    })
                    ->formatStateUsing(fn (string $state): string => match ($state) {
                        'pending' => 'Ausstehend',
                        'confirmed' => 'Bestätigt',
                        'completed' => 'Abgeschlossen',
                        'cancelled' => 'Abgesagt',
                        'no_show' => 'Nicht erschienen',
                        default => $state,
                    }),
                
                Tables\Columns\TextColumn::make('external_id')
                    ->label('Externe ID')
                    ->searchable()
                    ->toggleable(isToggledHiddenByDefault: true),
                    
                Tables\Columns\TextColumn::make('service.name')
                    ->label('Leistung')
                    ->searchable()
                    ->badge()
                    ->color('gray')
                    ->icon('heroicon-m-briefcase'),
                    
                Tables\Columns\TextColumn::make('service.price')
                    ->label('Preis')
                    ->getStateUsing(fn ($record) => $record->service?->price)
                    ->formatStateUsing(fn ($state) => $state ? number_format($state / 100, 2, ',', '.') . ' €' : '-')
                    ->sortable(false)
                    ->alignEnd(),
                    
                Tables\Columns\TextColumn::make('branch.name')
                    ->label('Filiale')
                    ->searchable()
                    ->icon('heroicon-m-building-office')
                    ->toggleable(),
                    
                Tables\Columns\TextColumn::make('created_at')
                    ->label('Erstellt')
                    ->dateTime('d.m.Y H:i')
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('status')
                    ->label('Status')
                    ->options([
                        'pending' => 'Ausstehend',
                        'confirmed' => 'Bestätigt',
                        'completed' => 'Abgeschlossen',
                        'cancelled' => 'Abgesagt',
                        'no_show' => 'Nicht erschienen',
                    ])
                    ->multiple(),
                    
                Tables\Filters\SelectFilter::make('staff_id')
                    ->label('Mitarbeiter')
                    ->relationship('staff', 'name')
                    ->searchable()
                    ->preload(),
                    
                Tables\Filters\SelectFilter::make('service_id')
                    ->label('Leistung')
                    ->relationship('service', 'name')
                    ->searchable()
                    ->preload(),
                    
                Tables\Filters\SelectFilter::make('branch_id')
                    ->label('Filiale')
                    ->relationship('branch', 'name')
                    ->searchable()
                    ->preload(),
                    
                Tables\Filters\Filter::make('starts_at')
                    ->form([
                        Forms\Components\DatePicker::make('starts_from')
                            ->label('Von')
                            ->default(now()->startOfMonth()),
                        Forms\Components\DatePicker::make('starts_until')
                            ->label('Bis')
                            ->default(now()->endOfMonth()),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['starts_from'],
                                fn (Builder $query, $date): Builder => $query->whereDate('starts_at', '>=', $date),
                            )
                            ->when(
                                $data['starts_until'],
                                fn (Builder $query, $date): Builder => $query->whereDate('starts_at', '<=', $date),
                            );
                    })
                    ->indicateUsing(function (array $data): array {
                        $indicators = [];
                        if ($data['starts_from'] ?? null) {
                            $indicators['starts_from'] = 'Von: ' . Carbon::parse($data['starts_from'])->format('d.m.Y');
                        }
                        if ($data['starts_until'] ?? null) {
                            $indicators['starts_until'] = 'Bis: ' . Carbon::parse($data['starts_until'])->format('d.m.Y');
                        }
                        return $indicators;
                    }),
                    
                Tables\Filters\TernaryFilter::make('upcoming')
                    ->label('Bevorstehend')
                    ->queries(
                        true: fn (Builder $query) => $query->where('starts_at', '>=', now()),
                        false: fn (Builder $query) => $query->where('starts_at', '<', now()),
                    ),
                    
                Tables\Filters\Filter::make('today')
                    ->label('Heute')
                    ->query(fn (Builder $query): Builder => $query->whereDate('starts_at', today()))
                    ->toggle(),
                    
                Tables\Filters\Filter::make('tomorrow')
                    ->label('Morgen')
                    ->query(fn (Builder $query): Builder => $query->whereDate('starts_at', today()->addDay()))
                    ->toggle(),
                    
                Tables\Filters\Filter::make('this_week')
                    ->label('Diese Woche')
                    ->query(fn (Builder $query): Builder => 
                        $query->whereBetween('starts_at', [
                            now()->startOfWeek(),
                            now()->endOfWeek()
                        ])
                    )
                    ->toggle(),
            ], layout: Tables\Enums\FiltersLayout::AboveContentCollapsible)
            ->actions([
                Tables\Actions\ActionGroup::make([
                    Tables\Actions\ViewAction::make(),
                    Tables\Actions\EditAction::make(),
                    Tables\Actions\Action::make('cancel')
                        ->label('Absagen')
                        ->icon('heroicon-o-x-circle')
                        ->color('danger')
                        ->requiresConfirmation()
                        ->action(function ($record) {
                            $record->update(['status' => 'cancelled']);
                            Notification::make()
                                ->title('Termin abgesagt')
                                ->success()
                                ->send();
                        })
                        ->visible(fn ($record) => !in_array($record->status, ['cancelled', 'completed'])),
                    Tables\Actions\DeleteAction::make(),
                ]),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->defaultSort('starts_at', 'desc')
            ->poll('30s')
            ->recordTitleAttribute('id');
    }

    public static function getRelations(): array
    {
        return [];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListAppointments::route('/'),
            'create' => Pages\CreateAppointment::route('/create'),
            'edit' => Pages\EditAppointment::route('/{record}/edit'),
        ];
    }
    
    public static function getGloballySearchableAttributes(): array
    {
        return ['id', 'customer.name', 'customer.email', 'customer.phone', 'staff.name', 'external_id'];
    }
}