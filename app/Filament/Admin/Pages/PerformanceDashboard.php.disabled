<?php

namespace App\Filament\Admin\Pages;

use Filament\Pages\Page;
use App\Services\MCP\MCPCacheWarmer;
use App\Services\MCP\MCPQueryOptimizer;
use App\Services\MCP\MCPConnectionPoolManager;
use Filament\Actions\Action;
use Filament\Notifications\Notification;
use Illuminate\Support\Facades\Cache;

class PerformanceDashboard extends Page
{
    protected static ?string $navigationIcon = 'heroicon-o-rocket-launch';
    protected static ?string $navigationGroup = 'System & Ãœberwachung';
    protected static ?int $navigationSort = 100;
    protected static string $view = 'filament.admin.pages.performance-dashboard';
    
    public array $cacheStats = [];
    public array $connectionPoolMetrics = [];
    public array $databaseStats = [];
    public bool $compressionEnabled = true;
    public array $performanceMetrics = [];
    
    public function mount(): void
    {
        $this->loadMetrics();
    }
    
    protected function loadMetrics(): void
    {
        // Load cache statistics
        $cacheWarmer = app(MCPCacheWarmer::class);
        $this->cacheStats = $cacheWarmer->getStats();
        
        // Load connection pool metrics
        $poolManager = app(MCPConnectionPoolManager::class);
        $this->connectionPoolMetrics = $poolManager->getMetrics();
        
        // Load database statistics
        $queryOptimizer = app(MCPQueryOptimizer::class);
        $this->databaseStats = $queryOptimizer->getDatabaseStats();
        
        // Load performance metrics
        $this->performanceMetrics = [
            'response_time_avg' => Cache::get('performance:response_time:avg', 0),
            'requests_per_minute' => Cache::get('performance:requests:per_minute', 0),
            'cache_hit_rate' => Cache::get('performance:cache:hit_rate', 0),
            'slow_queries_count' => Cache::get('performance:slow_queries:count', 0),
        ];
        
        // Check compression status
        $this->compressionEnabled = config('performance.compression.enabled', true);
    }
    
    protected function getActions(): array
    {
        return [
            Action::make('warmCaches')
                ->label('Warm Caches')
                ->icon('heroicon-o-fire')
                ->color('success')
                ->action(function () {
                    $cacheWarmer = app(MCPCacheWarmer::class);
                    $results = $cacheWarmer->warmAll();
                    
                    Notification::make()
                        ->title('Cache Warming Complete')
                        ->body("Warmed {$results['warmed']} entries in {$results['duration']}s")
                        ->success()
                        ->send();
                    
                    $this->loadMetrics();
                }),
                
            Action::make('optimizePool')
                ->label('Optimize Connection Pool')
                ->icon('heroicon-o-wrench-screwdriver')
                ->color('warning')
                ->requiresConfirmation()
                ->action(function () {
                    $poolManager = app(MCPConnectionPoolManager::class);
                    $results = $poolManager->optimizePool();
                    
                    $message = 'Connection pool optimized.';
                    if (!empty($results['recommendations'])) {
                        $message .= ' ' . count($results['recommendations']) . ' recommendations applied.';
                    }
                    
                    Notification::make()
                        ->title('Optimization Complete')
                        ->body($message)
                        ->success()
                        ->send();
                    
                    $this->loadMetrics();
                }),
                
            Action::make('analyzeQueries')
                ->label('Analyze Slow Queries')
                ->icon('heroicon-o-magnifying-glass')
                ->color('info')
                ->action(function () {
                    $queryOptimizer = app(MCPQueryOptimizer::class);
                    $queryOptimizer->startMonitoring();
                    
                    Notification::make()
                        ->title('Query Analysis Started')
                        ->body('Monitoring queries for the next 30 seconds...')
                        ->info()
                        ->send();
                    
                    // Stop monitoring after 30 seconds
                    dispatch(function () use ($queryOptimizer) {
                        sleep(30);
                        $results = $queryOptimizer->stopMonitoring();
                        Cache::put('performance:last_query_analysis', $results, 3600);
                    })->afterResponse();
                }),
                
            Action::make('clearCaches')
                ->label('Clear All Caches')
                ->icon('heroicon-o-trash')
                ->color('danger')
                ->requiresConfirmation()
                ->modalHeading('Clear All Caches?')
                ->modalDescription('This will clear all performance caches. The system may be slower until caches are rebuilt.')
                ->action(function () {
                    $cacheWarmer = app(MCPCacheWarmer::class);
                    $cacheWarmer->clearAll();
                    
                    Notification::make()
                        ->title('Caches Cleared')
                        ->body('All performance caches have been cleared.')
                        ->warning()
                        ->send();
                    
                    $this->loadMetrics();
                }),
        ];
    }
    
    public function getWidgets(): array
    {
        return [
            \App\Filament\Admin\Widgets\PerformanceOverviewWidget::class,
            \App\Filament\Admin\Widgets\CacheMetricsWidget::class,
            \App\Filament\Admin\Widgets\ConnectionPoolWidget::class,
            \App\Filament\Admin\Widgets\DatabasePerformanceWidget::class,
        ];
    }
}