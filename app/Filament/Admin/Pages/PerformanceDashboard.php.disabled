<?php

namespace App\Filament\Admin\Pages;

use App\Services\BusinessPortalPerformanceService;
use Filament\Actions\Action;
use Filament\Forms\Components\Select;
use Filament\Forms\Form;
use Filament\Pages\Page;
use Filament\Support\Enums\Alignment;
use Filament\Widgets\StatsOverviewWidget;
use Filament\Widgets\ChartWidget;
use Illuminate\Contracts\Support\Htmlable;

class PerformanceDashboard extends Page
{
    protected static ?string $navigationIcon = 'heroicon-o-chart-bar';
    protected static ?string $navigationLabel = 'Performance Monitoring';
    protected static ?string $navigationGroup = 'System';
    protected static ?int $navigationSort = 10;
    protected static string $view = 'filament.admin.pages.performance-dashboard';

    public string $timeframe = 'last_hour';
    public array $dashboardData = [];
    
    protected BusinessPortalPerformanceService $performanceService;

    public function mount(): void
    {
        $this->performanceService = app(BusinessPortalPerformanceService::class);
        $this->loadDashboardData();
    }

    public function getTitle(): string|Htmlable
    {
        return 'Business Portal Performance Monitoring';
    }

    public function getSubheading(): string|Htmlable
    {
        $healthScore = $this->performanceService->getHealthScore($this->timeframe);
        return "Performance Health Score: {$healthScore['overall_score']}% ({$healthScore['grade']})";
    }

    protected function getHeaderActions(): array
    {
        return [
            Action::make('refresh')
                ->label('Refresh Data')
                ->icon('heroicon-o-arrow-path')
                ->action('loadDashboardData'),
                
            Action::make('export')
                ->label('Export Report')
                ->icon('heroicon-o-document-arrow-down')
                ->action('exportReport'),
                
            Action::make('configure_alerts')
                ->label('Configure Alerts')
                ->icon('heroicon-o-bell')
                ->url('/admin/performance-alerts')
                ->openUrlInNewTab(),
        ];
    }

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Select::make('timeframe')
                    ->label('Time Range')
                    ->options([
                        'last_5_minutes' => 'Last 5 Minutes',
                        'last_15_minutes' => 'Last 15 Minutes', 
                        'last_hour' => 'Last Hour',
                        'last_6_hours' => 'Last 6 Hours',
                        'last_24_hours' => 'Last 24 Hours',
                        'last_week' => 'Last Week',
                    ])
                    ->default('last_hour')
                    ->live()
                    ->afterStateUpdated(fn () => $this->loadDashboardData()),
            ]);
    }

    public function loadDashboardData(): void
    {
        $this->dashboardData = $this->performanceService->getPortalDashboardData($this->timeframe);
    }

    public function exportReport(): void
    {
        // TODO: Implement PDF/CSV export
        $this->notify('success', 'Performance report exported successfully');
    }

    protected function getViewData(): array
    {
        return [
            'timeframe' => $this->timeframe,
            'dashboardData' => $this->dashboardData,
            'healthScore' => $this->performanceService->getHealthScore($this->timeframe),
            'widgets' => $this->getWidgets(),
        ];
    }

    protected function getWidgets(): array
    {
        return [
            PerformanceOverviewWidget::class,
            SLAComplianceWidget::class,
            ResponseTimeChartWidget::class,
            EndpointPerformanceWidget::class,
            ActiveAlertsWidget::class,
            ResourceUtilizationWidget::class,
        ];
    }
}

/**
 * Performance Overview Stats Widget
 */
class PerformanceOverviewWidget extends StatsOverviewWidget
{
    protected function getStats(): array
    {
        $performanceService = app(BusinessPortalPerformanceService::class);
        $data = $performanceService->getPortalDashboardData('last_hour');
        $overview = $data['overview'] ?? [];

        return [
            StatsOverviewWidget\Stat::make('Total Requests', number_format($overview['total_requests'] ?? 0))
                ->description('Last hour')
                ->descriptionIcon('heroicon-m-arrow-trending-up')
                ->color('primary'),
                
            StatsOverviewWidget\Stat::make('Avg Response Time', ($overview['avg_response_time'] ?? 0) . 'ms')
                ->description('Target: <200ms')
                ->descriptionIcon($overview['avg_response_time'] <= 200 ? 'heroicon-m-check' : 'heroicon-m-exclamation-triangle')
                ->color($overview['avg_response_time'] <= 200 ? 'success' : 'warning'),
                
            StatsOverviewWidget\Stat::make('Error Rate', ($overview['error_rate'] ?? 0) . '%')
                ->description('Target: <1%')
                ->descriptionIcon($overview['error_rate'] <= 1 ? 'heroicon-m-check' : 'heroicon-m-x-mark')
                ->color($overview['error_rate'] <= 1 ? 'success' : 'danger'),
                
            StatsOverviewWidget\Stat::make('SLA Compliance', ($overview['sla_compliance_percentage'] ?? 0) . '%')
                ->description('Target: >99%')
                ->descriptionIcon($overview['sla_compliance_percentage'] >= 99 ? 'heroicon-m-check' : 'heroicon-m-exclamation-triangle')
                ->color($overview['sla_compliance_percentage'] >= 99 ? 'success' : 'warning'),
                
            StatsOverviewWidget\Stat::make('Uptime', ($overview['uptime_percentage'] ?? 0) . '%')
                ->description('Last 24 hours')
                ->descriptionIcon('heroicon-m-server')
                ->color($overview['uptime_percentage'] >= 99.9 ? 'success' : 'danger'),
        ];
    }
}

/**
 * SLA Compliance Widget
 */
class SLAComplianceWidget extends StatsOverviewWidget
{
    protected function getStats(): array
    {
        $performanceService = app(BusinessPortalPerformanceService::class);
        $data = $performanceService->getPortalDashboardData('last_hour');
        $slaData = $data['sla_compliance'] ?? [];

        $stats = [];
        foreach ($slaData as $endpoint => $compliance) {
            $stats[] = StatsOverviewWidget\Stat::make(
                'SLA: ' . str_replace('/business', '', $endpoint),
                $compliance['avg_response_time'] . 'ms'
            )
                ->description("Target: {$compliance['target_ms']}ms ({$compliance['compliance_percentage']}%)")
                ->color($compliance['status'] === 'green' ? 'success' : ($compliance['status'] === 'yellow' ? 'warning' : 'danger'));
        }

        return array_slice($stats, 0, 6); // Show top 6 endpoints
    }
}

/**
 * Response Time Chart Widget
 */
class ResponseTimeChartWidget extends ChartWidget
{
    protected static ?string $heading = 'Response Time Trends';
    protected static ?int $sort = 2;

    protected function getData(): array
    {
        $performanceService = app(BusinessPortalPerformanceService::class);
        $trends = $performanceService->getPerformanceTrends('last_hour');

        return [
            'datasets' => [
                [
                    'label' => 'Average Response Time (ms)',
                    'data' => array_column($trends, 'avg_response_time'),
                    'borderColor' => '#3b82f6',
                    'backgroundColor' => 'rgba(59, 130, 246, 0.1)',
                ],
                [
                    'label' => 'P95 Response Time (ms)',
                    'data' => array_column($trends, 'p95_response_time'),
                    'borderColor' => '#ef4444',
                    'backgroundColor' => 'rgba(239, 68, 68, 0.1)',
                ],
                [
                    'label' => 'SLA Target (200ms)',
                    'data' => array_fill(0, count($trends), 200),
                    'borderColor' => '#10b981',
                    'borderDash' => [5, 5],
                    'backgroundColor' => 'transparent',
                ],
            ],
            'labels' => array_column($trends, 'timestamp'),
        ];
    }

    protected function getType(): string
    {
        return 'line';
    }

    protected function getOptions(): array
    {
        return [
            'responsive' => true,
            'scales' => [
                'y' => [
                    'beginAtZero' => true,
                    'title' => [
                        'display' => true,
                        'text' => 'Response Time (ms)',
                    ],
                ],
                'x' => [
                    'title' => [
                        'display' => true,
                        'text' => 'Time',
                    ],
                ],
            ],
            'plugins' => [
                'legend' => [
                    'display' => true,
                    'position' => 'top',
                ],
                'tooltip' => [
                    'mode' => 'index',
                    'intersect' => false,
                ],
            ],
        ];
    }
}

/**
 * Endpoint Performance Widget
 */
class EndpointPerformanceWidget extends StatsOverviewWidget
{
    protected static ?string $heading = 'Top Endpoints by Response Time';
    
    protected function getStats(): array
    {
        $performanceService = app(BusinessPortalPerformanceService::class);
        $data = $performanceService->getPortalDashboardData('last_hour');
        $endpoints = $data['endpoint_performance'] ?? [];

        $stats = [];
        foreach (array_slice($endpoints, 0, 5) as $endpoint) {
            $stats[] = StatsOverviewWidget\Stat::make(
                str_replace('/business', '', $endpoint['endpoint']),
                $endpoint['avg_time'] . 'ms'
            )
                ->description("Requests: {$endpoint['requests']} | P95: {$endpoint['p95_time']}ms")
                ->color($endpoint['avg_time'] <= $endpoint['sla_target'] ? 'success' : 'warning');
        }

        return $stats;
    }
}

/**
 * Active Alerts Widget
 */
class ActiveAlertsWidget extends StatsOverviewWidget
{
    protected static ?string $heading = 'Active Performance Alerts';
    
    protected function getStats(): array
    {
        $performanceService = app(BusinessPortalPerformanceService::class);
        $alerts = $performanceService->getActiveAlerts();

        if (empty($alerts)) {
            return [
                StatsOverviewWidget\Stat::make('System Status', 'All Clear')
                    ->description('No active performance alerts')
                    ->descriptionIcon('heroicon-m-check-circle')
                    ->color('success'),
            ];
        }

        $stats = [];
        foreach (array_slice($alerts, 0, 3) as $alert) {
            $stats[] = StatsOverviewWidget\Stat::make(
                strtoupper($alert['severity']) . ' Alert',
                str_replace('/business', '', $alert['endpoint'])
            )
                ->description("{$alert['actual_ms']}ms (target: {$alert['target_ms']}ms)")
                ->color($alert['severity'] === 'emergency' ? 'danger' : ($alert['severity'] === 'critical' ? 'warning' : 'info'));
        }

        return $stats;
    }
}

/**
 * Resource Utilization Widget
 */
class ResourceUtilizationWidget extends StatsOverviewWidget
{
    protected static ?string $heading = 'Resource Utilization';
    
    protected function getStats(): array
    {
        $performanceService = app(BusinessPortalPerformanceService::class);
        $data = $performanceService->getPortalDashboardData('last_hour');
        $resources = $data['resource_utilization'] ?? [];

        return [
            StatsOverviewWidget\Stat::make('Memory Usage', ($resources['memory_percentage'] ?? 0) . '%')
                ->description('Current memory utilization')
                ->color($resources['memory_percentage'] < 80 ? 'success' : 'warning'),
                
            StatsOverviewWidget\Stat::make('CPU Usage', ($resources['cpu_percentage'] ?? 0) . '%')
                ->description('Current CPU utilization')
                ->color($resources['cpu_percentage'] < 70 ? 'success' : 'warning'),
                
            StatsOverviewWidget\Stat::make('DB Connections', $resources['db_connections'] ?? 0)
                ->description('Active database connections')
                ->color($resources['db_connections'] < 80 ? 'success' : 'warning'),
        ];
    }
}