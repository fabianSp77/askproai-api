<?php

namespace App\Filament\Admin\Pages;

use Filament\Pages\Page;
use App\Models\Call;
use App\Models\Company;
use App\Models\Branch;
use App\Services\PricingService;
use Carbon\Carbon;
use Illuminate\Support\Facades\Auth;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Forms\Form;
use Illuminate\Support\Facades\Log;

class CostDashboard extends Page implements HasForms
{
    use InteractsWithForms;
    
    protected static ?string $navigationIcon = 'heroicon-o-currency-euro';
    
    protected static ?string $navigationGroup = 'Dashboard';
    
    protected static ?string $navigationLabel = 'Kosten & ROI Dashboard';
    
    protected static ?int $navigationSort = 1;
    
    protected static string $view = 'filament.admin.pages.cost-dashboard';
    
    public ?array $data = [];
    
    public function mount(): void
    {
        $user = Auth::user();
        
        // Set default date range to current month
        $this->data = [
            'company_id' => $user && !$user->hasRole('Super Admin') && $user->company_id 
                ? $user->company_id 
                : Company::first()?->id,
            'branch_id' => null,
            'date_from' => Carbon::now()->startOfMonth()->format('Y-m-d'),
            'date_to' => Carbon::now()->endOfMonth()->format('Y-m-d'),
        ];
        
        $this->form->fill($this->data);
    }
    
    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Select::make('company_id')
                    ->label('Firma')
                    ->options(function () {
                        $user = Auth::user();
                        if ($user->hasRole('Super Admin')) {
                            return Company::pluck('name', 'id');
                        }
                        return Company::where('id', $user->company_id)->pluck('name', 'id');
                    })
                    ->searchable()
                    ->reactive()
                    ->afterStateUpdated(function ($state, callable $set) {
                        $set('branch_id', null);
                        $this->updated();
                    })
                    ->disabled(fn () => !Auth::user()->hasRole('Super Admin')),
                    
                Select::make('branch_id')
                    ->label('Filiale')
                    ->options(function (callable $get) {
                        $companyId = $get('company_id');
                        if (!$companyId) return [];
                        return Branch::where('company_id', $companyId)
                            ->pluck('name', 'id');
                    })
                    ->searchable()
                    ->reactive()
                    ->placeholder('Alle Filialen')
                    ->afterStateUpdated(fn() => $this->updated()),
                    
                DatePicker::make('date_from')
                    ->label('Von')
                    ->reactive()
                    ->maxDate(now())
                    ->afterStateUpdated(fn() => $this->updated()),
                    
                DatePicker::make('date_to')
                    ->label('Bis')
                    ->reactive()
                    ->minDate(fn (callable $get) => $get('date_from'))
                    ->maxDate(now())
                    ->afterStateUpdated(fn() => $this->updated()),
            ])
            ->columns(4)
            ->statePath('data');
    }
    
    public function updated(): void
    {
        // This method is called when form fields are updated
        // It triggers a re-render of the Livewire component
    }
    
    public function getDashboardDataProperty(): array
    {
        // Get form data from the data property instead of form state
        $formData = $this->data;
        
        // Ensure we have valid data
        if (empty($formData) || !isset($formData['company_id'])) {
            $user = Auth::user();
            $formData = [
                'company_id' => $user->company_id ?? ($user->hasRole('Super Admin') ? Company::first()?->id : null),
                'branch_id' => null,
                'date_from' => Carbon::now()->startOfMonth()->format('Y-m-d'),
                'date_to' => Carbon::now()->endOfMonth()->format('Y-m-d'),
            ];
        }
        
        $query = Call::query()
            ->whereNotNull('cost')
            ->where('cost', '>', 0);
            
        if ($formData['company_id'] ?? null) {
            $query->where('company_id', $formData['company_id']);
        }
        
        if ($formData['branch_id'] ?? null) {
            $query->where('branch_id', $formData['branch_id']);
        }
        
        if ($formData['date_from'] ?? null) {
            $query->whereDate('created_at', '>=', $formData['date_from']);
        }
        
        if ($formData['date_to'] ?? null) {
            $query->whereDate('created_at', '<=', $formData['date_to']);
        }
        
        // Basic statistics
        $totalCalls = $query->count();
        $totalDurationSec = $query->sum('duration_sec');
        $totalCost = round($query->sum('cost'), 2);
        
        
        // Calculate revenue
        $calls = $query->get();
        $totalRevenue = 0;
        $callsWithPricing = 0;
        $callsWithoutPricing = 0;
        
        $pricingService = new PricingService();
        foreach ($calls as $call) {
            $pricing = $pricingService->calculateCallPrice($call);
            if (!isset($pricing['error'])) {
                $totalRevenue += $pricing['customer_price'];
                $callsWithPricing++;
            } else {
                $callsWithoutPricing++;
            }
        }
        
        $totalRevenue = round($totalRevenue, 2);
        $totalMargin = round($totalRevenue - $totalCost, 2);
        $marginPercentage = $totalRevenue > 0 ? round(($totalMargin / $totalRevenue) * 100, 1) : 0;
        
        // Daily chart data
        $dailyData = Call::query()
            ->selectRaw('DATE(created_at) as date')
            ->selectRaw('COUNT(*) as calls')
            ->selectRaw('SUM(duration_sec) as duration')
            ->selectRaw('SUM(cost) as cost')
            ->whereNotNull('cost')
            ->where('cost', '>', 0)
            ->when($formData['company_id'] ?? null, fn($q, $v) => $q->where('company_id', $v))
            ->when($formData['branch_id'] ?? null, fn($q, $v) => $q->where('branch_id', $v))
            ->when($formData['date_from'] ?? null, fn($q, $v) => $q->whereDate('created_at', '>=', $v))
            ->when($formData['date_to'] ?? null, fn($q, $v) => $q->whereDate('created_at', '<=', $v))
            ->groupBy('date')
            ->orderBy('date')
            ->get();
            
        // Calculate revenue for daily data
        $dailyDataWithRevenue = $dailyData->map(function ($day) use ($pricingService, $formData) {
            $dayCalls = Call::whereDate('created_at', $day->date)
                ->whereNotNull('cost')
                ->where('cost', '>', 0)
                ->when($formData['company_id'] ?? null, fn($q, $v) => $q->where('company_id', $v))
                ->when($formData['branch_id'] ?? null, fn($q, $v) => $q->where('branch_id', $v))
                ->get();
                
            $dayRevenue = 0;
            foreach ($dayCalls as $call) {
                $pricing = $pricingService->calculateCallPrice($call);
                if (!isset($pricing['error'])) {
                    $dayRevenue += $pricing['customer_price'];
                }
            }
            
            $day->revenue = round($dayRevenue, 2);
            $day->margin = round($dayRevenue - $day->cost, 2);
            
            return $day;
        });
        
        // Calculate totals properly
        $totalMinutes = round($totalDurationSec / 60, 0);
        
        return [
            'totalCalls' => $totalCalls,
            'totalMinutes' => $totalMinutes,
            'totalCost' => $totalCost,
            'totalRevenue' => $totalRevenue,
            'totalMargin' => $totalMargin,
            'marginPercentage' => $marginPercentage,
            'avgCostPerCall' => $totalCalls > 0 ? round($totalCost / $totalCalls, 2) : 0,
            'avgRevenuePerCall' => $totalCalls > 0 ? round($totalRevenue / $totalCalls, 2) : 0,
            'avgCostPerMinute' => $totalMinutes > 0 ? round($totalCost / $totalMinutes, 2) : 0,
            'avgRevenuePerMinute' => $totalMinutes > 0 ? round($totalRevenue / $totalMinutes, 2) : 0,
            'callsWithPricing' => $callsWithPricing,
            'callsWithoutPricing' => $callsWithoutPricing,
            'dailyData' => $dailyDataWithRevenue,
        ];
    }
}