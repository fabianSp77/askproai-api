<?php

namespace App\Filament\Admin\Pages;

use Filament\Actions\Action;
use Illuminate\Support\Facades\Auth;

class Dashboard extends \Filament\Pages\Dashboard
{
    protected static ?string $navigationIcon = 'heroicon-o-home';
    protected static ?string $title = 'Dashboard';
    protected static ?string $navigationLabel = 'Dashboard';
    protected static ?string $navigationGroup = 'Dashboard';
    protected static ?int $navigationSort = -100;
    
    protected int $maxPrimaryWidgets = 5;
    protected bool $showExpandButton = true;
    
    public static function shouldRegisterNavigation(): bool
    {
        // Show this dashboard in navigation as the main dashboard
        return true;
    }
    
    protected function getHeaderActions(): array
    {
        $actions = [];
        
        try {
            if (Auth::user() && method_exists(Auth::user(), 'hasRole') && Auth::user()->hasRole(['super_admin', 'company_admin'])) {
                $actions[] = Action::make('newCompany')
                ->label('üöÄ Neue Firma anlegen')
                ->icon('heroicon-o-plus-circle')
                ->color('success')
                ->url('/admin/quick-setup-wizard')
                ->size('lg');
        }
        
        if ($this->showExpandButton) {
            $actions[] = Action::make('toggleExpanded')
                ->label(session('dashboard_expanded', false) ? 'Weniger anzeigen' : 'Mehr anzeigen')
                ->icon(session('dashboard_expanded', false) ? 'heroicon-o-chevron-up' : 'heroicon-o-chevron-down')
                ->color('gray')
                ->action(function () {
                    session(['dashboard_expanded' => !session('dashboard_expanded', false)]);
                    $this->redirect(request()->url());
                });
            }
        } catch (\Exception $e) {
            // Ignore errors in header actions
        }
        
        return $actions;
    }
    
    public function getWidgets(): array
    {
        try {
            $user = Auth::user();
            if (!$user) {
                return [
                    \Filament\Widgets\AccountWidget::class,
                    \Filament\Widgets\FilamentInfoWidget::class,
                ];
            }
            
            $isExpanded = session('dashboard_expanded', false);
            
            // Rollenbasierte Widget-Auswahl mit Fehlerbehandlung
            if (method_exists($user, 'hasRole')) {
                if ($user->hasRole(['super_admin', 'company_admin'])) {
                    return $this->getOwnerWidgets($isExpanded);
                } elseif ($user->hasRole('branch_manager') || ($user->manages_branch ?? false)) {
                    return $this->getBranchManagerWidgets($isExpanded);
                }
            }
            
            return $this->getStaffWidgets($isExpanded);
            
        } catch (\Exception $e) {
            // Fallback to basic widgets on any error
            return [
                \Filament\Widgets\AccountWidget::class,
                \Filament\Widgets\FilamentInfoWidget::class,
            ];
        }
    }
    
    protected function getOwnerWidgets(bool $isExpanded): array
    {
        // Start with basic widgets only
        $widgets = [
            \Filament\Widgets\AccountWidget::class,
            \Filament\Widgets\FilamentInfoWidget::class,
        ];
        
        return $widgets;
        
        /* TEMPORARILY DISABLED
        if ($isExpanded) {
            $widgets = array_merge($widgets, [
                \App\Filament\Admin\Widgets\BranchComparisonWidget::class,
                \App\Filament\Admin\Widgets\CustomerMetricsWidget::class,
                \App\Filament\Admin\Widgets\ApiHealthOverview::class,
            ]);
        }
        
        return $widgets;
    }
    
    protected function getBranchManagerWidgets(bool $isExpanded): array
    {
        return [
            \Filament\Widgets\AccountWidget::class,
            \Filament\Widgets\FilamentInfoWidget::class,
        ];
        /*
        $widgets = [
            \App\Filament\Admin\Widgets\GlobalTenantFilter::class,
            \App\Filament\Admin\Widgets\StatsOverview::class,
            \App\Filament\Admin\Widgets\LiveAppointmentBoard::class,
            \App\Filament\Admin\Widgets\QuickActionsWidget::class,
        ];
        
        if ($isExpanded) {
            $widgets = array_merge($widgets, [
                \App\Filament\Admin\Widgets\RecentAppointments::class,
                \App\Filament\Admin\Widgets\RecentCalls::class,
            ]);
        }
        
        return $widgets;
        */
    }
    
    protected function getStaffWidgets(bool $isExpanded): array
    {
        return [
            \Filament\Widgets\AccountWidget::class,
            \Filament\Widgets\FilamentInfoWidget::class,
        ];
        /*
        $widgets = [
            \App\Filament\Admin\Widgets\StatsOverview::class,
            \App\Filament\Admin\Widgets\RecentAppointments::class,
            \App\Filament\Admin\Widgets\QuickActionsWidget::class,
        ];
        
        if ($isExpanded) {
            $widgets[] = \App\Filament\Admin\Widgets\RecentActivityWidget::class;
        }
        
        return $widgets;
        */
    }
    
    public function getColumns(): int | string | array
    {
        // Mobile-first responsive columns
        return [
            'default' => 1,
            'sm' => 1,
            'md' => 2,
            'lg' => session('dashboard_expanded', false) ? 3 : 2,
            'xl' => session('dashboard_expanded', false) ? 4 : 3,
        ];
    }
    
    public function getMaxContentWidth(): ?string
    {
        // Begrenzte maximale Breite f√ºr bessere Lesbarkeit
        return session('dashboard_expanded', false) ? 'full' : '7xl';
    }
}
