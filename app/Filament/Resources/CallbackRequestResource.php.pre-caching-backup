<?php

namespace App\Filament\Resources;

use App\Filament\Resources\CallbackRequestResource\Pages;
use App\Filament\Resources\CallbackRequestResource\RelationManagers;
use App\Models\CallbackRequest;
use App\Models\Customer;
use App\Models\Staff;
use App\Models\Branch;
use App\Models\Service;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Filament\Infolists;
use Filament\Infolists\Infolist;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\HtmlString;

class CallbackRequestResource extends Resource
{
    protected static ?string $model = CallbackRequest::class;

    protected static ?string $navigationIcon = 'heroicon-o-phone-arrow-down-left';

    protected static ?string $navigationGroup = 'CRM';

    protected static ?string $navigationLabel = 'Rückrufanfragen';

    protected static ?string $modelLabel = 'Rückrufanfrage';

    protected static ?string $pluralModelLabel = 'Rückrufanfragen';

    protected static ?int $navigationSort = 30;

    public static function getNavigationBadge(): ?string
    {
        return \Illuminate\Support\Facades\Cache::remember(
            'nav_badge_callbacks_pending',
            300,
            fn () => static::getModel()::where('status', CallbackRequest::STATUS_PENDING)->count()
        );
    }

    public static function getNavigationBadgeColor(): ?string
    {
        $count = (int) static::getNavigationBadge(); // Reuse cached value

        if ($count > 10) {
            return 'danger';
        } elseif ($count > 5) {
            return 'warning';
        }

        return 'info';
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Tabs::make('Tabs')
                    ->tabs([
                        Forms\Components\Tabs\Tab::make('Kontaktdaten')
                            ->icon('heroicon-o-user')
                            ->schema([
                                Forms\Components\Section::make()
                                    ->schema([
                                        Forms\Components\Grid::make(2)
                                            ->schema([
                                                Forms\Components\Select::make('customer_id')
                                                    ->label('Kunde')
                                                    ->relationship('customer', 'name')
                                                    ->searchable(['name', 'email', 'phone_number'])
                                                    ->preload()
                                                    ->nullable()
                                                    ->reactive()
                                                    ->afterStateUpdated(function ($state, callable $set) {
                                                        if ($state) {
                                                            $customer = Customer::find($state);
                                                            if ($customer) {
                                                                $set('phone_number', $customer->phone_number);
                                                                $set('customer_name', $customer->name);
                                                            }
                                                        }
                                                    })
                                                    ->createOptionForm([
                                                        Forms\Components\TextInput::make('name')
                                                            ->label('Name')
                                                            ->required()
                                                            ->maxLength(255),
                                                        Forms\Components\TextInput::make('phone_number')
                                                            ->label('Telefonnummer')
                                                            ->tel()
                                                            ->required()
                                                            ->maxLength(255),
                                                        Forms\Components\TextInput::make('email')
                                                            ->label('E-Mail')
                                                            ->email()
                                                            ->maxLength(255),
                                                    ])
                                                    ->helperText('Wählen Sie einen bestehenden Kunden oder erstellen Sie einen neuen'),

                                                Forms\Components\Select::make('branch_id')
                                                    ->label('Filiale')
                                                    ->relationship('branch', 'name')
                                                    ->required()
                                                    ->searchable()
                                                    ->preload()
                                                    ->helperText('Filiale für den Rückruf'),
                                            ]),

                                        Forms\Components\Grid::make(2)
                                            ->schema([
                                                Forms\Components\TextInput::make('phone_number')
                                                    ->label('Telefonnummer')
                                                    ->tel()
                                                    ->required()
                                                    ->maxLength(255)
                                                    ->prefixIcon('heroicon-o-phone')
                                                    ->helperText('Primäre Kontaktnummer'),

                                                Forms\Components\TextInput::make('customer_name')
                                                    ->label('Kundenname')
                                                    ->required()
                                                    ->maxLength(255)
                                                    ->prefixIcon('heroicon-o-user')
                                                    ->helperText('Name des Kunden für den Rückruf'),
                                            ]),
                                    ]),
                            ]),

                        Forms\Components\Tabs\Tab::make('Details')
                            ->icon('heroicon-o-document-text')
                            ->schema([
                                Forms\Components\Section::make()
                                    ->schema([
                                        Forms\Components\Grid::make(2)
                                            ->schema([
                                                Forms\Components\Select::make('service_id')
                                                    ->label('Service')
                                                    ->relationship('service', 'name')
                                                    ->searchable()
                                                    ->preload()
                                                    ->nullable()
                                                    ->helperText('Gewünschter Service (optional)'),

                                                Forms\Components\Select::make('priority')
                                                    ->label('Priorität')
                                                    ->options([
                                                        CallbackRequest::PRIORITY_NORMAL => 'Normal',
                                                        CallbackRequest::PRIORITY_HIGH => 'Hoch',
                                                        CallbackRequest::PRIORITY_URGENT => 'Dringend',
                                                    ])
                                                    ->default(CallbackRequest::PRIORITY_NORMAL)
                                                    ->required()
                                                    ->native(false)
                                                    ->helperText('Priorität der Anfrage'),
                                            ]),

                                        Forms\Components\KeyValue::make('preferred_time_window')
                                            ->label('Bevorzugtes Zeitfenster')
                                            ->keyLabel('Tag')
                                            ->valueLabel('Zeitraum')
                                            ->addActionLabel('Zeitfenster hinzufügen')
                                            ->reorderable()
                                            ->helperText('Bevorzugte Zeiten für den Rückruf (z.B. Montag: 09:00-12:00)')
                                            ->columnSpanFull(),

                                        Forms\Components\Textarea::make('notes')
                                            ->label('Notizen')
                                            ->rows(4)
                                            ->maxLength(65535)
                                            ->helperText('Zusätzliche Informationen zur Anfrage')
                                            ->columnSpanFull(),
                                    ]),
                            ]),

                        Forms\Components\Tabs\Tab::make('Zuweisung')
                            ->icon('heroicon-o-user-group')
                            ->schema([
                                Forms\Components\Section::make()
                                    ->schema([
                                        Forms\Components\Grid::make(2)
                                            ->schema([
                                                Forms\Components\Select::make('staff_id')
                                                    ->label('Bevorzugter Mitarbeiter')
                                                    ->relationship('staff', 'name')
                                                    ->searchable()
                                                    ->preload()
                                                    ->nullable()
                                                    ->helperText('Bevorzugter Mitarbeiter für den Rückruf (optional)'),

                                                Forms\Components\Select::make('assigned_to')
                                                    ->label('Zugewiesen an')
                                                    ->relationship('assignedTo', 'name')
                                                    ->searchable()
                                                    ->preload()
                                                    ->nullable()
                                                    ->helperText('Aktuell zugewiesener Mitarbeiter'),
                                            ]),

                                        Forms\Components\Grid::make(2)
                                            ->schema([
                                                Forms\Components\Select::make('status')
                                                    ->label('Status')
                                                    ->options([
                                                        CallbackRequest::STATUS_PENDING => 'Ausstehend',
                                                        CallbackRequest::STATUS_ASSIGNED => 'Zugewiesen',
                                                        CallbackRequest::STATUS_CONTACTED => 'Kontaktiert',
                                                        CallbackRequest::STATUS_COMPLETED => 'Abgeschlossen',
                                                        CallbackRequest::STATUS_EXPIRED => 'Abgelaufen',
                                                        CallbackRequest::STATUS_CANCELLED => 'Abgebrochen',
                                                    ])
                                                    ->default(CallbackRequest::STATUS_PENDING)
                                                    ->required()
                                                    ->native(false)
                                                    ->helperText('Aktueller Status der Anfrage'),

                                                Forms\Components\DateTimePicker::make('expires_at')
                                                    ->label('Läuft ab am')
                                                    ->nullable()
                                                    ->native(false)
                                                    ->helperText('Ablaufzeitpunkt der Anfrage')
                                                    ->displayFormat('d.m.Y H:i'),
                                            ]),
                                    ]),
                            ]),
                    ])
                    ->columnSpanFull()
                    ->persistTabInQueryString(),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('id')
                    ->label('ID')
                    ->badge()
                    ->searchable()
                    ->sortable()
                    ->toggleable(),

                Tables\Columns\TextColumn::make('customer_name')
                    ->label('Kunde')
                    ->weight('bold')
                    ->description(fn (CallbackRequest $record): string => $record->phone_number)
                    ->icon('heroicon-o-user')
                    ->searchable(['customer_name', 'phone_number'])
                    ->sortable()
                    ->wrap(),

                Tables\Columns\TextColumn::make('status')
                    ->label('Status')
                    ->badge()
                    ->formatStateUsing(fn (string $state): string => match ($state) {
                        CallbackRequest::STATUS_PENDING => 'Ausstehend',
                        CallbackRequest::STATUS_ASSIGNED => 'Zugewiesen',
                        CallbackRequest::STATUS_CONTACTED => 'Kontaktiert',
                        CallbackRequest::STATUS_COMPLETED => 'Abgeschlossen',
                        CallbackRequest::STATUS_EXPIRED => 'Abgelaufen',
                        CallbackRequest::STATUS_CANCELLED => 'Abgebrochen',
                        default => $state,
                    })
                    ->color(fn (string $state): string => match ($state) {
                        CallbackRequest::STATUS_PENDING => 'warning',
                        CallbackRequest::STATUS_ASSIGNED => 'info',
                        CallbackRequest::STATUS_CONTACTED => 'primary',
                        CallbackRequest::STATUS_COMPLETED => 'success',
                        CallbackRequest::STATUS_EXPIRED => 'danger',
                        CallbackRequest::STATUS_CANCELLED => 'gray',
                        default => 'gray',
                    })
                    ->sortable()
                    ->searchable(),

                Tables\Columns\TextColumn::make('priority')
                    ->label('Priorität')
                    ->badge()
                    ->formatStateUsing(fn (string $state): string => match ($state) {
                        CallbackRequest::PRIORITY_NORMAL => 'Normal',
                        CallbackRequest::PRIORITY_HIGH => 'Hoch',
                        CallbackRequest::PRIORITY_URGENT => 'Dringend',
                        default => $state,
                    })
                    ->color(fn (string $state): string => match ($state) {
                        CallbackRequest::PRIORITY_NORMAL => 'gray',
                        CallbackRequest::PRIORITY_HIGH => 'warning',
                        CallbackRequest::PRIORITY_URGENT => 'danger',
                        default => 'gray',
                    })
                    ->icon(fn (string $state): string => match ($state) {
                        CallbackRequest::PRIORITY_URGENT => 'heroicon-o-exclamation-triangle',
                        CallbackRequest::PRIORITY_HIGH => 'heroicon-o-arrow-up',
                        default => 'heroicon-o-minus',
                    })
                    ->sortable()
                    ->toggleable(),

                Tables\Columns\TextColumn::make('branch.name')
                    ->label('Filiale')
                    ->searchable()
                    ->sortable()
                    ->toggleable(),

                Tables\Columns\TextColumn::make('service.name')
                    ->label('Service')
                    ->searchable()
                    ->sortable()
                    ->toggleable()
                    ->default('—'),

                Tables\Columns\TextColumn::make('assignedTo.name')
                    ->label('Zugewiesen an')
                    ->searchable()
                    ->sortable()
                    ->toggleable()
                    ->default('—')
                    ->icon('heroicon-o-user'),

                Tables\Columns\TextColumn::make('expires_at')
                    ->label('Läuft ab')
                    ->dateTime('d.m.Y H:i')
                    ->description(fn (CallbackRequest $record): ?string =>
                        $record->expires_at ? $record->expires_at->diffForHumans() : null
                    )
                    ->sortable()
                    ->toggleable()
                    ->color(fn (CallbackRequest $record): string =>
                        $record->is_overdue ? 'danger' : 'gray'
                    ),

                Tables\Columns\TextColumn::make('created_at')
                    ->label('Erstellt am')
                    ->dateTime('d.m.Y H:i')
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),

                Tables\Columns\TextColumn::make('escalations_count')
                    ->label('Eskalationen')
                    ->counts('escalations')
                    ->badge()
                    ->color('danger')
                    ->toggleable()
                    ->sortable(),
            ])
            ->defaultSort('created_at', 'desc')
            ->filters([
                Tables\Filters\SelectFilter::make('status')
                    ->label('Status')
                    ->multiple()
                    ->options([
                        CallbackRequest::STATUS_PENDING => 'Ausstehend',
                        CallbackRequest::STATUS_ASSIGNED => 'Zugewiesen',
                        CallbackRequest::STATUS_CONTACTED => 'Kontaktiert',
                        CallbackRequest::STATUS_COMPLETED => 'Abgeschlossen',
                        CallbackRequest::STATUS_EXPIRED => 'Abgelaufen',
                        CallbackRequest::STATUS_CANCELLED => 'Abgebrochen',
                    ]),

                Tables\Filters\SelectFilter::make('priority')
                    ->label('Priorität')
                    ->multiple()
                    ->options([
                        CallbackRequest::PRIORITY_NORMAL => 'Normal',
                        CallbackRequest::PRIORITY_HIGH => 'Hoch',
                        CallbackRequest::PRIORITY_URGENT => 'Dringend',
                    ]),

                Tables\Filters\SelectFilter::make('branch_id')
                    ->label('Filiale')
                    ->relationship('branch', 'name')
                    ->searchable()
                    ->preload(),

                Tables\Filters\TernaryFilter::make('overdue')
                    ->label('Überfällig')
                    ->queries(
                        true: fn (Builder $query) => $query->overdue(),
                        false: fn (Builder $query) => $query->where(function (Builder $query) {
                            $query->where('expires_at', '>=', now())
                                ->orWhereNull('expires_at')
                                ->orWhereIn('status', [
                                    CallbackRequest::STATUS_COMPLETED,
                                    CallbackRequest::STATUS_EXPIRED,
                                    CallbackRequest::STATUS_CANCELLED
                                ]);
                        }),
                    )
                    ->placeholder('Alle anzeigen'),

                Tables\Filters\Filter::make('created_at')
                    ->form([
                        Forms\Components\DatePicker::make('created_from')
                            ->label('Erstellt von')
                            ->native(false),
                        Forms\Components\DatePicker::make('created_until')
                            ->label('Erstellt bis')
                            ->native(false),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['created_from'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),
                            )
                            ->when(
                                $data['created_until'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),
                            );
                    })
                    ->indicateUsing(function (array $data): array {
                        $indicators = [];

                        if ($data['created_from'] ?? null) {
                            $indicators[] = Tables\Filters\Indicator::make('Erstellt ab ' . \Carbon\Carbon::parse($data['created_from'])->format('d.m.Y'))
                                ->removeField('created_from');
                        }

                        if ($data['created_until'] ?? null) {
                            $indicators[] = Tables\Filters\Indicator::make('Erstellt bis ' . \Carbon\Carbon::parse($data['created_until'])->format('d.m.Y'))
                                ->removeField('created_until');
                        }

                        return $indicators;
                    }),

                Tables\Filters\TrashedFilter::make(),
            ], layout: Tables\Enums\FiltersLayout::AboveContent)
            ->filtersFormColumns(3)
            ->actions([
                Tables\Actions\ActionGroup::make([
                    Tables\Actions\Action::make('assign')
                        ->label('Zuweisen')
                        ->icon('heroicon-o-user-plus')
                        ->color('info')
                        ->visible(fn (CallbackRequest $record): bool => !$record->assigned_to)
                        ->form([
                            Forms\Components\Select::make('staff_id')
                                ->label('Mitarbeiter')
                                ->options(Staff::pluck('name', 'id'))
                                ->searchable()
                                ->required()
                                ->helperText('Wählen Sie den Mitarbeiter für die Bearbeitung'),
                        ])
                        ->action(function (CallbackRequest $record, array $data): void {
                            $staff = Staff::find($data['staff_id']);
                            if ($staff) {
                                $record->assign($staff);
                            }
                        })
                        ->successNotificationTitle('Erfolgreich zugewiesen')
                        ->requiresConfirmation(),

                    Tables\Actions\Action::make('markContacted')
                        ->label('Als kontaktiert markieren')
                        ->icon('heroicon-o-check-circle')
                        ->color('primary')
                        ->visible(fn (CallbackRequest $record): bool =>
                            $record->status === CallbackRequest::STATUS_ASSIGNED
                        )
                        ->action(fn (CallbackRequest $record) => $record->markContacted())
                        ->successNotificationTitle('Als kontaktiert markiert')
                        ->requiresConfirmation(),

                    Tables\Actions\Action::make('markCompleted')
                        ->label('Als abgeschlossen markieren')
                        ->icon('heroicon-o-check-badge')
                        ->color('success')
                        ->visible(fn (CallbackRequest $record): bool =>
                            $record->status === CallbackRequest::STATUS_CONTACTED
                        )
                        ->form([
                            Forms\Components\Textarea::make('notes')
                                ->label('Abschlussnotizen')
                                ->rows(3)
                                ->helperText('Zusätzliche Informationen zum Abschluss'),
                        ])
                        ->action(function (CallbackRequest $record, array $data): void {
                            if (!empty($data['notes'])) {
                                $record->notes = ($record->notes ? $record->notes . "\n\n" : '') .
                                    '**Abschluss:** ' . $data['notes'];
                            }
                            $record->markCompleted();
                        })
                        ->successNotificationTitle('Als abgeschlossen markiert')
                        ->requiresConfirmation(),

                    Tables\Actions\Action::make('escalate')
                        ->label('Eskalieren')
                        ->icon('heroicon-o-exclamation-triangle')
                        ->color('danger')
                        ->visible(fn (CallbackRequest $record): bool =>
                            $record->status !== CallbackRequest::STATUS_COMPLETED
                        )
                        ->form([
                            Forms\Components\Select::make('reason')
                                ->label('Eskalationsgrund')
                                ->options([
                                    'no_response' => 'Keine Antwort',
                                    'technical_issue' => 'Technisches Problem',
                                    'customer_complaint' => 'Kundenbeschwerde',
                                    'urgent_request' => 'Dringende Anfrage',
                                    'complex_case' => 'Komplexer Fall',
                                    'other' => 'Sonstiges',
                                ])
                                ->required()
                                ->native(false),
                            Forms\Components\Textarea::make('details')
                                ->label('Details')
                                ->rows(3)
                                ->helperText('Zusätzliche Informationen zur Eskalation'),
                        ])
                        ->action(function (CallbackRequest $record, array $data): void {
                            $reason = $data['reason'];
                            if (!empty($data['details'])) {
                                $reason .= ': ' . $data['details'];
                            }
                            $record->escalate($reason);
                        })
                        ->successNotificationTitle('Erfolgreich eskaliert')
                        ->requiresConfirmation(),

                    Tables\Actions\ViewAction::make(),
                    Tables\Actions\EditAction::make(),
                ]),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\BulkAction::make('bulkAssign')
                        ->label('Zuweisen')
                        ->icon('heroicon-o-user-plus')
                        ->color('info')
                        ->form([
                            Forms\Components\Select::make('staff_id')
                                ->label('Mitarbeiter')
                                ->options(Staff::pluck('name', 'id'))
                                ->searchable()
                                ->required()
                                ->helperText('Wählen Sie den Mitarbeiter für alle ausgewählten Anfragen'),
                        ])
                        ->action(function (\Illuminate\Database\Eloquent\Collection $records, array $data): void {
                            $staff = Staff::find($data['staff_id']);
                            if ($staff) {
                                foreach ($records as $record) {
                                    $record->assign($staff);
                                }
                            }
                        })
                        ->successNotificationTitle('Erfolgreich zugewiesen')
                        ->deselectRecordsAfterCompletion()
                        ->requiresConfirmation(),

                    Tables\Actions\BulkAction::make('bulkComplete')
                        ->label('Als abgeschlossen markieren')
                        ->icon('heroicon-o-check-badge')
                        ->color('success')
                        ->action(function (\Illuminate\Database\Eloquent\Collection $records): void {
                            foreach ($records as $record) {
                                $record->markCompleted();
                            }
                        })
                        ->successNotificationTitle('Als abgeschlossen markiert')
                        ->deselectRecordsAfterCompletion()
                        ->requiresConfirmation(),

                    Tables\Actions\DeleteBulkAction::make()
                        ->requiresConfirmation(),

                    Tables\Actions\ForceDeleteBulkAction::make()
                        ->requiresConfirmation(),

                    Tables\Actions\RestoreBulkAction::make(),
                ]),
            ])
            ->modifyQueryUsing(fn (Builder $query) =>
                $query->with(['customer', 'branch', 'service', 'assignedTo'])
                    ->withCount('escalations')
            )
            ->recordUrl(fn (CallbackRequest $record): string =>
                CallbackRequestResource::getUrl('view', ['record' => $record])
            );
    }

    public static function infolist(Infolist $infolist): Infolist
    {
        return $infolist
            ->schema([
                Infolists\Components\Section::make('Hauptinformationen')
                    ->icon('heroicon-o-information-circle')
                    ->schema([
                        Infolists\Components\Grid::make(3)
                            ->schema([
                                Infolists\Components\TextEntry::make('id')
                                    ->label('ID')
                                    ->badge(),

                                Infolists\Components\TextEntry::make('status')
                                    ->label('Status')
                                    ->badge()
                                    ->formatStateUsing(fn (string $state): string => match ($state) {
                                        CallbackRequest::STATUS_PENDING => 'Ausstehend',
                                        CallbackRequest::STATUS_ASSIGNED => 'Zugewiesen',
                                        CallbackRequest::STATUS_CONTACTED => 'Kontaktiert',
                                        CallbackRequest::STATUS_COMPLETED => 'Abgeschlossen',
                                        CallbackRequest::STATUS_EXPIRED => 'Abgelaufen',
                                        CallbackRequest::STATUS_CANCELLED => 'Abgebrochen',
                                        default => $state,
                                    })
                                    ->color(fn (string $state): string => match ($state) {
                                        CallbackRequest::STATUS_PENDING => 'warning',
                                        CallbackRequest::STATUS_ASSIGNED => 'info',
                                        CallbackRequest::STATUS_CONTACTED => 'primary',
                                        CallbackRequest::STATUS_COMPLETED => 'success',
                                        CallbackRequest::STATUS_EXPIRED => 'danger',
                                        CallbackRequest::STATUS_CANCELLED => 'gray',
                                        default => 'gray',
                                    }),

                                Infolists\Components\TextEntry::make('priority')
                                    ->label('Priorität')
                                    ->badge()
                                    ->formatStateUsing(fn (string $state): string => match ($state) {
                                        CallbackRequest::PRIORITY_NORMAL => 'Normal',
                                        CallbackRequest::PRIORITY_HIGH => 'Hoch',
                                        CallbackRequest::PRIORITY_URGENT => 'Dringend',
                                        default => $state,
                                    })
                                    ->color(fn (string $state): string => match ($state) {
                                        CallbackRequest::PRIORITY_NORMAL => 'gray',
                                        CallbackRequest::PRIORITY_HIGH => 'warning',
                                        CallbackRequest::PRIORITY_URGENT => 'danger',
                                        default => 'gray',
                                    }),
                            ]),

                        Infolists\Components\Grid::make(2)
                            ->schema([
                                Infolists\Components\TextEntry::make('customer_name')
                                    ->label('Kundenname')
                                    ->icon('heroicon-o-user')
                                    ->weight('bold'),

                                Infolists\Components\TextEntry::make('phone_number')
                                    ->label('Telefonnummer')
                                    ->icon('heroicon-o-phone')
                                    ->copyable(),

                                Infolists\Components\TextEntry::make('customer.email')
                                    ->label('E-Mail')
                                    ->icon('heroicon-o-envelope')
                                    ->copyable()
                                    ->placeholder('—'),

                                Infolists\Components\TextEntry::make('branch.name')
                                    ->label('Filiale')
                                    ->icon('heroicon-o-building-office'),

                                Infolists\Components\TextEntry::make('service.name')
                                    ->label('Service')
                                    ->icon('heroicon-o-wrench-screwdriver')
                                    ->placeholder('—'),

                                Infolists\Components\TextEntry::make('staff.name')
                                    ->label('Bevorzugter Mitarbeiter')
                                    ->icon('heroicon-o-user')
                                    ->placeholder('—'),
                            ]),

                        Infolists\Components\TextEntry::make('preferred_time_window')
                            ->label('Bevorzugtes Zeitfenster')
                            ->formatStateUsing(function ($state): string {
                                if (!$state || !is_array($state)) {
                                    return '—';
                                }
                                return collect($state)
                                    ->map(fn ($time, $day) => "$day: $time")
                                    ->join(', ');
                            })
                            ->columnSpanFull(),

                        Infolists\Components\TextEntry::make('notes')
                            ->label('Notizen')
                            ->markdown()
                            ->placeholder('Keine Notizen')
                            ->columnSpanFull(),
                    ]),

                Infolists\Components\Section::make('Bearbeitung')
                    ->icon('heroicon-o-cog')
                    ->schema([
                        Infolists\Components\Grid::make(3)
                            ->schema([
                                Infolists\Components\TextEntry::make('assignedTo.name')
                                    ->label('Zugewiesen an')
                                    ->icon('heroicon-o-user')
                                    ->placeholder('Nicht zugewiesen'),

                                Infolists\Components\TextEntry::make('contacted_at')
                                    ->label('Kontaktiert am')
                                    ->dateTime('d.m.Y H:i')
                                    ->placeholder('Noch nicht kontaktiert'),

                                Infolists\Components\TextEntry::make('completed_at')
                                    ->label('Abgeschlossen am')
                                    ->dateTime('d.m.Y H:i')
                                    ->placeholder('Noch nicht abgeschlossen'),
                            ]),
                    ]),

                Infolists\Components\Section::make('Zeitplanung')
                    ->icon('heroicon-o-clock')
                    ->schema([
                        Infolists\Components\Grid::make(3)
                            ->schema([
                                Infolists\Components\TextEntry::make('created_at')
                                    ->label('Erstellt am')
                                    ->dateTime('d.m.Y H:i')
                                    ->description(fn (CallbackRequest $record): string =>
                                        $record->created_at->diffForHumans()
                                    ),

                                Infolists\Components\TextEntry::make('expires_at')
                                    ->label('Läuft ab am')
                                    ->dateTime('d.m.Y H:i')
                                    ->description(fn (CallbackRequest $record): ?string =>
                                        $record->expires_at ? $record->expires_at->diffForHumans() : null
                                    )
                                    ->placeholder('Kein Ablaufdatum')
                                    ->color(fn (CallbackRequest $record): string =>
                                        $record->is_overdue ? 'danger' : 'gray'
                                    ),

                                Infolists\Components\TextEntry::make('is_overdue')
                                    ->label('Überfällig')
                                    ->formatStateUsing(fn (bool $state): string => $state ? 'Ja' : 'Nein')
                                    ->badge()
                                    ->color(fn (bool $state): string => $state ? 'danger' : 'success')
                                    ->icon(fn (bool $state): string => $state ? 'heroicon-o-exclamation-triangle' : 'heroicon-o-check-circle'),
                            ]),
                    ]),

                Infolists\Components\Section::make('Eskalationen')
                    ->icon('heroicon-o-exclamation-triangle')
                    ->schema([
                        Infolists\Components\RepeatableEntry::make('escalations')
                            ->label('')
                            ->schema([
                                Infolists\Components\Grid::make(3)
                                    ->schema([
                                        Infolists\Components\TextEntry::make('escalation_reason')
                                            ->label('Grund'),

                                        Infolists\Components\TextEntry::make('escalatedFrom.name')
                                            ->label('Von')
                                            ->placeholder('—'),

                                        Infolists\Components\TextEntry::make('escalatedTo.name')
                                            ->label('An')
                                            ->placeholder('—'),

                                        Infolists\Components\TextEntry::make('escalated_at')
                                            ->label('Eskaliert am')
                                            ->dateTime('d.m.Y H:i')
                                            ->description(fn ($record): string =>
                                                $record->escalated_at?->diffForHumans() ?? ''
                                            ),
                                    ]),
                            ])
                            ->placeholder('Keine Eskalationen')
                            ->columnSpanFull(),
                    ])
                    ->visible(fn (CallbackRequest $record): bool => $record->escalations()->exists()),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListCallbackRequests::route('/'),
            'create' => Pages\CreateCallbackRequest::route('/create'),
            'view' => Pages\ViewCallbackRequest::route('/{record}'),
            'edit' => Pages\EditCallbackRequest::route('/{record}/edit'),
        ];
    }

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->withoutGlobalScopes([
                SoftDeletingScope::class,
            ]);
    }

    public static function getRecordTitle($record): ?string
    {
        return $record->customer_name;
    }
}
