<?php

namespace App\Filament\Resources;

use App\Filament\Resources\CurrencyExchangeRateResource\Pages;
use App\Models\CurrencyExchangeRate;
use App\Services\ExchangeRateService;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Filament\Notifications\Notification;

class CurrencyExchangeRateResource extends Resource
{
    protected static ?string $model = CurrencyExchangeRate::class;

    protected static ?string $navigationIcon = 'heroicon-o-currency-dollar';

    protected static ?string $navigationLabel = 'Wechselkurse';

    protected static ?string $modelLabel = 'Wechselkurs';

    protected static ?string $pluralModelLabel = 'Wechselkurse';

    protected static ?string $navigationGroup = 'Finanzen';

    protected static ?int $navigationSort = 2;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('Währungspaar')
                    ->schema([
                        Forms\Components\Select::make('from_currency')
                            ->options([
                                'USD' => 'USD - US Dollar',
                                'EUR' => 'EUR - Euro',
                                'GBP' => 'GBP - Britisches Pfund'
                            ])
                            ->required()
                            ->label('Von Währung'),

                        Forms\Components\Select::make('to_currency')
                            ->options([
                                'USD' => 'USD - US Dollar',
                                'EUR' => 'EUR - Euro',
                                'GBP' => 'GBP - Britisches Pfund'
                            ])
                            ->required()
                            ->label('Nach Währung')
                            ->different('from_currency'),

                        Forms\Components\TextInput::make('rate')
                            ->numeric()
                            ->required()
                            ->label('Wechselkurs')
                            ->step(0.000001)
                            ->minValue(0.000001)
                            ->helperText('1 Von-Währung = X Nach-Währung'),

                        Forms\Components\Select::make('source')
                            ->options([
                                'manual' => 'Manuell',
                                'ecb' => 'ECB (Europäische Zentralbank)',
                                'fixer' => 'Fixer.io',
                                'openexchange' => 'Open Exchange Rates'
                            ])
                            ->default('manual')
                            ->required()
                            ->label('Quelle'),
                    ])
                    ->columns(2),

                Forms\Components\Section::make('Gültigkeit')
                    ->schema([
                        Forms\Components\DateTimePicker::make('valid_from')
                            ->required()
                            ->default(now())
                            ->label('Gültig ab'),

                        Forms\Components\DateTimePicker::make('valid_until')
                            ->label('Gültig bis')
                            ->helperText('Leer lassen für unbegrenzte Gültigkeit'),

                        Forms\Components\Toggle::make('is_active')
                            ->default(true)
                            ->label('Aktiv')
                            ->helperText('Nur aktive Kurse werden für Berechnungen verwendet'),
                    ])
                    ->columns(2),

                Forms\Components\Section::make('Metadaten')
                    ->schema([
                        Forms\Components\KeyValue::make('metadata')
                            ->label('Zusätzliche Informationen')
                            ->columnSpanFull(),
                    ])
                    ->collapsed(),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('from_currency')
                    ->label('Von')
                    ->badge()
                    ->color('primary')
                    ->sortable(),

                Tables\Columns\IconColumn::make('direction')
                    ->label('')
                    ->icon('heroicon-o-arrow-right')
                    ->color('gray'),

                Tables\Columns\TextColumn::make('to_currency')
                    ->label('Nach')
                    ->badge()
                    ->color('success')
                    ->sortable(),

                Tables\Columns\TextColumn::make('rate')
                    ->label('Kurs')
                    ->formatStateUsing(fn ($state) => number_format($state, 6, ',', '.'))
                    ->sortable(),

                Tables\Columns\TextColumn::make('source')
                    ->label('Quelle')
                    ->formatStateUsing(fn (string $state): string => match($state) {
                        'manual' => 'Manuell',
                        'ecb' => 'ECB',
                        'fixer' => 'Fixer.io',
                        'openexchange' => 'Open Exchange',
                        default => ucfirst($state)
                    })
                    ->badge()
                    ->color(fn (string $state): string => match($state) {
                        'manual' => 'gray',
                        'ecb' => 'success',
                        'fixer' => 'info',
                        'openexchange' => 'warning',
                        default => 'secondary'
                    }),

                Tables\Columns\IconColumn::make('is_active')
                    ->label('Aktiv')
                    ->boolean()
                    ->sortable(),

                Tables\Columns\TextColumn::make('valid_from')
                    ->label('Gültig ab')
                    ->dateTime('d.m.Y H:i')
                    ->sortable(),

                Tables\Columns\TextColumn::make('valid_until')
                    ->label('Gültig bis')
                    ->dateTime('d.m.Y H:i')
                    ->placeholder('Unbegrenzt')
                    ->toggleable(),

                Tables\Columns\TextColumn::make('conversion_display')
                    ->label('Umrechnung')
                    ->getStateUsing(function ($record) {
                        return sprintf('1 %s = %.4f %s',
                            $record->from_currency,
                            $record->rate,
                            $record->to_currency
                        );
                    })
                    ->badge()
                    ->color('info'),

                Tables\Columns\TextColumn::make('updated_at')
                    ->label('Aktualisiert')
                    ->dateTime('d.m.Y H:i')
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('from_currency')
                    ->options([
                        'USD' => 'USD',
                        'EUR' => 'EUR',
                        'GBP' => 'GBP'
                    ])
                    ->label('Von Währung'),

                Tables\Filters\SelectFilter::make('to_currency')
                    ->options([
                        'USD' => 'USD',
                        'EUR' => 'EUR',
                        'GBP' => 'GBP'
                    ])
                    ->label('Nach Währung'),

                Tables\Filters\SelectFilter::make('source')
                    ->options([
                        'manual' => 'Manuell',
                        'ecb' => 'ECB',
                        'fixer' => 'Fixer.io',
                        'openexchange' => 'Open Exchange'
                    ])
                    ->label('Quelle'),

                Tables\Filters\TernaryFilter::make('is_active')
                    ->label('Aktiv')
                    ->placeholder('Alle')
                    ->trueLabel('Nur aktive')
                    ->falseLabel('Nur inaktive'),
            ])
            ->actions([
                Tables\Actions\Action::make('updateRates')
                    ->label('Kurse aktualisieren')
                    ->icon('heroicon-o-arrow-path')
                    ->color('info')
                    ->requiresConfirmation()
                    ->modalHeading('Wechselkurse aktualisieren')
                    ->modalDescription('Dies wird alle Kurse von verfügbaren externen Quellen abrufen.')
                    ->action(function () {
                        $service = new ExchangeRateService();
                        $results = $service->updateAllRates();

                        if (!empty($results)) {
                            Notification::make()
                                ->title('Kurse erfolgreich aktualisiert')
                                ->body('Aktualisierte Quellen: ' . implode(', ', array_keys($results)))
                                ->success()
                                ->send();
                        } else {
                            Notification::make()
                                ->title('Aktualisierung fehlgeschlagen')
                                ->body('Keine Kurse konnten abgerufen werden.')
                                ->danger()
                                ->send();
                        }
                    })
                    ->visible(fn () => auth()->user()->hasRole(['super-admin', 'super_admin'])),

                Tables\Actions\ViewAction::make(),
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                    Tables\Actions\BulkAction::make('deactivate')
                        ->label('Deaktivieren')
                        ->icon('heroicon-o-x-circle')
                        ->color('warning')
                        ->requiresConfirmation()
                        ->action(fn ($records) => $records->each->update(['is_active' => false])),
                    Tables\Actions\BulkAction::make('activate')
                        ->label('Aktivieren')
                        ->icon('heroicon-o-check-circle')
                        ->color('success')
                        ->requiresConfirmation()
                        ->action(fn ($records) => $records->each->update(['is_active' => true])),
                ]),
            ])
            ->defaultSort('created_at', 'desc')
            ->headerActions([
                Tables\Actions\Action::make('seedDefaults')
                    ->label('Standard-Kurse laden')
                    ->icon('heroicon-o-cloud-arrow-down')
                    ->color('warning')
                    ->requiresConfirmation()
                    ->modalHeading('Standard-Wechselkurse laden')
                    ->modalDescription('Dies wird die Standard-Wechselkurse in die Datenbank laden.')
                    ->action(function () {
                        CurrencyExchangeRate::seedDefaultRates();
                        Notification::make()
                            ->title('Standard-Kurse geladen')
                            ->success()
                            ->send();
                    })
                    ->visible(fn () => CurrencyExchangeRate::count() === 0),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListCurrencyExchangeRates::route('/'),
            'create' => Pages\CreateCurrencyExchangeRate::route('/create'),
            'view' => Pages\ViewCurrencyExchangeRate::route('/{record}'),
            'edit' => Pages\EditCurrencyExchangeRate::route('/{record}/edit'),
        ];
    }

    public static function getNavigationBadge(): ?string
    {
        $active = static::getModel()::where('is_active', true)->count();
        return $active > 0 ? (string) $active : null;
    }
}