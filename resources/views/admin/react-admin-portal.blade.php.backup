<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AskProAI Admin Portal</title>
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background: #f0f2f5;
            color: #1a1a1a;
        }

        .app-container {
            display: flex;
            height: 100vh;
            overflow: hidden;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            background: #1a1f2e;
            color: white;
            display: flex;
            flex-direction: column;
            transition: all 0.3s ease;
        }

        .sidebar.collapsed {
            width: 80px;
        }

        .sidebar-header {
            padding: 24px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .sidebar-logo {
            font-size: 24px;
            font-weight: 700;
            color: #fff;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .sidebar.collapsed .sidebar-logo span {
            display: none;
        }

        .sidebar-nav {
            flex: 1;
            padding: 16px 0;
            overflow-y: auto;
        }

        .nav-item {
            margin: 4px 16px;
        }

        .nav-link {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 16px;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.2s ease;
            cursor: pointer;
            font-size: 15px;
        }

        .nav-link:hover {
            background: rgba(255,255,255,0.1);
            color: white;
        }

        .nav-link.active {
            background: #3b82f6;
            color: white;
        }

        .sidebar.collapsed .nav-link span {
            display: none;
        }

        .nav-icon {
            width: 20px;
            height: 20px;
            flex-shrink: 0;
        }

        .sidebar-footer {
            padding: 16px;
            border-top: 1px solid rgba(255,255,255,0.1);
        }

        /* Main Content */
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        /* Header */
        .header {
            background: white;
            padding: 16px 32px;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .sidebar-toggle {
            background: none;
            border: none;
            cursor: pointer;
            padding: 8px;
            border-radius: 6px;
            transition: background 0.2s;
        }

        .sidebar-toggle:hover {
            background: #f3f4f6;
        }

        .search-box {
            position: relative;
            width: 400px;
        }

        .search-input {
            width: 100%;
            padding: 10px 16px 10px 40px;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.2s;
        }

        .search-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59,130,246,0.1);
        }

        .search-icon {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: #9ca3af;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .header-button {
            background: none;
            border: 1px solid #e5e7eb;
            padding: 8px 12px;
            border-radius: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
            transition: all 0.2s;
        }

        .header-button:hover {
            background: #f9fafb;
            border-color: #d1d5db;
        }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 8px 12px;
            border-radius: 8px;
            cursor: pointer;
            transition: background 0.2s;
        }

        .user-menu:hover {
            background: #f9fafb;
        }

        .user-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background: #3b82f6;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
        }

        /* Content Area */
        .content {
            flex: 1;
            overflow-y: auto;
            padding: 32px;
        }

        /* Page Header */
        .page-header {
            margin-bottom: 32px;
        }

        .page-title {
            font-size: 32px;
            font-weight: 700;
            color: #1a1a1a;
            margin-bottom: 8px;
        }

        .page-subtitle {
            font-size: 16px;
            color: #6b7280;
        }

        /* Cards */
        .card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            padding: 24px;
            margin-bottom: 24px;
        }

        .card-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .card-title {
            font-size: 18px;
            font-weight: 600;
            color: #1a1a1a;
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 24px;
            margin-bottom: 32px;
        }

        .stat-card {
            background: white;
            padding: 24px;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .stat-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 16px;
        }

        .stat-icon.blue { background: #dbeafe; color: #3b82f6; }
        .stat-icon.green { background: #d1fae5; color: #10b981; }
        .stat-icon.yellow { background: #fef3c7; color: #f59e0b; }
        .stat-icon.red { background: #fee2e2; color: #ef4444; }

        .stat-value {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 4px;
        }

        .stat-label {
            color: #6b7280;
            font-size: 14px;
        }

        .stat-change {
            display: inline-flex;
            align-items: center;
            gap: 4px;
            margin-top: 8px;
            font-size: 14px;
        }

        .stat-change.positive { color: #10b981; }
        .stat-change.negative { color: #ef4444; }

        /* Tables */
        .table-container {
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th {
            background: #f9fafb;
            padding: 12px 16px;
            text-align: left;
            font-weight: 600;
            font-size: 14px;
            color: #6b7280;
            border-bottom: 1px solid #e5e7eb;
        }

        td {
            padding: 16px;
            border-bottom: 1px solid #f3f4f6;
        }

        tbody tr {
            transition: background 0.2s;
        }

        tbody tr:hover {
            background: #f9fafb;
        }

        /* Row highlighting */
        .table-row-vip {
            background-color: #fef3c7 !important;
        }

        .table-row-vip:hover {
            background-color: #fde68a !important;
        }

        .table-row-problem {
            background-color: #fee2e2 !important;
        }

        .table-row-problem:hover {
            background-color: #fecaca !important;
        }

        /* Buttons */
        .btn {
            padding: 10px 20px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            border: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: #3b82f6;
            color: white;
        }

        .btn-primary:hover {
            background: #2563eb;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(59,130,246,0.3);
        }

        .btn-secondary {
            background: #e5e7eb;
            color: #374151;
        }

        .btn-secondary:hover {
            background: #d1d5db;
        }

        .btn-danger {
            background: #ef4444;
            color: white;
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        .btn-success {
            background: #10b981;
            color: white;
        }

        .btn-success:hover {
            background: #059669;
        }

        .btn-sm {
            padding: 6px 12px;
            font-size: 13px;
        }

        /* Forms */
        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            font-size: 14px;
            color: #374151;
        }

        .form-control {
            width: 100%;
            padding: 10px 14px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.2s;
        }

        .form-control:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59,130,246,0.1);
        }

        .form-input {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 14px;
            transition: all 0.2s;
        }

        .form-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59,130,246,0.1);
        }

        .form-select {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 14px;
            transition: all 0.2s;
            background-color: white;
            cursor: pointer;
        }

        .form-select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59,130,246,0.1);
        }

        .form-checkbox {
            width: 16px;
            height: 16px;
            border: 1px solid #d1d5db;
            border-radius: 4px;
            cursor: pointer;
        }

        .form-checkbox:checked {
            background-color: #3b82f6;
            border-color: #3b82f6;
        }

        /* Modals */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            animation: fadeIn 0.2s ease;
        }

        .modal {
            background: white;
            border-radius: 12px;
            padding: 32px;
            max-width: 600px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            animation: slideIn 0.3s ease;
        }

        .modal-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 24px;
        }

        .modal-title {
            font-size: 24px;
            font-weight: 700;
        }

        .modal-close {
            background: none;
            border: none;
            cursor: pointer;
            padding: 8px;
            border-radius: 6px;
            transition: background 0.2s;
        }

        .modal-close:hover {
            background: #f3f4f6;
        }

        .modal-content {
            background: white;
            border-radius: 12px;
            width: 90%;
            max-height: 90vh;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            animation: slideIn 0.3s ease;
        }

        .modal-body {
            padding: 24px;
            overflow-y: auto;
            flex: 1;
        }

        .modal-footer {
            padding: 16px 24px;
            border-top: 1px solid #e5e7eb;
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        }

        .card-body {
            padding: 20px;
        }

        .card-footer {
            padding: 16px 20px;
            border-top: 1px solid #e5e7eb;
        }

        /* Badges */
        .badge {
            display: inline-flex;
            align-items: center;
            padding: 4px 12px;
            border-radius: 999px;
            font-size: 12px;
            font-weight: 600;
        }

        .badge-primary { background: #dbeafe; color: #3b82f6; }
        .badge-success { background: #d1fae5; color: #10b981; }
        .badge-warning { background: #fef3c7; color: #f59e0b; }
        .badge-danger { background: #fee2e2; color: #ef4444; }
        .badge-gray { background: #f3f4f6; color: #6b7280; }

        /* Loading States */
        .spinner {
            border: 3px solid #f3f4f6;
            border-top: 3px solid #3b82f6;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }

        .skeleton {
            background: linear-gradient(90deg, #f3f4f6 25%, #e5e7eb 50%, #f3f4f6 75%);
            background-size: 200% 100%;
            animation: loading 1.5s infinite;
            border-radius: 4px;
        }

        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideIn {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @keyframes loading {
            0% { background-position: -200% 0; }
            100% { background-position: 200% 0; }
        }

        /* Call specific styles */
        .call-row.positive { background: #f0fdf4; }
        .call-row.negative { background: #fef2f2; }
        .call-row.neutral { background: #f9fafb; }

        .sentiment-badge {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 6px 12px;
            border-radius: 999px;
            font-size: 13px;
            font-weight: 600;
        }

        .sentiment-badge.positive { background: #d1fae5; color: #065f46; }
        .sentiment-badge.negative { background: #fee2e2; color: #991b1b; }
        .sentiment-badge.neutral { background: #f3f4f6; color: #374151; }

        /* Audio Player */
        .audio-player {
            background: #f9fafb;
            border-radius: 12px;
            padding: 20px;
            margin-top: 20px;
        }

        .audio-controls {
            display: flex;
            align-items: center;
            gap: 16px;
            margin-bottom: 16px;
        }

        .play-button {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: #3b82f6;
            color: white;
            border: none;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }

        .play-button:hover {
            background: #2563eb;
            transform: scale(1.05);
        }

        .audio-progress {
            flex: 1;
            height: 6px;
            background: #e5e7eb;
            border-radius: 3px;
            cursor: pointer;
            position: relative;
        }

        .audio-progress-bar {
            height: 100%;
            background: #3b82f6;
            border-radius: 3px;
            transition: width 0.1s;
        }

        .audio-time {
            font-size: 14px;
            color: #6b7280;
        }

        /* Transcript Viewer */
        .transcript-viewer {
            background: #f9fafb;
            border-radius: 12px;
            padding: 20px;
            margin-top: 20px;
            max-height: 400px;
            overflow-y: auto;
        }

        .transcript-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 16px;
        }

        .transcript-content {
            font-size: 14px;
            line-height: 1.8;
            color: #374151;
        }

        .transcript-speaker {
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 4px;
        }

        .transcript-text {
            margin-bottom: 16px;
        }

        /* Filter Bar */
        .filter-bar {
            display: flex;
            align-items: center;
            gap: 16px;
            padding: 16px;
            background: #f9fafb;
            border-radius: 8px;
            margin-bottom: 24px;
        }

        .filter-group {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .filter-select {
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 14px;
            background: white;
            cursor: pointer;
        }

        /* Timeline */
        .timeline {
            position: relative;
            padding-left: 32px;
        }

        .timeline::before {
            content: '';
            position: absolute;
            left: 8px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: #e5e7eb;
        }

        .timeline-item {
            position: relative;
            padding-bottom: 24px;
        }

        .timeline-marker {
            position: absolute;
            left: -24px;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: white;
            border: 2px solid #3b82f6;
        }

        .timeline-content {
            background: white;
            padding: 16px;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .timeline-date {
            font-size: 12px;
            color: #6b7280;
            margin-bottom: 4px;
        }

        .timeline-title {
            font-weight: 600;
            margin-bottom: 4px;
        }

        .timeline-description {
            font-size: 14px;
            color: #4b5563;
        }

        /* Checkbox */
        .checkbox-wrapper {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .checkbox {
            width: 20px;
            height: 20px;
            border: 2px solid #d1d5db;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }

        .checkbox.checked {
            background: #3b82f6;
            border-color: #3b82f6;
        }

        .checkbox.checked svg {
            color: white;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
        }

        .empty-state-icon {
            width: 80px;
            height: 80px;
            margin: 0 auto 20px;
            color: #9ca3af;
        }

        .empty-state-title {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 8px;
            color: #374151;
        }

        .empty-state-text {
            color: #6b7280;
            margin-bottom: 24px;
        }

        /* Toast Notifications */
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
        }

        .toast {
            background: white;
            padding: 16px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            margin-bottom: 12px;
            display: flex;
            align-items: center;
            gap: 12px;
            animation: slideInRight 0.3s ease;
        }

        .toast.success { border-left: 4px solid #10b981; }
        .toast.error { border-left: 4px solid #ef4444; }
        .toast.warning { border-left: 4px solid #f59e0b; }
        .toast.info { border-left: 4px solid #3b82f6; }

        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        /* Wizard Styles */
        .wizard-container {
            max-width: 800px;
            margin: 0 auto;
        }

        .wizard-steps {
            display: flex;
            justify-content: space-between;
            margin-bottom: 40px;
            padding: 0 20px;
        }

        .wizard-step {
            flex: 1;
            text-align: center;
            position: relative;
        }

        .wizard-step:not(:last-child)::after {
            content: '';
            position: absolute;
            top: 20px;
            left: 50%;
            width: 100%;
            height: 2px;
            background: #e5e7eb;
        }

        .wizard-step.completed:not(:last-child)::after {
            background: #10b981;
        }

        .wizard-step-number {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #e5e7eb;
            color: #6b7280;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 8px;
            font-weight: 600;
            position: relative;
            z-index: 1;
        }

        .wizard-step.active .wizard-step-number {
            background: #3b82f6;
            color: white;
        }

        .wizard-step.completed .wizard-step-number {
            background: #10b981;
            color: white;
        }

        .wizard-step-title {
            font-size: 14px;
            color: #6b7280;
        }

        .wizard-step.active .wizard-step-title {
            color: #1f2937;
            font-weight: 600;
        }

        .wizard-content {
            min-height: 400px;
        }

        .wizard-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #e5e7eb;
        }

        /* Time Picker Styles */
        .time-picker {
            display: flex;
            gap: 8px;
            align-items: center;
        }

        .time-input {
            width: 60px;
            text-align: center;
        }

        .working-hours-grid {
            display: grid;
            gap: 16px;
        }

        .working-hours-day {
            display: grid;
            grid-template-columns: 100px 1fr auto;
            gap: 16px;
            align-items: center;
            padding: 12px;
            background: #f9fafb;
            border-radius: 8px;
        }

        .working-hours-times {
            display: flex;
            gap: 16px;
            align-items: center;
        }

        /* Detail View Styles */
        .detail-section {
            margin-bottom: 32px;
        }

        .detail-section-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 16px;
            padding-bottom: 8px;
            border-bottom: 2px solid #e5e7eb;
        }

        .detail-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .detail-label {
            font-size: 13px;
            color: #6b7280;
            font-weight: 500;
        }

        .detail-value {
            font-size: 15px;
            color: #1f2937;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                position: fixed;
                left: -280px;
                z-index: 999;
                transition: left 0.3s ease;
            }

            .sidebar.open {
                left: 0;
            }

            .main-content {
                margin-left: 0;
            }

            .search-box {
                width: 100%;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }

            .filter-bar {
                flex-wrap: wrap;
            }

            .table-container {
                overflow-x: auto;
            }
        }

        /* Tag Input Styles */
        .tag-input-container {
            width: 100%;
        }

        .tag-input-wrapper {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            padding: 8px;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            min-height: 42px;
        }

        .tags-list {
            display: flex;
            flex-wrap: wrap;
            gap: 6px;
        }

        .tag {
            display: inline-flex;
            align-items: center;
            gap: 4px;
            padding: 4px 8px;
            background: #e0f2fe;
            color: #0369a1;
            border-radius: 4px;
            font-size: 13px;
        }

        .tag-remove {
            background: none;
            border: none;
            color: #0369a1;
            cursor: pointer;
            font-size: 16px;
            line-height: 1;
            padding: 0;
            margin-left: 4px;
        }

        .tag-input {
            flex: 1;
            min-width: 120px;
            border: none;
            outline: none;
            font-size: 14px;
        }

        .tag-suggestions {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            max-height: 200px;
            overflow-y: auto;
            z-index: 10;
            margin-top: 4px;
        }

        .tag-suggestion {
            display: block;
            width: 100%;
            padding: 8px 12px;
            text-align: left;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.2s;
        }

        .tag-suggestion:hover {
            background: #f3f4f6;
        }

        /* Pagination Styles */
        .pagination {
            display: flex;
            align-items: center;
            gap: 4px;
            padding: 20px;
            justify-content: center;
        }

        .pagination-btn {
            padding: 6px 12px;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            color: #6b7280;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 32px;
            height: 32px;
        }

        .pagination-btn:hover:not(:disabled) {
            background: #f3f4f6;
            border-color: #d1d5db;
        }

        .pagination-btn.active {
            background: #3b82f6;
            color: white;
            border-color: #3b82f6;
        }

        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .pagination-dots {
            padding: 0 8px;
            color: #9ca3af;
        }

        /* Timeline Styles */
        .timeline {
            position: relative;
            padding-left: 30px;
        }

        .timeline::before {
            content: '';
            position: absolute;
            left: 8px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: #e5e7eb;
        }

        .timeline-item {
            position: relative;
            margin-bottom: 24px;
        }

        .timeline-marker {
            position: absolute;
            left: -26px;
            top: 4px;
            width: 12px;
            height: 12px;
            background: #3b82f6;
            border: 2px solid white;
            border-radius: 50%;
            box-shadow: 0 0 0 2px #e5e7eb;
        }

        .timeline-content {
            background: #f9fafb;
            padding: 16px;
            border-radius: 8px;
        }

        .timeline-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .timeline-type {
            font-weight: 600;
            color: #1f2937;
        }

        .timeline-date {
            font-size: 13px;
            color: #6b7280;
        }

        .timeline-body {
            font-size: 14px;
            color: #4b5563;
        }

        /* Time Slots Grid */
        .time-slots-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
            gap: 8px;
            margin-top: 8px;
        }

        .time-slot {
            padding: 8px 12px;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 6px;
            cursor: pointer;
            text-align: center;
            font-size: 14px;
            transition: all 0.2s;
        }

        .time-slot:hover {
            background: #f3f4f6;
            border-color: #d1d5db;
        }

        .time-slot.selected {
            background: #3b82f6;
            color: white;
            border-color: #3b82f6;
        }

        /* Radio Card Styles */
        .radio-card {
            display: flex;
            align-items: start;
            padding: 16px;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .radio-card:hover {
            background: #f9fafb;
            border-color: #d1d5db;
        }

        .radio-card input[type="radio"] {
            margin-top: 2px;
        }

        .radio-card input[type="radio"]:checked + div {
            color: #3b82f6;
        }

        /* Filter Input Styles */
        .filter-input {
            padding: 8px 12px;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            font-size: 14px;
            min-width: 150px;
        }

        /* Grid Utilities */
        .grid {
            display: grid;
        }

        .grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
        .grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
        .grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
        .grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
        .grid-cols-7 { grid-template-columns: repeat(7, minmax(0, 1fr)); }

        @media (min-width: 768px) {
            .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
            .md\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
            .md\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
        }

        @media (min-width: 1024px) {
            .lg\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
            .lg\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
        }

        .gap-1 { gap: 0.25rem; }
        .gap-2 { gap: 0.5rem; }
        .gap-3 { gap: 0.75rem; }
        .gap-4 { gap: 1rem; }
        .gap-6 { gap: 1.5rem; }

        /* Spacing Utilities */
        .mt-1 { margin-top: 0.25rem; }
        .mt-2 { margin-top: 0.5rem; }
        .mt-3 { margin-top: 0.75rem; }
        .mt-4 { margin-top: 1rem; }
        .mt-6 { margin-top: 1.5rem; }
        .mb-1 { margin-bottom: 0.25rem; }
        .mb-2 { margin-bottom: 0.5rem; }
        .mb-3 { margin-bottom: 0.75rem; }
        .mb-4 { margin-bottom: 1rem; }
        .mb-6 { margin-bottom: 1.5rem; }
        .ml-1 { margin-left: 0.25rem; }
        .ml-3 { margin-left: 0.75rem; }
        .mr-2 { margin-right: 0.5rem; }
        .my-1 { margin-top: 0.25rem; margin-bottom: 0.25rem; }

        .pt-6 { padding-top: 1.5rem; }
        .py-1 { padding-top: 0.25rem; padding-bottom: 0.25rem; }
        .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
        .py-3 { padding-top: 0.75rem; padding-bottom: 0.75rem; }
        .py-8 { padding-top: 2rem; padding-bottom: 2rem; }
        .px-2 { padding-left: 0.5rem; padding-right: 0.5rem; }
        .px-2\.5 { padding-left: 0.625rem; padding-right: 0.625rem; }
        .px-3 { padding-left: 0.75rem; padding-right: 0.75rem; }
        .px-4 { padding-left: 1rem; padding-right: 1rem; }
        .p-1 { padding: 0.25rem; }
        .p-2 { padding: 0.5rem; }
        .p-3 { padding: 0.75rem; }

        /* Display Utilities */
        .block { display: block; }
        .inline-flex { display: inline-flex; }
        .flex { display: flex; }
        .hidden { display: none; }
        .group:hover .group-hover\:block { display: block; }

        /* Position Utilities */
        .relative { position: relative; }
        .absolute { position: absolute; }
        .right-0 { right: 0; }
        .z-10 { z-index: 10; }

        /* Flexbox Utilities */
        .flex-1 { flex: 1 1 0%; }
        .flex-shrink-0 { flex-shrink: 0; }
        .items-center { align-items: center; }
        .items-start { align-items: flex-start; }
        .justify-center { justify-content: center; }
        .justify-between { justify-content: space-between; }
        .justify-end { justify-content: flex-end; }
        .flex-wrap { flex-wrap: wrap; }
        .flex-col { flex-direction: column; }

        /* Border Utilities */
        .border { border-width: 1px; }
        .border-b { border-bottom-width: 1px; }
        .border-t { border-top-width: 1px; }
        .border-r { border-right-width: 1px; }
        .border-gray-200 { border-color: #e5e7eb; }
        .border-blue-200 { border-color: #bfdbfe; }
        .rounded { border-radius: 0.25rem; }
        .rounded-lg { border-radius: 0.5rem; }
        .rounded-full { border-radius: 9999px; }

        /* Background Utilities */
        .bg-gray-50 { background-color: #f9fafb; }
        .bg-gray-100 { background-color: #f3f4f6; }
        .bg-gray-200 { background-color: #e5e7eb; }
        .bg-blue-50 { background-color: #eff6ff; }
        .bg-blue-100 { background-color: #dbeafe; }
        .bg-green-100 { background-color: #d1fae5; }
        .bg-red-50 { background-color: #fef2f2; }
        .bg-red-100 { background-color: #fee2e2; }
        .bg-yellow-50 { background-color: #fffbeb; }
        .bg-yellow-100 { background-color: #fef3c7; }
        .bg-white { background-color: white; }
        .bg-primary-600 { background-color: #2563eb; }

        /* Text Utilities */
        .text-xs { font-size: 0.75rem; line-height: 1rem; }
        .text-sm { font-size: 0.875rem; line-height: 1.25rem; }
        .text-lg { font-size: 1.125rem; line-height: 1.75rem; }
        .font-medium { font-weight: 500; }
        .font-semibold { font-weight: 600; }
        .text-gray-500 { color: #6b7280; }
        .text-gray-600 { color: #4b5563; }
        .text-gray-700 { color: #374151; }
        .text-gray-800 { color: #1f2937; }
        .text-gray-900 { color: #111827; }
        .text-blue-600 { color: #2563eb; }
        .text-blue-800 { color: #1e40af; }
        .text-green-600 { color: #059669; }
        .text-green-800 { color: #065f46; }
        .text-red-600 { color: #dc2626; }
        .text-red-800 { color: #991b1b; }
        .text-yellow-600 { color: #d97706; }
        .text-yellow-800 { color: #92400e; }
        .text-white { color: white; }
        .text-left { text-align: left; }
        .text-center { text-align: center; }
        .text-right { text-align: right; }
        .uppercase { text-transform: uppercase; }
        .truncate { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
        .whitespace-pre-wrap { white-space: pre-wrap; }
        .tracking-wider { letter-spacing: 0.05em; }

        /* Size Utilities */
        .w-4 { width: 1rem; }
        .h-4 { height: 1rem; }
        .w-5 { width: 1.25rem; }
        .h-5 { height: 1.25rem; }
        .h-8 { height: 2rem; }
        .w-8 { width: 2rem; }
        .w-48 { width: 12rem; }
        .w-full { width: 100%; }
        .min-h-\[100px\] { min-height: 100px; }
        .max-w-\[600px\] { max-width: 600px; }
        .max-w-\[700px\] { max-width: 700px; }
        .max-w-\[900px\] { max-width: 900px; }
        .max-h-\[90vh\] { max-height: 90vh; }

        /* Effects */
        .shadow { box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06); }
        .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); }
        .transition-colors { transition-property: background-color, border-color, color, fill, stroke; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }
        .hover\:bg-gray-50:hover { background-color: #f9fafb; }
        .hover\:bg-gray-100:hover { background-color: #f3f4f6; }
        .hover\:bg-gray-200:hover { background-color: #e5e7eb; }
        .hover\:text-gray-900:hover { color: #111827; }
        .hover\:opacity-80:hover { opacity: 0.8; }

        /* Overflow */
        .overflow-hidden { overflow: hidden; }
        .overflow-y-auto { overflow-y: auto; }
        .overflow-x-auto { overflow-x: auto; }
        .overflow-auto { overflow: auto; }

        /* Other */
        .cursor-pointer { cursor: pointer; }
        .space-y-1 > * + * { margin-top: 0.25rem; }
        .space-y-2 > * + * { margin-top: 0.5rem; }
        .space-y-3 > * + * { margin-top: 0.75rem; }
        .space-y-4 > * + * { margin-top: 1rem; }
        .divide-y > * + * { border-top-width: 1px; border-color: #e5e7eb; }
        .whitespace-pre-wrap { white-space: pre-wrap; }
        .col-span-2 { grid-column: span 2 / span 2; }

        /* Custom */
        dl { display: block; }
        dt { font-weight: 500; }
        dd { margin-left: 0; }
        .group { position: relative; }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, useRef, useCallback, useMemo } = React;

        // Lucide React Icons Component
        const Icon = ({ name, size = 20, color = 'currentColor', className = '' }) => {
            useEffect(() => {
                lucide.createIcons();
            }, []);

            return (
                <i 
                    data-lucide={name} 
                    className={className}
                    style={{ width: size, height: size, color: color }}
                ></i>
            );
        };

        // API Client
        const apiCall = async (endpoint, options = {}) => {
            const token = localStorage.getItem('admin_token');
            const url = `/admin-api${endpoint}`;
            
            console.log('API Call:', url, 'Token:', token ? 'Present' : 'Missing');
            
            const response = await fetch(url, {
                ...options,
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Authorization': token ? `Bearer ${token}` : '',
                    ...options.headers
                }
            });

            if (response.status === 401) {
                localStorage.removeItem('admin_token');
                window.location.href = '/admin-react-login';
                return;
            }

            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.message || 'API Error');
            }

            return data;
        };

        // Toast Notification System
        const ToastContext = React.createContext();

        const ToastProvider = ({ children }) => {
            const [toasts, setToasts] = useState([]);

            const showToast = useCallback((message, type = 'info') => {
                const id = Date.now();
                setToasts(prev => [...prev, { id, message, type }]);

                setTimeout(() => {
                    setToasts(prev => prev.filter(toast => toast.id !== id));
                }, 3000);
            }, []);

            return (
                <ToastContext.Provider value={{ showToast }}>
                    {children}
                    <div className="toast-container">
                        {toasts.map(toast => (
                            <div key={toast.id} className={`toast ${toast.type}`}>
                                <Icon name={
                                    toast.type === 'success' ? 'check-circle' :
                                    toast.type === 'error' ? 'x-circle' :
                                    toast.type === 'warning' ? 'alert-circle' :
                                    'info'
                                } size={20} />
                                <span>{toast.message}</span>
                            </div>
                        ))}
                    </div>
                </ToastContext.Provider>
            );
        };

        const useToast = () => React.useContext(ToastContext);

        // Tag Input Component
        const TagInput = ({ value = [], onChange, suggestions = [], placeholder = "Tags hinzufügen..." }) => {
            const [inputValue, setInputValue] = useState('');
            const [showSuggestions, setShowSuggestions] = useState(false);

            const handleKeyDown = (e) => {
                if (e.key === 'Enter' && inputValue.trim()) {
                    e.preventDefault();
                    if (!value.includes(inputValue.trim())) {
                        onChange([...value, inputValue.trim()]);
                    }
                    setInputValue('');
                    setShowSuggestions(false);
                }
            };

            const removeTag = (tagToRemove) => {
                onChange(value.filter(tag => tag !== tagToRemove));
            };

            const filteredSuggestions = suggestions.filter(
                s => s.toLowerCase().includes(inputValue.toLowerCase()) && !value.includes(s)
            );

            return (
                <div className="tag-input-container">
                    <div className="tag-input-wrapper">
                        <div className="tags-list">
                            {value.map(tag => (
                                <span key={tag} className="tag">
                                    {tag}
                                    <button
                                        type="button"
                                        onClick={() => removeTag(tag)}
                                        className="tag-remove"
                                    >
                                        ×
                                    </button>
                                </span>
                            ))}
                        </div>
                        <div className="relative">
                            <input
                                type="text"
                                value={inputValue}
                                onChange={(e) => {
                                    setInputValue(e.target.value);
                                    setShowSuggestions(e.target.value.length > 0);
                                }}
                                onKeyDown={handleKeyDown}
                                onFocus={() => setShowSuggestions(inputValue.length > 0)}
                                onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}
                                placeholder={value.length === 0 ? placeholder : ''}
                                className="tag-input"
                            />
                            {showSuggestions && filteredSuggestions.length > 0 && (
                                <div className="tag-suggestions">
                                    {filteredSuggestions.map(suggestion => (
                                        <button
                                            key={suggestion}
                                            type="button"
                                            className="tag-suggestion"
                                            onMouseDown={(e) => {
                                                e.preventDefault();
                                                onChange([...value, suggestion]);
                                                setInputValue('');
                                                setShowSuggestions(false);
                                            }}
                                        >
                                            {suggestion}
                                        </button>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            );
        };

        // Pagination Component
        const Pagination = ({ currentPage, totalPages, onPageChange }) => {
            const pages = [];
            const maxVisible = 5;
            
            let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
            let endPage = Math.min(totalPages, startPage + maxVisible - 1);
            
            if (endPage - startPage + 1 < maxVisible) {
                startPage = Math.max(1, endPage - maxVisible + 1);
            }

            return (
                <div className="pagination">
                    <button
                        className="pagination-btn"
                        onClick={() => onPageChange(currentPage - 1)}
                        disabled={currentPage === 1}
                    >
                        <Icon name="chevron-left" size={16} />
                    </button>
                    
                    {startPage > 1 && (
                        <>
                            <button className="pagination-btn" onClick={() => onPageChange(1)}>1</button>
                            {startPage > 2 && <span className="pagination-dots">...</span>}
                        </>
                    )}
                    
                    {Array.from({ length: endPage - startPage + 1 }, (_, i) => startPage + i).map(page => (
                        <button
                            key={page}
                            className={`pagination-btn ${currentPage === page ? 'active' : ''}`}
                            onClick={() => onPageChange(page)}
                        >
                            {page}
                        </button>
                    ))}
                    
                    {endPage < totalPages && (
                        <>
                            {endPage < totalPages - 1 && <span className="pagination-dots">...</span>}
                            <button className="pagination-btn" onClick={() => onPageChange(totalPages)}>
                                {totalPages}
                            </button>
                        </>
                    )}
                    
                    <button
                        className="pagination-btn"
                        onClick={() => onPageChange(currentPage + 1)}
                        disabled={currentPage === totalPages}
                    >
                        <Icon name="chevron-right" size={16} />
                    </button>
                </div>
            );
        };

        // Customer Form Modal Component
        const CustomerFormModal = ({ title, customer, companies, availableTags, onSubmit, onClose }) => {
            const [formData, setFormData] = useState({
                first_name: customer?.first_name || '',
                last_name: customer?.last_name || '',
                email: customer?.email || '',
                phone: customer?.phone || '',
                company_id: customer?.company_id || '',
                branch_id: customer?.branch_id || '',
                address: customer?.address || '',
                city: customer?.city || '',
                postal_code: customer?.postal_code || '',
                country: customer?.country || 'Deutschland',
                tags: customer?.tags || [],
                notes: customer?.notes || '',
                portal_enabled: customer?.portal_enabled || false,
                is_vip: customer?.is_vip || false,
                marketing_consent: customer?.marketing_consent || false,
                preferred_contact_method: customer?.preferred_contact_method || 'email',
                language: customer?.language || 'de'
            });
            const [branches, setBranches] = useState([]);
            const [loading, setLoading] = useState(false);
            const [generatingPassword, setGeneratingPassword] = useState(false);

            useEffect(() => {
                if (formData.company_id) {
                    loadBranches(formData.company_id);
                }
            }, [formData.company_id]);

            const loadBranches = async (companyId) => {
                try {
                    const response = await apiCall(`/companies/${companyId}/branches`);
                    setBranches(response.data || []);
                } catch (error) {
                    console.error('Error loading branches:', error);
                }
            };

            const handleSubmit = async (e) => {
                e.preventDefault();
                setLoading(true);
                try {
                    await onSubmit(formData);
                } finally {
                    setLoading(false);
                }
            };

            const generatePassword = async () => {
                setGeneratingPassword(true);
                try {
                    const response = await apiCall('/customers/generate-password', {
                        method: 'POST'
                    });
                    setFormData({...formData, generated_password: response.password});
                } catch (error) {
                    console.error('Error generating password:', error);
                } finally {
                    setGeneratingPassword(false);
                }
            };

            return (
                <div className="modal">
                    <div className="modal-content" style={{ maxWidth: '800px' }}>
                        <div className="modal-header">
                            <h2 className="modal-title">{title}</h2>
                            <button className="btn-close" onClick={onClose}>×</button>
                        </div>
                        <form onSubmit={handleSubmit}>
                            <div className="modal-body">
                                <div className="form-section">
                                    <h3 className="form-section-title">Persönliche Informationen</h3>
                                    <div className="grid grid-cols-2 gap-4">
                                        <div className="form-group">
                                            <label className="form-label">Vorname *</label>
                                            <input
                                                type="text"
                                                className="form-input"
                                                value={formData.first_name}
                                                onChange={(e) => setFormData({...formData, first_name: e.target.value})}
                                                required
                                            />
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">Nachname *</label>
                                            <input
                                                type="text"
                                                className="form-input"
                                                value={formData.last_name}
                                                onChange={(e) => setFormData({...formData, last_name: e.target.value})}
                                                required
                                            />
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">E-Mail</label>
                                            <input
                                                type="email"
                                                className="form-input"
                                                value={formData.email}
                                                onChange={(e) => setFormData({...formData, email: e.target.value})}
                                            />
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">Telefon *</label>
                                            <input
                                                type="tel"
                                                className="form-input"
                                                value={formData.phone}
                                                onChange={(e) => setFormData({...formData, phone: e.target.value})}
                                                required
                                            />
                                        </div>
                                    </div>
                                </div>

                                <div className="form-section">
                                    <h3 className="form-section-title">Adresse</h3>
                                    <div className="grid grid-cols-2 gap-4">
                                        <div className="form-group col-span-2">
                                            <label className="form-label">Straße und Hausnummer</label>
                                            <input
                                                type="text"
                                                className="form-input"
                                                value={formData.address}
                                                onChange={(e) => setFormData({...formData, address: e.target.value})}
                                            />
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">PLZ</label>
                                            <input
                                                type="text"
                                                className="form-input"
                                                value={formData.postal_code}
                                                onChange={(e) => setFormData({...formData, postal_code: e.target.value})}
                                            />
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">Stadt</label>
                                            <input
                                                type="text"
                                                className="form-input"
                                                value={formData.city}
                                                onChange={(e) => setFormData({...formData, city: e.target.value})}
                                            />
                                        </div>
                                    </div>
                                </div>

                                <div className="form-section">
                                    <h3 className="form-section-title">Zuordnung</h3>
                                    <div className="grid grid-cols-2 gap-4">
                                        <div className="form-group">
                                            <label className="form-label">Unternehmen</label>
                                            <select
                                                className="form-input"
                                                value={formData.company_id}
                                                onChange={(e) => setFormData({...formData, company_id: e.target.value, branch_id: ''})}
                                            >
                                                <option value="">Bitte wählen</option>
                                                {companies.map(company => (
                                                    <option key={company.id} value={company.id}>
                                                        {company.name}
                                                    </option>
                                                ))}
                                            </select>
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">Filiale</label>
                                            <select
                                                className="form-input"
                                                value={formData.branch_id}
                                                onChange={(e) => setFormData({...formData, branch_id: e.target.value})}
                                                disabled={!formData.company_id}
                                            >
                                                <option value="">Bitte wählen</option>
                                                {branches.map(branch => (
                                                    <option key={branch.id} value={branch.id}>
                                                        {branch.name}
                                                    </option>
                                                ))}
                                            </select>
                                        </div>
                                    </div>
                                </div>

                                <div className="form-section">
                                    <h3 className="form-section-title">Kategorisierung</h3>
                                    <div className="form-group">
                                        <label className="form-label">Tags</label>
                                        <TagInput
                                            value={formData.tags}
                                            onChange={(tags) => setFormData({...formData, tags})}
                                            suggestions={availableTags}
                                        />
                                    </div>
                                    <div className="form-group">
                                        <label className="checkbox-label">
                                            <input
                                                type="checkbox"
                                                checked={formData.is_vip}
                                                onChange={(e) => setFormData({...formData, is_vip: e.target.checked})}
                                            />
                                            <span>VIP Kunde</span>
                                        </label>
                                    </div>
                                </div>

                                <div className="form-section">
                                    <h3 className="form-section-title">Kommunikation</h3>
                                    <div className="grid grid-cols-2 gap-4">
                                        <div className="form-group">
                                            <label className="form-label">Bevorzugte Kontaktmethode</label>
                                            <select
                                                className="form-input"
                                                value={formData.preferred_contact_method}
                                                onChange={(e) => setFormData({...formData, preferred_contact_method: e.target.value})}
                                            >
                                                <option value="email">E-Mail</option>
                                                <option value="phone">Telefon</option>
                                                <option value="sms">SMS</option>
                                                <option value="whatsapp">WhatsApp</option>
                                            </select>
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">Sprache</label>
                                            <select
                                                className="form-input"
                                                value={formData.language}
                                                onChange={(e) => setFormData({...formData, language: e.target.value})}
                                            >
                                                <option value="de">Deutsch</option>
                                                <option value="en">Englisch</option>
                                                <option value="fr">Französisch</option>
                                                <option value="es">Spanisch</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div className="form-group">
                                        <label className="checkbox-label">
                                            <input
                                                type="checkbox"
                                                checked={formData.marketing_consent}
                                                onChange={(e) => setFormData({...formData, marketing_consent: e.target.checked})}
                                            />
                                            <span>Marketing-Kommunikation erlaubt</span>
                                        </label>
                                    </div>
                                </div>

                                <div className="form-section">
                                    <h3 className="form-section-title">Portal-Zugang</h3>
                                    <div className="form-group">
                                        <label className="checkbox-label">
                                            <input
                                                type="checkbox"
                                                checked={formData.portal_enabled}
                                                onChange={(e) => setFormData({...formData, portal_enabled: e.target.checked})}
                                            />
                                            <span>Portal-Zugang aktivieren</span>
                                        </label>
                                    </div>
                                    {formData.portal_enabled && (
                                        <div className="mt-3">
                                            <button
                                                type="button"
                                                className="btn btn-secondary"
                                                onClick={generatePassword}
                                                disabled={generatingPassword}
                                            >
                                                {generatingPassword ? 'Generiere...' : 'Passwort generieren'}
                                            </button>
                                            {formData.generated_password && (
                                                <div className="mt-2 p-3 bg-blue-50 rounded">
                                                    <p className="text-sm">Generiertes Passwort: <strong>{formData.generated_password}</strong></p>
                                                    <p className="text-xs text-gray-600 mt-1">Bitte notieren Sie dieses Passwort, es wird nur einmal angezeigt.</p>
                                                </div>
                                            )}
                                        </div>
                                    )}
                                </div>

                                <div className="form-section">
                                    <h3 className="form-section-title">Notizen</h3>
                                    <div className="form-group">
                                        <textarea
                                            className="form-input"
                                            rows="4"
                                            value={formData.notes}
                                            onChange={(e) => setFormData({...formData, notes: e.target.value})}
                                            placeholder="Interne Notizen zum Kunden..."
                                        />
                                    </div>
                                </div>
                            </div>
                            <div className="modal-footer">
                                <button type="button" className="btn btn-secondary" onClick={onClose}>
                                    Abbrechen
                                </button>
                                <button type="submit" className="btn btn-primary" disabled={loading}>
                                    {loading ? 'Speichert...' : (customer ? 'Aktualisieren' : 'Erstellen')}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            );
        };

        // Customer Detail Modal Component
        const CustomerDetailModal = ({ customer, onClose, onEdit, onQuickBooking, onSendEmail }) => {
            const [activeTab, setActiveTab] = useState('overview');
            const [timeline, setTimeline] = useState([]);
            const [appointments, setAppointments] = useState([]);
            const [calls, setCalls] = useState([]);
            const [loading, setLoading] = useState(true);

            useEffect(() => {
                loadCustomerDetails();
            }, [customer.id]);

            const loadCustomerDetails = async () => {
                setLoading(true);
                try {
                    const [timelineResponse, appointmentsResponse, callsResponse] = await Promise.all([
                        apiCall(`/customers/${customer.id}/timeline`),
                        apiCall(`/customers/${customer.id}/appointments`),
                        apiCall(`/customers/${customer.id}/calls`)
                    ]);
                    setTimeline(timelineResponse.data || []);
                    setAppointments(appointmentsResponse.data || []);
                    setCalls(callsResponse.data || []);
                } catch (error) {
                    console.error('Error loading customer details:', error);
                } finally {
                    setLoading(false);
                }
            };

            const renderTimeline = () => {
                return (
                    <div className="timeline">
                        {timeline.map((event, index) => (
                            <div key={index} className="timeline-item">
                                <div className="timeline-marker"></div>
                                <div className="timeline-content">
                                    <div className="timeline-header">
                                        <span className="timeline-type">{event.type}</span>
                                        <span className="timeline-date">
                                            {new Date(event.created_at).toLocaleString('de-DE')}
                                        </span>
                                    </div>
                                    <div className="timeline-body">
                                        {event.description}
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                );
            };

            return (
                <div className="modal">
                    <div className="modal-content" style={{ maxWidth: '900px' }}>
                        <div className="modal-header">
                            <h2 className="modal-title">
                                {customer.first_name} {customer.last_name}
                                {customer.is_vip && <span className="badge badge-warning ml-3">VIP</span>}
                            </h2>
                            <button className="btn-close" onClick={onClose}>×</button>
                        </div>
                        
                        <div className="modal-body">
                            <div className="tabs">
                                <button
                                    className={`tab ${activeTab === 'overview' ? 'active' : ''}`}
                                    onClick={() => setActiveTab('overview')}
                                >
                                    Übersicht
                                </button>
                                <button
                                    className={`tab ${activeTab === 'timeline' ? 'active' : ''}`}
                                    onClick={() => setActiveTab('timeline')}
                                >
                                    Timeline
                                </button>
                                <button
                                    className={`tab ${activeTab === 'appointments' ? 'active' : ''}`}
                                    onClick={() => setActiveTab('appointments')}
                                >
                                    Termine ({appointments.length})
                                </button>
                                <button
                                    className={`tab ${activeTab === 'calls' ? 'active' : ''}`}
                                    onClick={() => setActiveTab('calls')}
                                >
                                    Anrufe ({calls.length})
                                </button>
                            </div>

                            <div className="tab-content">
                                {loading ? (
                                    <div className="text-center py-8">
                                        <div className="loading-spinner"></div>
                                    </div>
                                ) : (
                                    <>
                                        {activeTab === 'overview' && (
                                            <div>
                                                <div className="detail-section">
                                                    <h3 className="detail-section-title">Kontaktinformationen</h3>
                                                    <div className="detail-grid">
                                                        <div className="detail-item">
                                                            <div className="detail-label">E-Mail</div>
                                                            <div className="detail-value">{customer.email || '-'}</div>
                                                        </div>
                                                        <div className="detail-item">
                                                            <div className="detail-label">Telefon</div>
                                                            <div className="detail-value">{customer.phone || '-'}</div>
                                                        </div>
                                                        <div className="detail-item">
                                                            <div className="detail-label">Adresse</div>
                                                            <div className="detail-value">
                                                                {customer.address || '-'}<br />
                                                                {customer.postal_code} {customer.city}
                                                            </div>
                                                        </div>
                                                        <div className="detail-item">
                                                            <div className="detail-label">Bevorzugte Kontaktmethode</div>
                                                            <div className="detail-value">{customer.preferred_contact_method || 'E-Mail'}</div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div className="detail-section">
                                                    <h3 className="detail-section-title">Statistiken</h3>
                                                    <div className="detail-grid">
                                                        <div className="detail-item">
                                                            <div className="detail-label">Termine gesamt</div>
                                                            <div className="detail-value">{customer.appointments_count || 0}</div>
                                                        </div>
                                                        <div className="detail-item">
                                                            <div className="detail-label">No-Shows</div>
                                                            <div className="detail-value">{customer.no_show_count || 0}</div>
                                                        </div>
                                                        <div className="detail-item">
                                                            <div className="detail-label">Letzter Termin</div>
                                                            <div className="detail-value">
                                                                {customer.last_appointment_at ? 
                                                                    new Date(customer.last_appointment_at).toLocaleDateString('de-DE') : 
                                                                    '-'
                                                                }
                                                            </div>
                                                        </div>
                                                        <div className="detail-item">
                                                            <div className="detail-label">Kunde seit</div>
                                                            <div className="detail-value">
                                                                {new Date(customer.created_at).toLocaleDateString('de-DE')}
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                {customer.tags?.length > 0 && (
                                                    <div className="detail-section">
                                                        <h3 className="detail-section-title">Tags</h3>
                                                        <div className="flex flex-wrap gap-2">
                                                            {customer.tags.map(tag => (
                                                                <span key={tag} className="badge badge-info">
                                                                    {tag}
                                                                </span>
                                                            ))}
                                                        </div>
                                                    </div>
                                                )}

                                                {customer.notes && (
                                                    <div className="detail-section">
                                                        <h3 className="detail-section-title">Notizen</h3>
                                                        <p className="whitespace-pre-wrap">{customer.notes}</p>
                                                    </div>
                                                )}

                                                <div className="flex gap-3 mt-6">
                                                    <button className="btn btn-primary" onClick={onEdit}>
                                                        Bearbeiten
                                                    </button>
                                                    <button className="btn btn-secondary" onClick={onQuickBooking}>
                                                        Schnellbuchung
                                                    </button>
                                                    <button className="btn btn-secondary" onClick={onSendEmail}>
                                                        E-Mail senden
                                                    </button>
                                                </div>
                                            </div>
                                        )}

                                        {activeTab === 'timeline' && renderTimeline()}

                                        {activeTab === 'appointments' && (
                                            <div className="space-y-4">
                                                {appointments.map(appointment => (
                                                    <div key={appointment.id} className="card p-4">
                                                        <div className="flex justify-between items-start">
                                                            <div>
                                                                <h4 className="font-semibold">{appointment.service?.name}</h4>
                                                                <p className="text-sm text-gray-600">
                                                                    {new Date(appointment.start_time).toLocaleString('de-DE')}
                                                                </p>
                                                                <p className="text-sm">
                                                                    Mitarbeiter: {appointment.staff?.name || '-'}
                                                                </p>
                                                            </div>
                                                            <span className={`badge badge-${
                                                                appointment.status === 'completed' ? 'success' :
                                                                appointment.status === 'cancelled' ? 'danger' :
                                                                appointment.status === 'no_show' ? 'warning' :
                                                                'secondary'
                                                            }`}>
                                                                {appointment.status}
                                                            </span>
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>
                                        )}

                                        {activeTab === 'calls' && (
                                            <div className="space-y-4">
                                                {calls.map(call => (
                                                    <div key={call.id} className="card p-4">
                                                        <div className="flex justify-between items-start">
                                                            <div>
                                                                <p className="text-sm text-gray-600">
                                                                    {new Date(call.created_at).toLocaleString('de-DE')}
                                                                </p>
                                                                <p className="text-sm">
                                                                    Dauer: {call.duration_seconds}s
                                                                </p>
                                                                {call.transcript_summary && (
                                                                    <p className="text-sm mt-2">{call.transcript_summary}</p>
                                                                )}
                                                            </div>
                                                            <span className={`badge badge-${
                                                                call.call_successful ? 'success' : 'danger'
                                                            }`}>
                                                                {call.call_successful ? 'Erfolgreich' : 'Fehlgeschlagen'}
                                                            </span>
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>
                                        )}
                                    </>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            );
        };

        // Customer Merge Modal Component
        const CustomerMergeModal = ({ selectedIds, customers, onMerge, onClose }) => {
            const [targetCustomerId, setTargetCustomerId] = useState('');
            const [duplicates, setDuplicates] = useState([]);
            const [loading, setLoading] = useState(false);

            useEffect(() => {
                checkDuplicates();
            }, []);

            const checkDuplicates = async () => {
                try {
                    const response = await apiCall('/customers/check-duplicates', {
                        method: 'POST',
                        body: JSON.stringify({ customer_ids: selectedIds })
                    });
                    setDuplicates(response.duplicates || []);
                } catch (error) {
                    console.error('Error checking duplicates:', error);
                }
            };

            const handleMerge = async () => {
                if (!targetCustomerId) {
                    alert('Bitte wählen Sie einen Zielkunden aus');
                    return;
                }

                setLoading(true);
                try {
                    await onMerge(targetCustomerId, selectedIds.filter(id => id !== targetCustomerId));
                } finally {
                    setLoading(false);
                }
            };

            return (
                <div className="modal">
                    <div className="modal-content" style={{ maxWidth: '600px' }}>
                        <div className="modal-header">
                            <h2 className="modal-title">Kunden zusammenführen</h2>
                            <button className="btn-close" onClick={onClose}>×</button>
                        </div>
                        <div className="modal-body">
                            <p className="mb-4">
                                Wählen Sie den Zielkunden aus. Alle Daten der anderen Kunden werden mit diesem zusammengeführt.
                            </p>

                            {duplicates.length > 0 && (
                                <div className="alert alert-warning mb-4">
                                    <strong>Mögliche Duplikate gefunden!</strong>
                                    <ul className="mt-2">
                                        {duplicates.map((dup, index) => (
                                            <li key={index}>{dup.reason}</li>
                                        ))}
                                    </ul>
                                </div>
                            )}

                            <div className="space-y-3">
                                {customers.map(customer => (
                                    <label key={customer.id} className="radio-card">
                                        <input
                                            type="radio"
                                            name="target_customer"
                                            value={customer.id}
                                            checked={targetCustomerId === customer.id}
                                            onChange={(e) => setTargetCustomerId(e.target.value)}
                                        />
                                        <div className="ml-3">
                                            <div className="font-semibold">
                                                {customer.first_name} {customer.last_name}
                                            </div>
                                            <div className="text-sm text-gray-600">
                                                {customer.email} • {customer.phone}
                                            </div>
                                            <div className="text-sm text-gray-500">
                                                {customer.appointments_count} Termine • 
                                                Kunde seit {new Date(customer.created_at).toLocaleDateString('de-DE')}
                                            </div>
                                        </div>
                                    </label>
                                ))}
                            </div>

                            <div className="alert alert-info mt-4">
                                <strong>Was wird zusammengeführt:</strong>
                                <ul className="mt-2 text-sm">
                                    <li>• Alle Termine werden dem Zielkunden zugeordnet</li>
                                    <li>• Alle Anrufe werden übertragen</li>
                                    <li>• Tags werden kombiniert</li>
                                    <li>• Notizen werden zusammengefügt</li>
                                    <li>• Die neuesten Kontaktdaten werden übernommen</li>
                                </ul>
                            </div>
                        </div>
                        <div className="modal-footer">
                            <button className="btn btn-secondary" onClick={onClose}>
                                Abbrechen
                            </button>
                            <button 
                                className="btn btn-primary" 
                                onClick={handleMerge}
                                disabled={!targetCustomerId || loading}
                            >
                                {loading ? 'Führe zusammen...' : 'Zusammenführen'}
                            </button>
                        </div>
                    </div>
                </div>
            );
        };

        // Quick Booking Modal Component
        const QuickBookingModal = ({ customer, onClose, onSuccess }) => {
            const [services, setServices] = useState([]);
            const [staff, setStaff] = useState([]);
            const [availableSlots, setAvailableSlots] = useState([]);
            const [formData, setFormData] = useState({
                service_id: '',
                staff_id: '',
                date: '',
                time: '',
                notes: ''
            });
            const [loading, setLoading] = useState(false);

            useEffect(() => {
                loadBookingData();
            }, []);

            useEffect(() => {
                if (formData.service_id && formData.staff_id && formData.date) {
                    loadAvailableSlots();
                }
            }, [formData.service_id, formData.staff_id, formData.date]);

            const loadBookingData = async () => {
                try {
                    const [servicesResponse, staffResponse] = await Promise.all([
                        apiCall('/services'),
                        apiCall('/staff')
                    ]);
                    setServices(servicesResponse.data || []);
                    setStaff(staffResponse.data || []);
                } catch (error) {
                    console.error('Error loading booking data:', error);
                }
            };

            const loadAvailableSlots = async () => {
                try {
                    const response = await apiCall('/appointments/available-slots', {
                        method: 'POST',
                        body: JSON.stringify({
                            service_id: formData.service_id,
                            staff_id: formData.staff_id,
                            date: formData.date
                        })
                    });
                    setAvailableSlots(response.slots || []);
                } catch (error) {
                    console.error('Error loading available slots:', error);
                }
            };

            const handleSubmit = async (e) => {
                e.preventDefault();
                setLoading(true);
                try {
                    await apiCall('/appointments', {
                        method: 'POST',
                        body: JSON.stringify({
                            customer_id: customer.id,
                            service_id: formData.service_id,
                            staff_id: formData.staff_id,
                            start_time: `${formData.date} ${formData.time}`,
                            notes: formData.notes
                        })
                    });
                    onSuccess();
                } catch (error) {
                    alert('Fehler beim Buchen des Termins');
                } finally {
                    setLoading(false);
                }
            };

            return (
                <div className="modal">
                    <div className="modal-content" style={{ maxWidth: '500px' }}>
                        <div className="modal-header">
                            <h2 className="modal-title">
                                Schnellbuchung für {customer.first_name} {customer.last_name}
                            </h2>
                            <button className="btn-close" onClick={onClose}>×</button>
                        </div>
                        <form onSubmit={handleSubmit}>
                            <div className="modal-body">
                                <div className="form-group">
                                    <label className="form-label">Service *</label>
                                    <select
                                        className="form-input"
                                        value={formData.service_id}
                                        onChange={(e) => setFormData({...formData, service_id: e.target.value})}
                                        required
                                    >
                                        <option value="">Bitte wählen</option>
                                        {services.map(service => (
                                            <option key={service.id} value={service.id}>
                                                {service.name} ({service.duration_minutes} Min.)
                                            </option>
                                        ))}
                                    </select>
                                </div>

                                <div className="form-group">
                                    <label className="form-label">Mitarbeiter *</label>
                                    <select
                                        className="form-input"
                                        value={formData.staff_id}
                                        onChange={(e) => setFormData({...formData, staff_id: e.target.value})}
                                        required
                                    >
                                        <option value="">Bitte wählen</option>
                                        {staff.map(member => (
                                            <option key={member.id} value={member.id}>
                                                {member.name}
                                            </option>
                                        ))}
                                    </select>
                                </div>

                                <div className="form-group">
                                    <label className="form-label">Datum *</label>
                                    <input
                                        type="date"
                                        className="form-input"
                                        value={formData.date}
                                        onChange={(e) => setFormData({...formData, date: e.target.value, time: ''})}
                                        min={new Date().toISOString().split('T')[0]}
                                        required
                                    />
                                </div>

                                {availableSlots.length > 0 && (
                                    <div className="form-group">
                                        <label className="form-label">Verfügbare Zeiten *</label>
                                        <div className="time-slots-grid">
                                            {availableSlots.map(slot => (
                                                <button
                                                    key={slot}
                                                    type="button"
                                                    className={`time-slot ${formData.time === slot ? 'selected' : ''}`}
                                                    onClick={() => setFormData({...formData, time: slot})}
                                                >
                                                    {slot}
                                                </button>
                                            ))}
                                        </div>
                                    </div>
                                )}

                                <div className="form-group">
                                    <label className="form-label">Notizen</label>
                                    <textarea
                                        className="form-input"
                                        rows="3"
                                        value={formData.notes}
                                        onChange={(e) => setFormData({...formData, notes: e.target.value})}
                                        placeholder="Zusätzliche Informationen zum Termin..."
                                    />
                                </div>
                            </div>
                            <div className="modal-footer">
                                <button type="button" className="btn btn-secondary" onClick={onClose}>
                                    Abbrechen
                                </button>
                                <button 
                                    type="submit" 
                                    className="btn btn-primary" 
                                    disabled={loading || !formData.time}
                                >
                                    {loading ? 'Bucht...' : 'Termin buchen'}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            );
        };

        // Customer Email Modal Component
        const CustomerEmailModal = ({ customer, onSend, onClose }) => {
            const [templates, setTemplates] = useState([]);
            const [formData, setFormData] = useState({
                template_id: '',
                subject: '',
                body: '',
                send_copy: false
            });
            const [loading, setLoading] = useState(false);

            useEffect(() => {
                loadEmailTemplates();
            }, []);

            const loadEmailTemplates = async () => {
                try {
                    const response = await apiCall('/email-templates');
                    setTemplates(response.data || []);
                } catch (error) {
                    console.error('Error loading email templates:', error);
                }
            };

            const handleTemplateChange = (templateId) => {
                const template = templates.find(t => t.id === templateId);
                if (template) {
                    setFormData({
                        ...formData,
                        template_id: templateId,
                        subject: template.subject,
                        body: template.body
                            .replace('{{customer_name}}', `${customer.first_name} ${customer.last_name}`)
                            .replace('{{customer_email}}', customer.email)
                    });
                }
            };

            const handleSubmit = async (e) => {
                e.preventDefault();
                setLoading(true);
                try {
                    await onSend({
                        subject: formData.subject,
                        body: formData.body,
                        send_copy: formData.send_copy
                    });
                } finally {
                    setLoading(false);
                }
            };

            return (
                <div className="modal">
                    <div className="modal-content" style={{ maxWidth: '600px' }}>
                        <div className="modal-header">
                            <h2 className="modal-title">
                                E-Mail an {customer.first_name} {customer.last_name}
                            </h2>
                            <button className="btn-close" onClick={onClose}>×</button>
                        </div>
                        <form onSubmit={handleSubmit}>
                            <div className="modal-body">
                                <div className="form-group">
                                    <label className="form-label">An</label>
                                    <input
                                        type="text"
                                        className="form-input"
                                        value={customer.email}
                                        disabled
                                    />
                                </div>

                                <div className="form-group">
                                    <label className="form-label">Vorlage</label>
                                    <select
                                        className="form-input"
                                        value={formData.template_id}
                                        onChange={(e) => handleTemplateChange(e.target.value)}
                                    >
                                        <option value="">Keine Vorlage</option>
                                        {templates.map(template => (
                                            <option key={template.id} value={template.id}>
                                                {template.name}
                                            </option>
                                        ))}
                                    </select>
                                </div>

                                <div className="form-group">
                                    <label className="form-label">Betreff *</label>
                                    <input
                                        type="text"
                                        className="form-input"
                                        value={formData.subject}
                                        onChange={(e) => setFormData({...formData, subject: e.target.value})}
                                        required
                                    />
                                </div>

                                <div className="form-group">
                                    <label className="form-label">Nachricht *</label>
                                    <textarea
                                        className="form-input"
                                        rows="10"
                                        value={formData.body}
                                        onChange={(e) => setFormData({...formData, body: e.target.value})}
                                        required
                                    />
                                </div>

                                <div className="form-group">
                                    <label className="checkbox-label">
                                        <input
                                            type="checkbox"
                                            checked={formData.send_copy}
                                            onChange={(e) => setFormData({...formData, send_copy: e.target.checked})}
                                        />
                                        <span>Kopie an mich senden</span>
                                    </label>
                                </div>
                            </div>
                            <div className="modal-footer">
                                <button type="button" className="btn btn-secondary" onClick={onClose}>
                                    Abbrechen
                                </button>
                                <button type="submit" className="btn btn-primary" disabled={loading}>
                                    {loading ? 'Sendet...' : 'E-Mail senden'}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            );
        };

        // Main App Component
        const App = () => {
            const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
            const [currentView, setCurrentView] = useState('dashboard');
            const [user, setUser] = useState(null);
            const [loading, setLoading] = useState(true);
            const { showToast } = useToast();

            useEffect(() => {
                loadUser();
            }, []);

            const loadUser = async () => {
                try {
                    const userData = await apiCall('/auth/user');
                    setUser(userData);
                } catch (error) {
                    showToast('Failed to load user data', 'error');
                } finally {
                    setLoading(false);
                }
            };

            const handleLogout = async () => {
                try {
                    await apiCall('/auth/logout', { method: 'POST' });
                    localStorage.removeItem('admin_token');
                    window.location.href = '/admin-react-login';
                } catch (error) {
                    showToast('Logout failed', 'error');
                }
            };

            const navigationItems = [
                { id: 'dashboard', label: 'Dashboard', icon: 'layout-dashboard' },
                { id: 'calls', label: 'Anrufe', icon: 'phone' },
                { id: 'appointments', label: 'Termine', icon: 'calendar' },
                { id: 'customers', label: 'Kunden', icon: 'users' },
                { id: 'companies', label: 'Unternehmen', icon: 'building' },
                { id: 'branches', label: 'Filialen', icon: 'map-pin' },
                { id: 'staff', label: 'Mitarbeiter', icon: 'user-check' },
                { id: 'services', label: 'Dienstleistungen', icon: 'briefcase' },
                { id: 'analytics', label: 'Analytics', icon: 'bar-chart-3' },
                { id: 'settings', label: 'Einstellungen', icon: 'settings' },
            ];

            const renderContent = () => {
                switch (currentView) {
                    case 'dashboard':
                        return <DashboardView />;
                    case 'calls':
                        return <CallsView />;
                    case 'appointments':
                        return <AppointmentsView />;
                    case 'customers':
                        return <CustomersView />;
                    case 'companies':
                        return <CompaniesView />;
                    case 'branches':
                        return <BranchesView />;
                    case 'staff':
                        return <StaffView />;
                    case 'services':
                        return <ServicesView />;
                    case 'analytics':
                        return <AnalyticsView />;
                    case 'settings':
                        return <SettingsView />;
                    default:
                        return <DashboardView />;
                }
            };

            if (loading) {
                return (
                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100vh' }}>
                        <div className="spinner"></div>
                    </div>
                );
            }

            return (
                <div className="app-container">
                    <aside className={`sidebar ${sidebarCollapsed ? 'collapsed' : ''}`}>
                        <div className="sidebar-header">
                            <a href="#" className="sidebar-logo">
                                <Icon name="zap" size={28} />
                                <span>AskProAI</span>
                            </a>
                        </div>
                        <nav className="sidebar-nav">
                            {navigationItems.map(item => (
                                <div key={item.id} className="nav-item">
                                    <a
                                        className={`nav-link ${currentView === item.id ? 'active' : ''}`}
                                        onClick={() => setCurrentView(item.id)}
                                    >
                                        <Icon name={item.icon} className="nav-icon" />
                                        <span>{item.label}</span>
                                    </a>
                                </div>
                            ))}
                        </nav>
                        <div className="sidebar-footer">
                            <button 
                                className="nav-link" 
                                onClick={handleLogout}
                                style={{ width: '100%' }}
                            >
                                <Icon name="log-out" className="nav-icon" />
                                <span>Logout</span>
                            </button>
                        </div>
                    </aside>

                    <main className="main-content">
                        <header className="header">
                            <div className="header-left">
                                <button 
                                    className="sidebar-toggle"
                                    onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
                                >
                                    <Icon name="menu" size={20} />
                                </button>
                                <div className="search-box">
                                    <Icon name="search" size={20} className="search-icon" />
                                    <input 
                                        type="text" 
                                        className="search-input" 
                                        placeholder="Suchen..."
                                    />
                                </div>
                            </div>
                            <div className="header-right">
                                <button className="header-button">
                                    <Icon name="bell" size={20} />
                                    <span>Benachrichtigungen</span>
                                </button>
                                <div className="user-menu">
                                    <div className="user-avatar">
                                        {user?.name?.charAt(0).toUpperCase() || 'A'}
                                    </div>
                                    <div>
                                        <div style={{ fontWeight: 600 }}>{user?.name || 'Admin'}</div>
                                        <div style={{ fontSize: 12, color: '#6b7280' }}>{user?.email}</div>
                                    </div>
                                </div>
                            </div>
                        </header>
                        <div className="content">
                            {renderContent()}
                        </div>
                    </main>
                </div>
            );
        };

        // Dashboard View Component
        const DashboardView = () => {
            const [stats, setStats] = useState(null);
            const [recentActivity, setRecentActivity] = useState([]);
            const [loading, setLoading] = useState(true);
            const { showToast } = useToast();

            useEffect(() => {
                loadDashboardData();
            }, []);

            const loadDashboardData = async () => {
                try {
                    const [statsData, activityData] = await Promise.all([
                        apiCall('/dashboard/stats'),
                        apiCall('/dashboard/recent-activity')
                    ]);
                    setStats(statsData);
                    setRecentActivity(activityData);
                } catch (error) {
                    showToast('Failed to load dashboard data', 'error');
                } finally {
                    setLoading(false);
                }
            };

            if (loading) {
                return (
                    <div style={{ display: 'flex', justifyContent: 'center', padding: 40 }}>
                        <div className="spinner"></div>
                    </div>
                );
            }

            return (
                <>
                    <div className="page-header">
                        <h1 className="page-title">Dashboard</h1>
                        <p className="page-subtitle">Willkommen im AskProAI Admin Portal</p>
                    </div>

                    <div className="stats-grid">
                        <div className="stat-card">
                            <div className="stat-icon blue">
                                <Icon name="phone" size={24} />
                            </div>
                            <div className="stat-value">{stats?.calls || 0}</div>
                            <div className="stat-label">Anrufe gesamt</div>
                            <div className="stat-change positive">
                                <Icon name="trending-up" size={16} />
                                <span>+12%</span>
                            </div>
                        </div>

                        <div className="stat-card">
                            <div className="stat-icon green">
                                <Icon name="calendar-check" size={24} />
                            </div>
                            <div className="stat-value">{stats?.appointments || 0}</div>
                            <div className="stat-label">Termine gebucht</div>
                            <div className="stat-change positive">
                                <Icon name="trending-up" size={16} />
                                <span>+8%</span>
                            </div>
                        </div>

                        <div className="stat-card">
                            <div className="stat-icon yellow">
                                <Icon name="users" size={24} />
                            </div>
                            <div className="stat-value">{stats?.customers || 0}</div>
                            <div className="stat-label">Kunden</div>
                            <div className="stat-change positive">
                                <Icon name="trending-up" size={16} />
                                <span>+5%</span>
                            </div>
                        </div>

                        <div className="stat-card">
                            <div className="stat-icon red">
                                <Icon name="building" size={24} />
                            </div>
                            <div className="stat-value">{stats?.companies || 0}</div>
                            <div className="stat-label">Unternehmen</div>
                            <div className="stat-change positive">
                                <Icon name="trending-up" size={16} />
                                <span>+2%</span>
                            </div>
                        </div>
                    </div>

                    <div className="card">
                        <div className="card-header">
                            <h2 className="card-title">Letzte Aktivitäten</h2>
                        </div>
                        <div className="timeline">
                            {recentActivity.map((activity, index) => (
                                <div key={index} className="timeline-item">
                                    <div className="timeline-marker"></div>
                                    <div className="timeline-content">
                                        <div className="timeline-date">{activity.date}</div>
                                        <div className="timeline-title">{activity.title}</div>
                                        <div className="timeline-description">{activity.description}</div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                </>
            );
        };

        // Calls View Component
        const CallsView = () => {
            const [calls, setCalls] = useState([]);
            const [loading, setLoading] = useState(true);
            const [page, setPage] = useState(1);
            const [totalPages, setTotalPages] = useState(1);
            const [selectedCalls, setSelectedCalls] = useState([]);
            const [showCallDetail, setShowCallDetail] = useState(false);
            const [selectedCall, setSelectedCall] = useState(null);
            const [filters, setFilters] = useState({
                search: '',
                status: '',
                sentiment: '',
                date_from: '',
                date_to: ''
            });
            const { showToast } = useToast();
            
            console.log('CallsView rendered. Current calls:', calls);
            console.log('Loading state:', loading);

            useEffect(() => {
                loadCalls();
            }, [page, filters]);

            const loadCalls = async () => {
                setLoading(true);
                try {
                    const params = new URLSearchParams({
                        page,
                        per_page: 20,
                        ...Object.fromEntries(Object.entries(filters).filter(([key, v]) => v))
                    });
                    
                    console.log('Loading calls with params:', params.toString());
                    const response = await apiCall(`/calls?${params}`);
                    console.log('API Response:', response);
                    console.log('Response data:', response.data);
                    console.log('Response data length:', response.data ? response.data.length : 0);
                    
                    setCalls(response.data || []);
                    setTotalPages(response.last_page || 1);
                } catch (error) {
                    console.error('Error loading calls:', error);
                    showToast('Failed to load calls', 'error');
                } finally {
                    setLoading(false);
                }
            };

            const handleSelectAll = (checked) => {
                if (checked) {
                    setSelectedCalls(calls.map(call => call.id));
                } else {
                    setSelectedCalls([]);
                }
            };

            const handleSelectCall = (callId) => {
                setSelectedCalls(prev => {
                    if (prev.includes(callId)) {
                        return prev.filter(id => id !== callId);
                    } else {
                        return [...prev, callId];
                    }
                });
            };

            const handleMarkNonBillable = async () => {
                if (selectedCalls.length === 0) {
                    showToast('Bitte wählen Sie mindestens einen Anruf aus', 'warning');
                    return;
                }

                try {
                    await apiCall('/calls/mark-non-billable', {
                        method: 'POST',
                        body: JSON.stringify({ call_ids: selectedCalls })
                    });
                    showToast('Anrufe als nicht abrechenbar markiert', 'success');
                    loadCalls();
                    setSelectedCalls([]);
                } catch (error) {
                    showToast('Fehler beim Markieren der Anrufe', 'error');
                }
            };

            const handleCreateRefund = async () => {
                if (selectedCalls.length === 0) {
                    showToast('Bitte wählen Sie mindestens einen Anruf aus', 'warning');
                    return;
                }

                const reason = prompt('Bitte geben Sie den Grund für die Rückerstattung an:');
                if (!reason) return;

                try {
                    await apiCall('/calls/create-refund', {
                        method: 'POST',
                        body: JSON.stringify({ 
                            call_ids: selectedCalls,
                            refund_reason: reason
                        })
                    });
                    showToast('Rückerstattungen erstellt', 'success');
                    loadCalls();
                    setSelectedCalls([]);
                } catch (error) {
                    showToast('Fehler beim Erstellen der Rückerstattungen', 'error');
                }
            };

            const handleViewCall = (call) => {
                setSelectedCall(call);
                setShowCallDetail(true);
            };

            const getSentimentIcon = (sentiment) => {
                switch (sentiment) {
                    case 'positive':
                        return <Icon name="smile" size={16} />;
                    case 'negative':
                        return <Icon name="frown" size={16} />;
                    default:
                        return <Icon name="meh" size={16} />;
                }
            };

            const getSentimentColor = (sentiment) => {
                switch (sentiment) {
                    case 'positive':
                        return 'positive';
                    case 'negative':
                        return 'negative';
                    default:
                        return 'neutral';
                }
            };

            return (
                <>
                    <div className="page-header">
                        <h1 className="page-title">Anrufe</h1>
                        <p className="page-subtitle">Verwalten Sie alle eingehenden und ausgehenden Anrufe</p>
                    </div>

                    {/* Filter Bar */}
                    <div className="filter-bar">
                        <div className="filter-group">
                            <input
                                type="text"
                                className="form-control"
                                placeholder="Suchen..."
                                value={filters.search}
                                onChange={(e) => setFilters({...filters, search: e.target.value})}
                                style={{ width: 200 }}
                            />
                        </div>
                        <div className="filter-group">
                            <select 
                                className="filter-select"
                                value={filters.sentiment}
                                onChange={(e) => setFilters({...filters, sentiment: e.target.value})}
                            >
                                <option value="">Alle Stimmungen</option>
                                <option value="positive">Positiv</option>
                                <option value="neutral">Neutral</option>
                                <option value="negative">Negativ</option>
                            </select>
                        </div>
                        <div className="filter-group">
                            <input
                                type="date"
                                className="form-control"
                                value={filters.date_from}
                                onChange={(e) => setFilters({...filters, date_from: e.target.value})}
                            />
                            <span>bis</span>
                            <input
                                type="date"
                                className="form-control"
                                value={filters.date_to}
                                onChange={(e) => setFilters({...filters, date_to: e.target.value})}
                            />
                        </div>
                        <button className="btn btn-primary btn-sm" onClick={loadCalls}>
                            <Icon name="filter" size={16} />
                            Filtern
                        </button>
                    </div>

                    {/* Actions Bar */}
                    {selectedCalls.length > 0 && (
                        <div className="card" style={{ marginBottom: 16, padding: 16, background: '#f0f9ff' }}>
                            <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>
                                <span>{selectedCalls.length} Anrufe ausgewählt</span>
                                <button className="btn btn-secondary btn-sm" onClick={handleMarkNonBillable}>
                                    <Icon name="slash" size={16} />
                                    Als nicht abrechenbar markieren
                                </button>
                                <button className="btn btn-danger btn-sm" onClick={handleCreateRefund}>
                                    <Icon name="credit-card" size={16} />
                                    Rückerstattung erstellen
                                </button>
                            </div>
                        </div>
                    )}

                    {/* Calls Table */}
                    <div className="card">
                        <div className="table-container">
                            <table>
                                <thead>
                                    <tr>
                                        <th style={{ width: 40 }}>
                                            <div className="checkbox-wrapper">
                                                <div 
                                                    className={`checkbox ${selectedCalls.length === calls.length && calls.length > 0 ? 'checked' : ''}`}
                                                    onClick={(e) => handleSelectAll(e.target.checked !== true)}
                                                >
                                                    {selectedCalls.length === calls.length && calls.length > 0 && (
                                                        <Icon name="check" size={14} />
                                                    )}
                                                </div>
                                            </div>
                                        </th>
                                        <th>Zeitpunkt</th>
                                        <th>Von</th>
                                        <th>Kunde</th>
                                        <th>Dauer</th>
                                        <th>Stimmung</th>
                                        <th>Termin</th>
                                        <th>Kosten</th>
                                        <th>Status</th>
                                        <th>Aktionen</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {loading ? (
                                        <tr>
                                            <td colSpan="10" style={{ textAlign: 'center', padding: 40 }}>
                                                <div className="spinner"></div>
                                            </td>
                                        </tr>
                                    ) : calls.length === 0 ? (
                                        <tr>
                                            <td colSpan="10">
                                                <div className="empty-state">
                                                    <Icon name="phone-off" size={80} className="empty-state-icon" />
                                                    <h3 className="empty-state-title">Keine Anrufe gefunden</h3>
                                                    <p className="empty-state-text">Es wurden keine Anrufe mit den gewählten Filtern gefunden.</p>
                                                </div>
                                            </td>
                                        </tr>
                                    ) : (
                                        calls.map(call => (
                                            <tr key={call.id} className={`call-row ${getSentimentColor(call.sentiment)}`}>
                                                <td>
                                                    <div className="checkbox-wrapper">
                                                        <div 
                                                            className={`checkbox ${selectedCalls.includes(call.id) ? 'checked' : ''}`}
                                                            onClick={() => handleSelectCall(call.id)}
                                                        >
                                                            {selectedCalls.includes(call.id) && (
                                                                <Icon name="check" size={14} />
                                                            )}
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>{call.created_at}</td>
                                                <td>{call.from_phone_number}</td>
                                                <td>
                                                    {call.customer ? (
                                                        <div>
                                                            <div style={{ fontWeight: 600 }}>{call.customer.name}</div>
                                                            <div style={{ fontSize: 12, color: '#6b7280' }}>{call.customer.phone}</div>
                                                        </div>
                                                    ) : (
                                                        <span style={{ color: '#9ca3af' }}>Unbekannt</span>
                                                    )}
                                                </td>
                                                <td>{call.duration_formatted}</td>
                                                <td>
                                                    {call.sentiment && (
                                                        <span className={`sentiment-badge ${getSentimentColor(call.sentiment)}`}>
                                                            {getSentimentIcon(call.sentiment)}
                                                            {call.sentiment}
                                                        </span>
                                                    )}
                                                </td>
                                                <td>
                                                    {call.appointment_created ? (
                                                        <span className="badge badge-success">Erstellt</span>
                                                    ) : (
                                                        <span className="badge badge-gray">Kein Termin</span>
                                                    )}
                                                </td>
                                                <td>
                                                    {call.is_non_billable ? (
                                                        <span className="badge badge-gray">Nicht abrechenbar</span>
                                                    ) : call.is_refunded ? (
                                                        <span className="badge badge-warning">Erstattet</span>
                                                    ) : (
                                                        <span>€{(call.cost || 0).toFixed(2)}</span>
                                                    )}
                                                </td>
                                                <td>
                                                    <span className={`badge badge-${call.status === 'completed' ? 'success' : 'gray'}`}>
                                                        {call.status}
                                                    </span>
                                                </td>
                                                <td>
                                                    <div style={{ display: 'flex', gap: 8 }}>
                                                        <button 
                                                            className="btn btn-sm btn-secondary"
                                                            onClick={() => handleViewCall(call)}
                                                        >
                                                            <Icon name="eye" size={16} />
                                                        </button>
                                                        {call.has_recording && (
                                                            <button className="btn btn-sm btn-secondary">
                                                                <Icon name="headphones" size={16} />
                                                            </button>
                                                        )}
                                                        <button className="btn btn-sm btn-secondary">
                                                            <Icon name="share-2" size={16} />
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        ))
                                    )}
                                </tbody>
                            </table>
                        </div>

                        {/* Pagination */}
                        {totalPages > 1 && (
                            <div style={{ padding: 20, display: 'flex', justifyContent: 'center', gap: 8 }}>
                                <button 
                                    className="btn btn-secondary btn-sm"
                                    onClick={() => setPage(Math.max(1, page - 1))}
                                    disabled={page === 1}
                                >
                                    <Icon name="chevron-left" size={16} />
                                </button>
                                <span style={{ padding: '8px 16px' }}>
                                    Seite {page} von {totalPages}
                                </span>
                                <button 
                                    className="btn btn-secondary btn-sm"
                                    onClick={() => setPage(Math.min(totalPages, page + 1))}
                                    disabled={page === totalPages}
                                >
                                    <Icon name="chevron-right" size={16} />
                                </button>
                            </div>
                        )}
                    </div>

                    {/* Call Detail Modal */}
                    {showCallDetail && selectedCall && (
                        <CallDetailModal 
                            call={selectedCall}
                            onClose={() => {
                                setShowCallDetail(false);
                                setSelectedCall(null);
                            }}
                        />
                    )}
                </>
            );
        };

        // Call Detail Modal Component
        const CallDetailModal = ({ call, onClose }) => {
            const [callDetails, setCallDetails] = useState(null);
            const [loading, setLoading] = useState(true);
            const [showTranscript, setShowTranscript] = useState(false);
            const { showToast } = useToast();

            useEffect(() => {
                loadCallDetails();
            }, [call.id]);

            const loadCallDetails = async () => {
                try {
                    const details = await apiCall(`/calls/${call.id}`);
                    setCallDetails(details);
                } catch (error) {
                    showToast('Failed to load call details', 'error');
                } finally {
                    setLoading(false);
                }
            };

            const handleShare = async () => {
                try {
                    const response = await apiCall(`/calls/${call.id}/share`, { method: 'POST' });
                    navigator.clipboard.writeText(response.share_url);
                    showToast('Share link copied to clipboard', 'success');
                } catch (error) {
                    showToast('Failed to create share link', 'error');
                }
            };

            return (
                <div className="modal-overlay" onClick={(e) => e.target === e.currentTarget && onClose()}>
                    <div className="modal" style={{ maxWidth: 800 }}>
                        <div className="modal-header">
                            <h2 className="modal-title">Anruf Details</h2>
                            <button className="modal-close" onClick={onClose}>
                                <Icon name="x" size={24} />
                            </button>
                        </div>

                        {loading ? (
                            <div style={{ padding: 40, textAlign: 'center' }}>
                                <div className="spinner"></div>
                            </div>
                        ) : (
                            <>
                                {/* Call Header */}
                                <div className="card" style={{ marginBottom: 20 }}>
                                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}>
                                        <div>
                                            <h3 style={{ marginBottom: 8 }}>
                                                {callDetails.customer?.name || 'Unbekannter Anrufer'}
                                            </h3>
                                            <div style={{ color: '#6b7280', marginBottom: 16 }}>
                                                <div>{callDetails.from_phone_number}</div>
                                                <div>{callDetails.created_at}</div>
                                            </div>
                                            <div style={{ display: 'flex', gap: 8 }}>
                                                {callDetails.sentiment && (
                                                    <span className={`sentiment-badge ${callDetails.sentiment}`}>
                                                        {callDetails.sentiment}
                                                    </span>
                                                )}
                                                <span className="badge badge-gray">
                                                    {callDetails.duration_formatted}
                                                </span>
                                                {callDetails.appointment && (
                                                    <span className="badge badge-success">
                                                        Termin erstellt
                                                    </span>
                                                )}
                                            </div>
                                        </div>
                                        <div style={{ display: 'flex', gap: 8 }}>
                                            <button className="btn btn-secondary btn-sm" onClick={handleShare}>
                                                <Icon name="share-2" size={16} />
                                                Teilen
                                            </button>
                                        </div>
                                    </div>
                                </div>

                                {/* Summary */}
                                {callDetails.summary && (
                                    <div className="card" style={{ marginBottom: 20 }}>
                                        <h4 style={{ marginBottom: 12 }}>Zusammenfassung</h4>
                                        <p style={{ lineHeight: 1.6, color: '#374151' }}>{callDetails.summary}</p>
                                    </div>
                                )}

                                {/* Audio Player */}
                                {callDetails.recording_url && (
                                    <AudioPlayer recordingUrl={callDetails.recording_url} />
                                )}

                                {/* Transcript */}
                                {callDetails.transcript && (
                                    <div className="transcript-viewer">
                                        <div className="transcript-header">
                                            <h4>Transkript</h4>
                                            <button 
                                                className="btn btn-sm btn-secondary"
                                                onClick={() => setShowTranscript(!showTranscript)}
                                            >
                                                <Icon name={showTranscript ? 'chevron-up' : 'chevron-down'} size={16} />
                                                {showTranscript ? 'Verbergen' : 'Anzeigen'}
                                            </button>
                                        </div>
                                        {showTranscript && (
                                            <div className="transcript-content">
                                                {callDetails.transcript.split('\n').map((line, index) => {
                                                    const [speaker, ...text] = line.split(':');
                                                    return (
                                                        <div key={index} className="transcript-text">
                                                            <div className="transcript-speaker">{speaker}:</div>
                                                            {text.join(':')}
                                                        </div>
                                                    );
                                                })}
                                            </div>
                                        )}
                                    </div>
                                )}

                                {/* Customer Info */}
                                {callDetails.customer && (
                                    <div className="card" style={{ marginTop: 20 }}>
                                        <h4 style={{ marginBottom: 16 }}>Kundeninformationen</h4>
                                        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 16 }}>
                                            <div>
                                                <div style={{ color: '#6b7280', fontSize: 14, marginBottom: 4 }}>Name</div>
                                                <div>{callDetails.customer.name}</div>
                                            </div>
                                            <div>
                                                <div style={{ color: '#6b7280', fontSize: 14, marginBottom: 4 }}>Telefon</div>
                                                <div>{callDetails.customer.phone}</div>
                                            </div>
                                            <div>
                                                <div style={{ color: '#6b7280', fontSize: 14, marginBottom: 4 }}>E-Mail</div>
                                                <div>{callDetails.customer.email || '-'}</div>
                                            </div>
                                            <div>
                                                <div style={{ color: '#6b7280', fontSize: 14, marginBottom: 4 }}>Kunde seit</div>
                                                <div>{new Date(callDetails.customer.created_at).toLocaleDateString('de-DE')}</div>
                                            </div>
                                        </div>
                                    </div>
                                )}
                            </>
                        )}
                    </div>
                </div>
            );
        };

        // Audio Player Component
        const AudioPlayer = ({ recordingUrl }) => {
            const [isPlaying, setIsPlaying] = useState(false);
            const [currentTime, setCurrentTime] = useState(0);
            const [duration, setDuration] = useState(0);
            const audioRef = useRef(null);

            useEffect(() => {
                const audio = audioRef.current;
                
                const handleLoadedMetadata = () => {
                    setDuration(audio.duration);
                };

                const handleTimeUpdate = () => {
                    setCurrentTime(audio.currentTime);
                };

                const handleEnded = () => {
                    setIsPlaying(false);
                };

                audio.addEventListener('loadedmetadata', handleLoadedMetadata);
                audio.addEventListener('timeupdate', handleTimeUpdate);
                audio.addEventListener('ended', handleEnded);

                return () => {
                    audio.removeEventListener('loadedmetadata', handleLoadedMetadata);
                    audio.removeEventListener('timeupdate', handleTimeUpdate);
                    audio.removeEventListener('ended', handleEnded);
                };
            }, []);

            const togglePlayPause = () => {
                const audio = audioRef.current;
                if (isPlaying) {
                    audio.pause();
                } else {
                    audio.play();
                }
                setIsPlaying(!isPlaying);
            };

            const handleProgressClick = (e) => {
                const audio = audioRef.current;
                const rect = e.currentTarget.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const percentage = x / rect.width;
                audio.currentTime = percentage * duration;
            };

            const formatTime = (time) => {
                const minutes = Math.floor(time / 60);
                const seconds = Math.floor(time % 60);
                return `${minutes}:${seconds.toString().padStart(2, '0')}`;
            };

            return (
                <div className="audio-player">
                    <audio ref={audioRef} src={recordingUrl} />
                    <div className="audio-controls">
                        <button className="play-button" onClick={togglePlayPause}>
                            <Icon name={isPlaying ? 'pause' : 'play'} size={24} />
                        </button>
                        <div className="audio-progress" onClick={handleProgressClick}>
                            <div 
                                className="audio-progress-bar" 
                                style={{ width: `${(currentTime / duration) * 100}%` }}
                            />
                        </div>
                        <div className="audio-time">
                            {formatTime(currentTime)} / {formatTime(duration)}
                        </div>
                    </div>
                </div>
            );
        };

        // Other View Components (Placeholder implementations)
        const AppointmentsView = () => {
            const [appointments, setAppointments] = useState([]);
            const [loading, setLoading] = useState(true);
            const [page, setPage] = useState(1);
            const [totalPages, setTotalPages] = useState(1);
            const [showCreateModal, setShowCreateModal] = useState(false);
            const [showEditModal, setShowEditModal] = useState(false);
            const [showDetailModal, setShowDetailModal] = useState(false);
            const [selectedAppointment, setSelectedAppointment] = useState(null);
            const [companies, setCompanies] = useState([]);
            const [branches, setBranches] = useState([]);
            const [customers, setCustomers] = useState([]);
            const [staff, setStaff] = useState([]);
            const [services, setServices] = useState([]);
            const [quickFilterCounts, setQuickFilterCounts] = useState({});
            const [showCalendarView, setShowCalendarView] = useState(false);
            const [selectedIds, setSelectedIds] = useState([]);
            const [bulkAction, setBulkAction] = useState('');
            const [filters, setFilters] = useState({
                search: '',
                status: '',
                staff_id: '',
                service_id: '',
                company_id: '',
                branch_id: '',
                date_from: '',
                date_to: '',
                has_call: '',
                cal_sync: '',
                quick_filter: ''
            });
            const { showToast } = useToast();

            useEffect(() => {
                loadAppointments();
                loadFilterData();
                loadQuickFilterCounts();
            }, [page, filters]);

            const loadAppointments = async () => {
                setLoading(true);
                try {
                    const params = new URLSearchParams({
                        page,
                        per_page: 20,
                        ...Object.fromEntries(Object.entries(filters).filter(([key, v]) => v !== ''))
                    });

                    // Handle quick filters
                    if (filters.quick_filter) {
                        const today = new Date().toISOString().split('T')[0];
                        const tomorrow = new Date(Date.now() + 86400000).toISOString().split('T')[0];
                        
                        switch(filters.quick_filter) {
                            case 'today':
                                params.set('date', today);
                                break;
                            case 'tomorrow':
                                params.set('date', tomorrow);
                                break;
                            case 'this_week':
                                const weekStart = new Date();
                                weekStart.setDate(weekStart.getDate() - weekStart.getDay());
                                const weekEnd = new Date(weekStart);
                                weekEnd.setDate(weekEnd.getDate() + 6);
                                params.set('date_from', weekStart.toISOString().split('T')[0]);
                                params.set('date_to', weekEnd.toISOString().split('T')[0]);
                                break;
                        }
                    }

                    const response = await fetch(`/admin/api/appointments?${params}`);
                    const data = await response.json();
                    
                    setAppointments(data.data);
                    setTotalPages(data.last_page);
                } catch (error) {
                    console.error('Error loading appointments:', error);
                    showToast('Fehler beim Laden der Termine', 'error');
                } finally {
                    setLoading(false);
                }
            };

            const loadFilterData = async () => {
                try {
                    const [companiesRes, customersRes, staffRes, servicesRes] = await Promise.all([
                        fetch('/admin/api/companies'),
                        fetch('/admin/api/customers'),
                        fetch('/admin/api/staff'),
                        fetch('/admin/api/services')
                    ]);

                    const [companiesData, customersData, staffData, servicesData] = await Promise.all([
                        companiesRes.json(),
                        customersRes.json(),
                        staffRes.json(),
                        servicesRes.json()
                    ]);

                    setCompanies(companiesData.data || []);
                    setCustomers(customersData.data || []);
                    setStaff(staffData.data || []);
                    setServices(servicesData.data || []);
                } catch (error) {
                    console.error('Error loading filter data:', error);
                }
            };

            const loadQuickFilterCounts = async () => {
                try {
                    const params = filters.company_id ? `?company_id=${filters.company_id}` : '';
                    const response = await fetch(`/admin/api/appointments/quick-filters${params}`);
                    const data = await response.json();
                    setQuickFilterCounts(data);
                } catch (error) {
                    console.error('Error loading quick filter counts:', error);
                }
            };

            const loadBranches = async (companyId) => {
                if (!companyId) {
                    setBranches([]);
                    return;
                }
                try {
                    const response = await fetch(`/admin/api/branches?company_id=${companyId}`);
                    const data = await response.json();
                    setBranches(data.data || []);
                } catch (error) {
                    console.error('Error loading branches:', error);
                }
            };

            const handleFilterChange = (key, value) => {
                setFilters(prev => ({ ...prev, [key]: value }));
                setPage(1);
                
                if (key === 'company_id') {
                    loadBranches(value);
                    setFilters(prev => ({ ...prev, branch_id: '' }));
                }
            };

            const handleQuickFilter = (filterType) => {
                setFilters(prev => ({ 
                    ...prev, 
                    quick_filter: prev.quick_filter === filterType ? '' : filterType,
                    date_from: '',
                    date_to: ''
                }));
                setPage(1);
            };

            const handleStatusUpdate = async (appointmentId, newStatus) => {
                try {
                    let endpoint = `/admin/api/appointments/${appointmentId}`;
                    
                    switch(newStatus) {
                        case 'cancelled':
                            endpoint += '/cancel';
                            break;
                        case 'confirmed':
                            endpoint += '/confirm';
                            break;
                        case 'completed':
                            endpoint += '/complete';
                            break;
                        case 'no_show':
                            endpoint += '/no-show';
                            break;
                        default:
                            // For other status updates, use the regular update endpoint
                            const response = await fetch(endpoint, {
                                method: 'PUT',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ status: newStatus })
                            });
                            
                            if (!response.ok) throw new Error('Failed to update status');
                            showToast('Status erfolgreich aktualisiert', 'success');
                            loadAppointments();
                            return;
                    }

                    const response = await fetch(endpoint, { method: 'POST' });
                    
                    if (!response.ok) throw new Error('Failed to update status');
                    
                    const data = await response.json();
                    showToast(data.message || 'Status erfolgreich aktualisiert', 'success');
                    
                    if (newStatus === 'no_show' && data.customer_no_show_count >= 3) {
                        showToast(`Achtung: Kunde hat ${data.customer_no_show_count} No-Shows!`, 'warning');
                    }
                    
                    loadAppointments();
                } catch (error) {
                    console.error('Error updating status:', error);
                    showToast('Fehler beim Aktualisieren des Status', 'error');
                }
            };

            const handleCheckIn = async (appointmentId) => {
                try {
                    const response = await fetch(`/admin/api/appointments/${appointmentId}/check-in`, {
                        method: 'POST'
                    });
                    
                    if (!response.ok) throw new Error('Failed to check in');
                    
                    showToast('Kunde erfolgreich eingecheckt', 'success');
                    loadAppointments();
                } catch (error) {
                    console.error('Error checking in:', error);
                    showToast('Fehler beim Check-in', 'error');
                }
            };

            const handleSendReminder = async (appointmentId) => {
                try {
                    const response = await fetch(`/admin/api/appointments/${appointmentId}/send-reminder`, {
                        method: 'POST'
                    });
                    
                    if (!response.ok) throw new Error('Failed to send reminder');
                    
                    showToast('Erinnerung erfolgreich gesendet', 'success');
                    loadAppointments();
                } catch (error) {
                    console.error('Error sending reminder:', error);
                    showToast('Fehler beim Senden der Erinnerung', 'error');
                }
            };

            const handleBulkAction = async () => {
                if (!bulkAction || selectedIds.length === 0) {
                    showToast('Bitte wählen Sie eine Aktion und mindestens einen Termin aus', 'warning');
                    return;
                }

                try {
                    const response = await fetch('/admin/api/appointments/bulk-action', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            appointment_ids: selectedIds,
                            action: bulkAction.split(':')[0],
                            status: bulkAction.split(':')[1]
                        })
                    });

                    if (!response.ok) throw new Error('Bulk action failed');

                    const data = await response.json();
                    
                    if (bulkAction === 'export') {
                        // Handle CSV download
                        downloadCsv(data.csv_data);
                    } else {
                        showToast(data.message, 'success');
                    }
                    
                    setSelectedIds([]);
                    setBulkAction('');
                    loadAppointments();
                } catch (error) {
                    console.error('Error performing bulk action:', error);
                    showToast('Fehler bei der Massenbearbeitung', 'error');
                }
            };

            const downloadCsv = (csvData) => {
                const headers = csvData.headers.join(',');
                const rows = csvData.rows.map(row => row.join(',')).join('\n');
                const csv = `${headers}\n${rows}`;
                
                const blob = new Blob([csv], { type: 'text/csv' });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `appointments_${new Date().toISOString().split('T')[0]}.csv`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            };

            const getStatusBadge = (status) => {
                const statusConfig = {
                    scheduled: { color: 'bg-blue-100 text-blue-800', label: 'Geplant' },
                    confirmed: { color: 'bg-green-100 text-green-800', label: 'Bestätigt' },
                    completed: { color: 'bg-gray-100 text-gray-800', label: 'Abgeschlossen' },
                    cancelled: { color: 'bg-red-100 text-red-800', label: 'Storniert' },
                    no_show: { color: 'bg-yellow-100 text-yellow-800', label: 'Nicht erschienen' }
                };
                
                const config = statusConfig[status] || { color: 'bg-gray-100 text-gray-800', label: status };
                
                return (
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.color}`}>
                        {config.label}
                    </span>
                );
            };

            const getPaymentBadge = (paymentStatus) => {
                const config = {
                    paid: { color: 'bg-green-100 text-green-800', label: 'Bezahlt' },
                    pending: { color: 'bg-yellow-100 text-yellow-800', label: 'Ausstehend' },
                    failed: { color: 'bg-red-100 text-red-800', label: 'Fehlgeschlagen' },
                    refunded: { color: 'bg-gray-100 text-gray-800', label: 'Erstattet' }
                };
                
                const statusConfig = config[paymentStatus] || { color: 'bg-gray-100 text-gray-800', label: paymentStatus || 'Unbekannt' };
                
                return (
                    <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${statusConfig.color}`}>
                        {statusConfig.label}
                    </span>
                );
            };

            const formatDateTime = (dateString) => {
                if (!dateString) return '-';
                const date = new Date(dateString);
                return date.toLocaleString('de-DE', {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            };

            const getRowHighlight = (appointment) => {
                if (appointment.no_show_count >= 3) {
                    return 'bg-red-50';
                }
                if (appointment.customer?.vip) {
                    return 'bg-yellow-50';
                }
                return '';
            };

            if (showCalendarView) {
                return <CalendarView 
                    appointments={appointments} 
                    onClose={() => setShowCalendarView(false)}
                    onAppointmentClick={(appointment) => {
                        setSelectedAppointment(appointment);
                        setShowDetailModal(true);
                    }}
                />;
            }

            return (
                <div>
                    <div className="page-header">
                        <div className="flex justify-between items-center">
                            <div>
                                <h1 className="page-title">Termine</h1>
                                <p className="page-subtitle">Verwalten Sie alle Termine und Buchungen</p>
                            </div>
                            <div className="flex gap-2">
                                <button
                                    onClick={() => setShowCalendarView(true)}
                                    className="btn btn-secondary"
                                >
                                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                    Kalenderansicht
                                </button>
                                <button
                                    onClick={() => setShowCreateModal(true)}
                                    className="btn btn-primary"
                                >
                                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                                    </svg>
                                    Neuer Termin
                                </button>
                            </div>
                        </div>
                    </div>

                    {/* Quick Filters */}
                    <div className="card mb-4">
                        <div className="card-body">
                            <h3 className="text-sm font-semibold text-gray-700 mb-3">Schnellfilter</h3>
                            <div className="flex flex-wrap gap-2">
                                {[
                                    { key: 'today', label: 'Heute', count: quickFilterCounts.today },
                                    { key: 'tomorrow', label: 'Morgen', count: quickFilterCounts.tomorrow },
                                    { key: 'this_week', label: 'Diese Woche', count: quickFilterCounts.this_week },
                                    { key: 'past_due', label: 'Überfällig', count: quickFilterCounts.past_due },
                                    { key: 'created_today', label: 'Heute erstellt', count: quickFilterCounts.created_today }
                                ].map(filter => (
                                    <button
                                        key={filter.key}
                                        onClick={() => handleQuickFilter(filter.key)}
                                        className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${
                                            filters.quick_filter === filter.key
                                                ? 'bg-primary-600 text-white'
                                                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                        }`}
                                    >
                                        {filter.label}
                                        {filter.count !== undefined && (
                                            <span className="ml-1 text-xs">({filter.count})</span>
                                        )}
                                    </button>
                                ))}
                            </div>
                        </div>
                    </div>

                    {/* Filters */}
                    <div className="card mb-4">
                        <div className="card-body">
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Suche</label>
                                    <input
                                        type="text"
                                        className="form-input"
                                        placeholder="Kunde suchen..."
                                        value={filters.search}
                                        onChange={(e) => handleFilterChange('search', e.target.value)}
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                                    <select
                                        className="form-select"
                                        value={filters.status}
                                        onChange={(e) => handleFilterChange('status', e.target.value)}
                                    >
                                        <option value="">Alle Status</option>
                                        <option value="scheduled">Geplant</option>
                                        <option value="confirmed">Bestätigt</option>
                                        <option value="completed">Abgeschlossen</option>
                                        <option value="cancelled">Storniert</option>
                                        <option value="no_show">Nicht erschienen</option>
                                    </select>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Mitarbeiter</label>
                                    <select
                                        className="form-select"
                                        value={filters.staff_id}
                                        onChange={(e) => handleFilterChange('staff_id', e.target.value)}
                                    >
                                        <option value="">Alle Mitarbeiter</option>
                                        {staff.map(s => (
                                            <option key={s.id} value={s.id}>{s.name}</option>
                                        ))}
                                    </select>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Service</label>
                                    <select
                                        className="form-select"
                                        value={filters.service_id}
                                        onChange={(e) => handleFilterChange('service_id', e.target.value)}
                                    >
                                        <option value="">Alle Services</option>
                                        {services.map(s => (
                                            <option key={s.id} value={s.id}>{s.name}</option>
                                        ))}
                                    </select>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Unternehmen</label>
                                    <select
                                        className="form-select"
                                        value={filters.company_id}
                                        onChange={(e) => handleFilterChange('company_id', e.target.value)}
                                    >
                                        <option value="">Alle Unternehmen</option>
                                        {companies.map(c => (
                                            <option key={c.id} value={c.id}>{c.name}</option>
                                        ))}
                                    </select>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Filiale</label>
                                    <select
                                        className="form-select"
                                        value={filters.branch_id}
                                        onChange={(e) => handleFilterChange('branch_id', e.target.value)}
                                        disabled={!filters.company_id}
                                    >
                                        <option value="">Alle Filialen</option>
                                        {branches.map(b => (
                                            <option key={b.id} value={b.id}>{b.name}</option>
                                        ))}
                                    </select>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Von Datum</label>
                                    <input
                                        type="date"
                                        className="form-input"
                                        value={filters.date_from}
                                        onChange={(e) => handleFilterChange('date_from', e.target.value)}
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Bis Datum</label>
                                    <input
                                        type="date"
                                        className="form-input"
                                        value={filters.date_to}
                                        onChange={(e) => handleFilterChange('date_to', e.target.value)}
                                    />
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Bulk Actions */}
                    {selectedIds.length > 0 && (
                        <div className="card mb-4 bg-blue-50 border-blue-200">
                            <div className="card-body">
                                <div className="flex items-center justify-between">
                                    <div className="text-sm font-medium text-blue-700">
                                        {selectedIds.length} Termine ausgewählt
                                    </div>
                                    <div className="flex gap-2">
                                        <select
                                            className="form-select text-sm"
                                            value={bulkAction}
                                            onChange={(e) => setBulkAction(e.target.value)}
                                        >
                                            <option value="">Aktion wählen...</option>
                                            <option value="update_status:confirmed">Status → Bestätigt</option>
                                            <option value="update_status:completed">Status → Abgeschlossen</option>
                                            <option value="update_status:cancelled">Status → Storniert</option>
                                            <option value="send_reminders">Erinnerungen senden</option>
                                            <option value="export">Als CSV exportieren</option>
                                        </select>
                                        <button
                                            onClick={handleBulkAction}
                                            className="btn btn-primary btn-sm"
                                            disabled={!bulkAction}
                                        >
                                            Ausführen
                                        </button>
                                        <button
                                            onClick={() => setSelectedIds([])}
                                            className="btn btn-secondary btn-sm"
                                        >
                                            Abbrechen
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Appointments Table */}
                    <div className="card">
                        {loading ? (
                            <div className="card-body text-center py-8">
                                <div className="spinner"></div>
                                <p className="text-gray-500 mt-2">Termine werden geladen...</p>
                            </div>
                        ) : appointments.length === 0 ? (
                            <div className="card-body text-center py-8">
                                <p className="text-gray-500">Keine Termine gefunden</p>
                            </div>
                        ) : (
                            <div className="overflow-x-auto">
                                <table className="w-full">
                                    <thead>
                                        <tr className="border-b border-gray-200">
                                            <th className="px-4 py-3 text-left">
                                                <input
                                                    type="checkbox"
                                                    className="form-checkbox"
                                                    checked={selectedIds.length === appointments.length}
                                                    onChange={(e) => {
                                                        if (e.target.checked) {
                                                            setSelectedIds(appointments.map(a => a.id));
                                                        } else {
                                                            setSelectedIds([]);
                                                        }
                                                    }}
                                                />
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Kunde</th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Service</th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Mitarbeiter</th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Datum & Zeit</th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Preis</th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Zahlung</th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sync</th>
                                            <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Aktionen</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {appointments.map((appointment, index) => (
                                            <tr key={appointment.id} className={`border-b border-gray-200 hover:bg-gray-50 ${getRowHighlight(appointment)}`}>
                                                <td className="px-4 py-3">
                                                    <input
                                                        type="checkbox"
                                                        className="form-checkbox"
                                                        checked={selectedIds.includes(appointment.id)}
                                                        onChange={(e) => {
                                                            if (e.target.checked) {
                                                                setSelectedIds([...selectedIds, appointment.id]);
                                                            } else {
                                                                setSelectedIds(selectedIds.filter(id => id !== appointment.id));
                                                            }
                                                        }}
                                                    />
                                                </td>
                                                <td className="px-4 py-3">
                                                    <div>
                                                        <div className="text-sm font-medium text-gray-900">
                                                            {appointment.customer?.name || 'Unbekannt'}
                                                        </div>
                                                        <div className="text-sm text-gray-500">
                                                            {appointment.customer?.phone || '-'}
                                                        </div>
                                                        {appointment.no_show_count >= 3 && (
                                                            <span className="text-xs text-red-600">⚠️ {appointment.no_show_count} No-Shows</span>
                                                        )}
                                                    </div>
                                                </td>
                                                <td className="px-4 py-3">
                                                    <div className="text-sm">
                                                        {appointment.service?.name || '-'}
                                                        {appointment.service?.duration && (
                                                            <div className="text-xs text-gray-500">{appointment.service.duration} Min.</div>
                                                        )}
                                                    </div>
                                                </td>
                                                <td className="px-4 py-3 text-sm">
                                                    {appointment.staff?.name || '-'}
                                                </td>
                                                <td className="px-4 py-3">
                                                    <div className="text-sm">
                                                        {appointment.start_time}
                                                        {appointment.end_time && (
                                                            <span className="text-gray-500"> - {appointment.end_time}</span>
                                                        )}
                                                    </div>
                                                </td>
                                                <td className="px-4 py-3">
                                                    {getStatusBadge(appointment.status)}
                                                </td>
                                                <td className="px-4 py-3 text-sm">
                                                    {appointment.price ? `€${appointment.price.toFixed(2)}` : '-'}
                                                </td>
                                                <td className="px-4 py-3">
                                                    {getPaymentBadge(appointment.payment_status)}
                                                </td>
                                                <td className="px-4 py-3">
                                                    <div className="flex items-center gap-1">
                                                        {appointment.cal_event_id && (
                                                            <span className="text-green-600" title="Cal.com synchronisiert">
                                                                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                                                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                                                                </svg>
                                                            </span>
                                                        )}
                                                        {appointment.reminder_sent && (
                                                            <span className="text-blue-600" title="Erinnerung gesendet">
                                                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                                                                </svg>
                                                            </span>
                                                        )}
                                                    </div>
                                                </td>
                                                <td className="px-4 py-3">
                                                    <div className="flex items-center justify-end gap-1">
                                                        <button
                                                            onClick={() => {
                                                                setSelectedAppointment(appointment);
                                                                setShowDetailModal(true);
                                                            }}
                                                            className="p-1 text-gray-600 hover:text-gray-900"
                                                            title="Details anzeigen"
                                                        >
                                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                                            </svg>
                                                        </button>
                                                        <button
                                                            onClick={() => {
                                                                setSelectedAppointment(appointment);
                                                                setShowEditModal(true);
                                                            }}
                                                            className="p-1 text-gray-600 hover:text-gray-900"
                                                            title="Bearbeiten"
                                                        >
                                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                                            </svg>
                                                        </button>
                                                        <div className="relative group">
                                                            <button className="p-1 text-gray-600 hover:text-gray-900">
                                                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
                                                                </svg>
                                                            </button>
                                                            <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10 hidden group-hover:block">
                                                                <div className="py-1">
                                                                    {appointment.status === 'scheduled' && (
                                                                        <>
                                                                            <button
                                                                                onClick={() => handleCheckIn(appointment.id)}
                                                                                className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                                                                            >
                                                                                Check-in
                                                                            </button>
                                                                            <button
                                                                                onClick={() => handleStatusUpdate(appointment.id, 'confirmed')}
                                                                                className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                                                                            >
                                                                                Bestätigen
                                                                            </button>
                                                                        </>
                                                                    )}
                                                                    {(appointment.status === 'scheduled' || appointment.status === 'confirmed') && (
                                                                        <>
                                                                            <button
                                                                                onClick={() => handleStatusUpdate(appointment.id, 'completed')}
                                                                                className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                                                                            >
                                                                                Abschließen
                                                                            </button>
                                                                            <button
                                                                                onClick={() => handleStatusUpdate(appointment.id, 'no_show')}
                                                                                className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                                                                            >
                                                                                Nicht erschienen
                                                                            </button>
                                                                        </>
                                                                    )}
                                                                    {appointment.status !== 'cancelled' && (
                                                                        <button
                                                                            onClick={() => handleStatusUpdate(appointment.id, 'cancelled')}
                                                                            className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                                                                        >
                                                                            Stornieren
                                                                        </button>
                                                                    )}
                                                                    {!appointment.reminder_sent && appointment.status === 'scheduled' && (
                                                                        <button
                                                                            onClick={() => handleSendReminder(appointment.id)}
                                                                            className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                                                                        >
                                                                            Erinnerung senden
                                                                        </button>
                                                                    )}
                                                                    <hr className="my-1" />
                                                                    <button
                                                                        onClick={() => {
                                                                            setSelectedAppointment(appointment);
                                                                            // Open reschedule modal
                                                                        }}
                                                                        className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                                                                    >
                                                                        Umplanen
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        )}
                        
                        {/* Pagination */}
                        {totalPages > 1 && (
                            <div className="card-footer">
                                <div className="flex items-center justify-between">
                                    <div className="text-sm text-gray-700">
                                        Seite {page} von {totalPages}
                                    </div>
                                    <div className="flex gap-2">
                                        <button
                                            onClick={() => setPage(page - 1)}
                                            disabled={page === 1}
                                            className="btn btn-sm btn-secondary"
                                        >
                                            Zurück
                                        </button>
                                        <button
                                            onClick={() => setPage(page + 1)}
                                            disabled={page === totalPages}
                                            className="btn btn-sm btn-secondary"
                                        >
                                            Weiter
                                        </button>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>

                    {/* Create/Edit Modal */}
                    {(showCreateModal || showEditModal) && (
                        <AppointmentFormModal
                            appointment={showEditModal ? selectedAppointment : null}
                            companies={companies}
                            branches={branches}
                            customers={customers}
                            staff={staff}
                            services={services}
                            onClose={() => {
                                setShowCreateModal(false);
                                setShowEditModal(false);
                                setSelectedAppointment(null);
                            }}
                            onSave={() => {
                                setShowCreateModal(false);
                                setShowEditModal(false);
                                setSelectedAppointment(null);
                                loadAppointments();
                            }}
                        />
                    )}

                    {/* Detail Modal */}
                    {showDetailModal && selectedAppointment && (
                        <AppointmentDetailModal
                            appointment={selectedAppointment}
                            onClose={() => {
                                setShowDetailModal(false);
                                setSelectedAppointment(null);
                            }}
                            onEdit={() => {
                                setShowDetailModal(false);
                                setShowEditModal(true);
                            }}
                        />
                    )}
                </div>
            );
        };

        const CustomersView = () => {
            const [customers, setCustomers] = useState([]);
            const [loading, setLoading] = useState(true);
            const [page, setPage] = useState(1);
            const [totalPages, setTotalPages] = useState(1);
            const [showCreateModal, setShowCreateModal] = useState(false);
            const [showEditModal, setShowEditModal] = useState(false);
            const [showDetailModal, setShowDetailModal] = useState(false);
            const [showMergeModal, setShowMergeModal] = useState(false);
            const [showQuickBookingModal, setShowQuickBookingModal] = useState(false);
            const [showEmailModal, setShowEmailModal] = useState(false);
            const [selectedCustomer, setSelectedCustomer] = useState(null);
            const [selectedCustomers, setSelectedCustomers] = useState([]);
            const [availableTags, setAvailableTags] = useState([]);
            const [companies, setCompanies] = useState([]);
            const [branches, setBranches] = useState([]);
            const [filters, setFilters] = useState({
                search: '',
                has_appointments: '',
                date_from: '',
                date_to: '',
                tags: [],
                company_id: '',
                is_vip: '',
                portal_enabled: ''
            });
            const { showToast } = useToast();

            useEffect(() => {
                loadCustomers();
                loadFiltersData();
            }, [page, filters]);

            const loadFiltersData = async () => {
                try {
                    const [tagsResponse, companiesResponse] = await Promise.all([
                        apiCall('/customers/tags'),
                        apiCall('/companies')
                    ]);
                    setAvailableTags(tagsResponse.data || []);
                    setCompanies(companiesResponse.data || []);
                } catch (error) {
                    console.error('Error loading filter data:', error);
                }
            };

            const loadCustomers = async () => {
                setLoading(true);
                try {
                    const params = new URLSearchParams({
                        page,
                        per_page: 20,
                        ...Object.fromEntries(
                            Object.entries(filters)
                                .filter(([key, v]) => v && (Array.isArray(v) ? v.length > 0 : true))
                                .map(([k, v]) => [k, Array.isArray(v) ? v.join(',') : v])
                        )
                    });
                    
                    const response = await apiCall(`/customers?${params}`);
                    setCustomers(response.data);
                    setTotalPages(response.meta?.last_page || 1);
                } catch (error) {
                    showToast('Fehler beim Laden der Kunden', 'error');
                    console.error(error);
                } finally {
                    setLoading(false);
                }
            };

            const handleCreateCustomer = async (customerData) => {
                try {
                    await apiCall('/customers', {
                        method: 'POST',
                        body: JSON.stringify(customerData)
                    });
                    showToast('Kunde erfolgreich erstellt', 'success');
                    setShowCreateModal(false);
                    loadCustomers();
                } catch (error) {
                    showToast('Fehler beim Erstellen des Kunden', 'error');
                }
            };

            const handleUpdateCustomer = async (customerData) => {
                try {
                    await apiCall(`/customers/${selectedCustomer.id}`, {
                        method: 'PUT',
                        body: JSON.stringify(customerData)
                    });
                    showToast('Kunde erfolgreich aktualisiert', 'success');
                    setShowEditModal(false);
                    loadCustomers();
                } catch (error) {
                    showToast('Fehler beim Aktualisieren des Kunden', 'error');
                }
            };

            const handleDeleteCustomer = async (customerId) => {
                if (!confirm('Möchten Sie diesen Kunden wirklich löschen?')) return;
                
                try {
                    await apiCall(`/customers/${customerId}`, {
                        method: 'DELETE'
                    });
                    showToast('Kunde erfolgreich gelöscht', 'success');
                    loadCustomers();
                } catch (error) {
                    showToast('Fehler beim Löschen des Kunden', 'error');
                }
            };

            const handleToggleVIP = async (customerId, isVip) => {
                try {
                    await apiCall(`/customers/${customerId}/vip`, {
                        method: 'POST',
                        body: JSON.stringify({ is_vip: !isVip })
                    });
                    showToast('VIP-Status erfolgreich geändert', 'success');
                    loadCustomers();
                } catch (error) {
                    showToast('Fehler beim Ändern des VIP-Status', 'error');
                }
            };

            const handleTogglePortal = async (customerId, enabled) => {
                try {
                    await apiCall(`/customers/${customerId}/portal`, {
                        method: 'POST',
                        body: JSON.stringify({ enabled: !enabled })
                    });
                    showToast('Portal-Zugang erfolgreich geändert', 'success');
                    loadCustomers();
                } catch (error) {
                    showToast('Fehler beim Ändern des Portal-Zugangs', 'error');
                }
            };

            const handleMergeCustomers = async (targetId, sourceIds) => {
                try {
                    await apiCall(`/customers/${targetId}/merge`, {
                        method: 'POST',
                        body: JSON.stringify({ source_ids: sourceIds })
                    });
                    showToast('Kunden erfolgreich zusammengeführt', 'success');
                    setShowMergeModal(false);
                    setSelectedCustomers([]);
                    loadCustomers();
                } catch (error) {
                    showToast('Fehler beim Zusammenführen der Kunden', 'error');
                }
            };

            const handleSendEmail = async (customerId, emailData) => {
                try {
                    await apiCall(`/customers/${customerId}/email`, {
                        method: 'POST',
                        body: JSON.stringify(emailData)
                    });
                    showToast('E-Mail erfolgreich gesendet', 'success');
                    setShowEmailModal(false);
                } catch (error) {
                    showToast('Fehler beim Senden der E-Mail', 'error');
                }
            };

            const handleBulkAction = async (action) => {
                if (selectedCustomers.length === 0) {
                    showToast('Bitte wählen Sie mindestens einen Kunden aus', 'warning');
                    return;
                }

                switch (action) {
                    case 'delete':
                        if (confirm(`Möchten Sie ${selectedCustomers.length} Kunden wirklich löschen?`)) {
                            try {
                                await Promise.all(
                                    selectedCustomers.map(id => 
                                        apiCall(`/customers/${id}`, { method: 'DELETE' })
                                    )
                                );
                                showToast('Kunden erfolgreich gelöscht', 'success');
                                setSelectedCustomers([]);
                                loadCustomers();
                            } catch (error) {
                                showToast('Fehler beim Löschen der Kunden', 'error');
                            }
                        }
                        break;
                    case 'merge':
                        setShowMergeModal(true);
                        break;
                }
            };

            const getRowClassName = (customer) => {
                if (customer.is_vip) return 'table-row-vip';
                if (customer.no_show_count >= 3) return 'table-row-problem';
                return '';
            };

            return (
                <div>
                    <div className="page-header">
                        <h1 className="page-title">Kunden</h1>
                        <p className="page-subtitle">Verwalten Sie Ihre Kundendatenbank</p>
                    </div>

                    {/* Stats */}
                    <div className="stats-grid mb-6">
                        <div className="stat-card">
                            <div className="stat-value">{customers.length || 0}</div>
                            <div className="stat-label">Gesamt Kunden</div>
                        </div>
                        <div className="stat-card">
                            <div className="stat-value">
                                {customers.filter(c => c.is_vip).length || 0}
                            </div>
                            <div className="stat-label">VIP Kunden</div>
                        </div>
                        <div className="stat-card">
                            <div className="stat-value">
                                {customers.filter(c => c.appointments_count > 0).length || 0}
                            </div>
                            <div className="stat-label">Mit Terminen</div>
                        </div>
                        <div className="stat-card">
                            <div className="stat-value">
                                {customers.filter(c => c.portal_enabled).length || 0}
                            </div>
                            <div className="stat-label">Portal Aktiv</div>
                        </div>
                    </div>

                    {/* Filters */}
                    <div className="card mb-4">
                        <div className="filter-bar">
                            <input
                                type="text"
                                placeholder="Suche nach Name, E-Mail oder Telefon..."
                                className="search-box"
                                value={filters.search}
                                onChange={(e) => setFilters({...filters, search: e.target.value})}
                            />
                            
                            <select
                                className="filter-select"
                                value={filters.has_appointments}
                                onChange={(e) => setFilters({...filters, has_appointments: e.target.value})}
                            >
                                <option value="">Alle Kunden</option>
                                <option value="1">Mit Terminen</option>
                                <option value="0">Ohne Termine</option>
                            </select>

                            <select
                                className="filter-select"
                                value={filters.is_vip}
                                onChange={(e) => setFilters({...filters, is_vip: e.target.value})}
                            >
                                <option value="">VIP Status</option>
                                <option value="1">Nur VIP</option>
                                <option value="0">Nicht VIP</option>
                            </select>

                            <select
                                className="filter-select"
                                value={filters.portal_enabled}
                                onChange={(e) => setFilters({...filters, portal_enabled: e.target.value})}
                            >
                                <option value="">Portal Zugang</option>
                                <option value="1">Portal Aktiv</option>
                                <option value="0">Portal Inaktiv</option>
                            </select>

                            <select
                                className="filter-select"
                                value={filters.company_id}
                                onChange={(e) => setFilters({...filters, company_id: e.target.value})}
                            >
                                <option value="">Alle Unternehmen</option>
                                {companies.map(company => (
                                    <option key={company.id} value={company.id}>
                                        {company.name}
                                    </option>
                                ))}
                            </select>

                            <button 
                                className="btn btn-primary"
                                onClick={() => setShowCreateModal(true)}
                            >
                                <svg className="icon mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                                </svg>
                                Neuer Kunde
                            </button>
                        </div>

                        <div className="filter-bar mt-3">
                            <TagInput
                                value={filters.tags}
                                onChange={(tags) => setFilters({...filters, tags})}
                                suggestions={availableTags}
                                placeholder="Tags filtern..."
                            />

                            <input
                                type="date"
                                className="filter-input"
                                value={filters.date_from}
                                onChange={(e) => setFilters({...filters, date_from: e.target.value})}
                                placeholder="Von Datum"
                            />

                            <input
                                type="date"
                                className="filter-input"
                                value={filters.date_to}
                                onChange={(e) => setFilters({...filters, date_to: e.target.value})}
                                placeholder="Bis Datum"
                            />

                            {(filters.search || filters.tags.length > 0 || filters.company_id || 
                              filters.has_appointments || filters.is_vip || filters.portal_enabled ||
                              filters.date_from || filters.date_to) && (
                                <button 
                                    className="btn btn-secondary"
                                    onClick={() => setFilters({
                                        search: '',
                                        has_appointments: '',
                                        date_from: '',
                                        date_to: '',
                                        tags: [],
                                        company_id: '',
                                        is_vip: '',
                                        portal_enabled: ''
                                    })}
                                >
                                    Filter zurücksetzen
                                </button>
                            )}
                        </div>
                    </div>

                    {/* Bulk Actions */}
                    {selectedCustomers.length > 0 && (
                        <div className="card mb-4 p-3">
                            <div className="flex items-center justify-between">
                                <span>{selectedCustomers.length} Kunden ausgewählt</span>
                                <div className="flex gap-2">
                                    <button 
                                        className="btn btn-secondary"
                                        onClick={() => handleBulkAction('merge')}
                                    >
                                        Zusammenführen
                                    </button>
                                    <button 
                                        className="btn btn-danger"
                                        onClick={() => handleBulkAction('delete')}
                                    >
                                        Löschen
                                    </button>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Table */}
                    <div className="card">
                        <div className="table-container">
                            <table className="data-table">
                                <thead>
                                    <tr>
                                        <th style={{ width: '40px' }}>
                                            <input
                                                type="checkbox"
                                                onChange={(e) => {
                                                    if (e.target.checked) {
                                                        setSelectedCustomers(customers.map(c => c.id));
                                                    } else {
                                                        setSelectedCustomers([]);
                                                    }
                                                }}
                                                checked={selectedCustomers.length === customers.length && customers.length > 0}
                                            />
                                        </th>
                                        <th>Name</th>
                                        <th>E-Mail</th>
                                        <th>Telefon</th>
                                        <th>Unternehmen</th>
                                        <th>Filiale</th>
                                        <th>Termine</th>
                                        <th>Letzter Termin</th>
                                        <th>Tags</th>
                                        <th>Status</th>
                                        <th>Aktionen</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {loading ? (
                                        <tr>
                                            <td colSpan="11" className="text-center py-8">
                                                <div className="loading-spinner"></div>
                                            </td>
                                        </tr>
                                    ) : customers.length === 0 ? (
                                        <tr>
                                            <td colSpan="11" className="text-center py-8 text-gray-500">
                                                Keine Kunden gefunden
                                            </td>
                                        </tr>
                                    ) : (
                                        customers.map(customer => (
                                            <tr key={customer.id} className={getRowClassName(customer)}>
                                                <td>
                                                    <input
                                                        type="checkbox"
                                                        checked={selectedCustomers.includes(customer.id)}
                                                        onChange={(e) => {
                                                            if (e.target.checked) {
                                                                setSelectedCustomers([...selectedCustomers, customer.id]);
                                                            } else {
                                                                setSelectedCustomers(selectedCustomers.filter(id => id !== customer.id));
                                                            }
                                                        }}
                                                    />
                                                </td>
                                                <td>
                                                    <div className="flex items-center gap-2">
                                                        {customer.first_name} {customer.last_name}
                                                        {customer.is_vip && (
                                                            <span className="badge badge-warning">VIP</span>
                                                        )}
                                                    </div>
                                                </td>
                                                <td>{customer.email || '-'}</td>
                                                <td>{customer.phone || '-'}</td>
                                                <td>{customer.company?.name || '-'}</td>
                                                <td>{customer.branch?.name || '-'}</td>
                                                <td>
                                                    <span className={`badge ${customer.appointments_count > 0 ? 'badge-success' : 'badge-secondary'}`}>
                                                        {customer.appointments_count || 0}
                                                    </span>
                                                </td>
                                                <td>
                                                    {customer.last_appointment_at ? 
                                                        new Date(customer.last_appointment_at).toLocaleDateString('de-DE') : 
                                                        '-'
                                                    }
                                                </td>
                                                <td>
                                                    <div className="flex flex-wrap gap-1">
                                                        {customer.tags?.map(tag => (
                                                            <span key={tag} className="badge badge-info">
                                                                {tag}
                                                            </span>
                                                        ))}
                                                    </div>
                                                </td>
                                                <td>
                                                    <div className="flex items-center gap-2">
                                                        {customer.portal_enabled && (
                                                            <span className="badge badge-success">Portal</span>
                                                        )}
                                                        {customer.no_show_count >= 3 && (
                                                            <span className="badge badge-danger">
                                                                {customer.no_show_count} No-Shows
                                                            </span>
                                                        )}
                                                    </div>
                                                </td>
                                                <td>
                                                    <div className="action-buttons">
                                                        <button
                                                            className="btn-icon"
                                                            onClick={() => {
                                                                setSelectedCustomer(customer);
                                                                setShowDetailModal(true);
                                                            }}
                                                            title="Details anzeigen"
                                                        >
                                                            <svg className="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                                            </svg>
                                                        </button>
                                                        <button
                                                            className="btn-icon"
                                                            onClick={() => {
                                                                setSelectedCustomer(customer);
                                                                setShowEditModal(true);
                                                            }}
                                                            title="Bearbeiten"
                                                        >
                                                            <svg className="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                                            </svg>
                                                        </button>
                                                        <button
                                                            className="btn-icon"
                                                            onClick={() => {
                                                                setSelectedCustomer(customer);
                                                                setShowQuickBookingModal(true);
                                                            }}
                                                            title="Schnellbuchung"
                                                        >
                                                            <svg className="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                                            </svg>
                                                        </button>
                                                        <div className="relative group">
                                                            <button className="btn-icon">
                                                                <svg className="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
                                                                </svg>
                                                            </button>
                                                            <div className="dropdown-menu hidden group-hover:block">
                                                                <button
                                                                    className="dropdown-item"
                                                                    onClick={() => {
                                                                        setSelectedCustomer(customer);
                                                                        setShowEmailModal(true);
                                                                    }}
                                                                >
                                                                    E-Mail senden
                                                                </button>
                                                                <button
                                                                    className="dropdown-item"
                                                                    onClick={() => handleToggleVIP(customer.id, customer.is_vip)}
                                                                >
                                                                    {customer.is_vip ? 'VIP entfernen' : 'Als VIP markieren'}
                                                                </button>
                                                                <button
                                                                    className="dropdown-item"
                                                                    onClick={() => handleTogglePortal(customer.id, customer.portal_enabled)}
                                                                >
                                                                    {customer.portal_enabled ? 'Portal deaktivieren' : 'Portal aktivieren'}
                                                                </button>
                                                                <div className="dropdown-divider"></div>
                                                                <button
                                                                    className="dropdown-item text-red-600"
                                                                    onClick={() => handleDeleteCustomer(customer.id)}
                                                                >
                                                                    Löschen
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                        ))
                                    )}
                                </tbody>
                            </table>
                        </div>

                        {totalPages > 1 && (
                            <Pagination
                                currentPage={page}
                                totalPages={totalPages}
                                onPageChange={setPage}
                            />
                        )}
                    </div>

                    {/* Create Modal */}
                    {showCreateModal && (
                        <CustomerFormModal
                            title="Neuer Kunde"
                            customer={null}
                            companies={companies}
                            availableTags={availableTags}
                            onSubmit={handleCreateCustomer}
                            onClose={() => setShowCreateModal(false)}
                        />
                    )}

                    {/* Edit Modal */}
                    {showEditModal && selectedCustomer && (
                        <CustomerFormModal
                            title="Kunde bearbeiten"
                            customer={selectedCustomer}
                            companies={companies}
                            availableTags={availableTags}
                            onSubmit={handleUpdateCustomer}
                            onClose={() => setShowEditModal(false)}
                        />
                    )}

                    {/* Detail Modal */}
                    {showDetailModal && selectedCustomer && (
                        <CustomerDetailModal
                            customer={selectedCustomer}
                            onClose={() => setShowDetailModal(false)}
                            onEdit={() => {
                                setShowDetailModal(false);
                                setShowEditModal(true);
                            }}
                            onQuickBooking={() => {
                                setShowDetailModal(false);
                                setShowQuickBookingModal(true);
                            }}
                            onSendEmail={() => {
                                setShowDetailModal(false);
                                setShowEmailModal(true);
                            }}
                        />
                    )}

                    {/* Merge Modal */}
                    {showMergeModal && (
                        <CustomerMergeModal
                            selectedIds={selectedCustomers}
                            customers={customers.filter(c => selectedCustomers.includes(c.id))}
                            onMerge={handleMergeCustomers}
                            onClose={() => setShowMergeModal(false)}
                        />
                    )}

                    {/* Quick Booking Modal */}
                    {showQuickBookingModal && selectedCustomer && (
                        <QuickBookingModal
                            customer={selectedCustomer}
                            onClose={() => setShowQuickBookingModal(false)}
                            onSuccess={() => {
                                setShowQuickBookingModal(false);
                                showToast('Termin erfolgreich gebucht', 'success');
                            }}
                        />
                    )}

                    {/* Email Modal */}
                    {showEmailModal && selectedCustomer && (
                        <CustomerEmailModal
                            customer={selectedCustomer}
                            onSend={(emailData) => handleSendEmail(selectedCustomer.id, emailData)}
                            onClose={() => setShowEmailModal(false)}
                        />
                    )}
                </div>
            );
        };

        const CompaniesView = () => {
            const [companies, setCompanies] = useState([]);
            const [loading, setLoading] = useState(true);
            const [page, setPage] = useState(1);
            const [totalPages, setTotalPages] = useState(1);
            const [showCreateModal, setShowCreateModal] = useState(false);
            const [showEditModal, setShowEditModal] = useState(false);
            const [showDetailModal, setShowDetailModal] = useState(false);
            const [selectedCompany, setSelectedCompany] = useState(null);
            const [filters, setFilters] = useState({
                search: '',
                active: '',
                has_api_keys: ''
            });
            const { showToast } = useToast();

            useEffect(() => {
                loadCompanies();
            }, [page, filters]);

            const loadCompanies = async () => {
                setLoading(true);
                try {
                    const params = new URLSearchParams({
                        page,
                        per_page: 20,
                        ...Object.fromEntries(Object.entries(filters).filter(([key, v]) => v))
                    });
                    
                    const response = await apiCall(`/companies?${params}`);
                    setCompanies(response.data);
                    setTotalPages(response.last_page);
                } catch (error) {
                    showToast('Fehler beim Laden der Unternehmen', 'error');
                } finally {
                    setLoading(false);
                }
            };

            const handleActivateToggle = async (company) => {
                try {
                    await apiCall(`/companies/${company.id}/${company.active ? 'deactivate' : 'activate'}`, {
                        method: 'POST'
                    });
                    showToast(`Unternehmen ${company.active ? 'deaktiviert' : 'aktiviert'}`, 'success');
                    loadCompanies();
                } catch (error) {
                    showToast('Fehler beim Ändern des Status', 'error');
                }
            };

            const handleCalcomSync = async (company) => {
                try {
                    await apiCall(`/companies/${company.id}/sync-calcom`, {
                        method: 'POST'
                    });
                    showToast('Cal.com Synchronisation gestartet', 'success');
                } catch (error) {
                    showToast('Fehler bei der Cal.com Synchronisation', 'error');
                }
            };

            const handleValidateApiKeys = async (company) => {
                try {
                    const response = await apiCall(`/companies/${company.id}/validate-api-keys`, {
                        method: 'POST'
                    });
                    const failed = [];
                    if (!response.calcom) failed.push('Cal.com');
                    if (!response.retell) failed.push('Retell.ai');
                    
                    if (failed.length === 0) {
                        showToast('Alle API-Schlüssel sind gültig', 'success');
                    } else {
                        showToast(`Ungültige API-Schlüssel: ${failed.join(', ')}`, 'error');
                    }
                } catch (error) {
                    showToast('Fehler bei der API-Schlüssel Validierung', 'error');
                }
            };

            const handleViewCompany = async (company) => {
                try {
                    const details = await apiCall(`/companies/${company.id}`);
                    setSelectedCompany(details);
                    setShowDetailModal(true);
                } catch (error) {
                    showToast('Fehler beim Laden der Unternehmensdetails', 'error');
                }
            };

            const handleEditCompany = async (company) => {
                try {
                    const details = await apiCall(`/companies/${company.id}`);
                    setSelectedCompany(details);
                    setShowEditModal(true);
                } catch (error) {
                    showToast('Fehler beim Laden der Unternehmensdetails', 'error');
                }
            };

            const handleDeleteCompany = async (company) => {
                if (!confirm(`Möchten Sie das Unternehmen "${company.name}" wirklich löschen? Diese Aktion kann nicht rückgängig gemacht werden.`)) {
                    return;
                }

                try {
                    await apiCall(`/companies/${company.id}`, {
                        method: 'DELETE'
                    });
                    showToast('Unternehmen gelöscht', 'success');
                    loadCompanies();
                } catch (error) {
                    showToast('Fehler beim Löschen des Unternehmens', 'error');
                }
            };

            return (
                <>
                    <div className="page-header">
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 }}>
                            <div>
                                <h1 className="page-title">Unternehmen</h1>
                                <p className="page-subtitle">Verwalten Sie Mandanten und deren Einstellungen</p>
                            </div>
                            <button className="btn btn-primary" onClick={() => setShowCreateModal(true)}>
                                <Icon name="plus" size={20} />
                                Neues Unternehmen
                            </button>
                        </div>
                    </div>

                    {/* Filter Bar */}
                    <div className="filter-bar">
                        <div className="filter-group">
                            <input
                                type="text"
                                className="form-control"
                                placeholder="Suchen..."
                                value={filters.search}
                                onChange={(e) => setFilters({...filters, search: e.target.value})}
                                style={{ width: 250 }}
                            />
                        </div>
                        <div className="filter-group">
                            <select 
                                className="filter-select"
                                value={filters.active}
                                onChange={(e) => setFilters({...filters, active: e.target.value})}
                            >
                                <option value="">Alle Status</option>
                                <option value="1">Aktiv</option>
                                <option value="0">Inaktiv</option>
                            </select>
                        </div>
                        <div className="filter-group">
                            <select 
                                className="filter-select"
                                value={filters.has_api_keys}
                                onChange={(e) => setFilters({...filters, has_api_keys: e.target.value})}
                            >
                                <option value="">Alle API-Status</option>
                                <option value="1">Mit API-Schlüsseln</option>
                                <option value="0">Ohne API-Schlüssel</option>
                            </select>
                        </div>
                        <button className="btn btn-primary btn-sm" onClick={loadCompanies}>
                            <Icon name="filter" size={16} />
                            Filtern
                        </button>
                    </div>

                    {/* Companies Table */}
                    <div className="card">
                        <div className="table-container">
                            <table>
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>E-Mail</th>
                                        <th>Ansprechpartner</th>
                                        <th>Status</th>
                                        <th>Filialen</th>
                                        <th>Mitarbeiter</th>
                                        <th>API-Keys</th>
                                        <th>Aktionen</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {loading ? (
                                        <tr>
                                            <td colSpan="8" style={{ textAlign: 'center', padding: 40 }}>
                                                <div className="spinner"></div>
                                            </td>
                                        </tr>
                                    ) : companies.length === 0 ? (
                                        <tr>
                                            <td colSpan="8">
                                                <div className="empty-state">
                                                    <Icon name="building" size={80} className="empty-state-icon" />
                                                    <h3 className="empty-state-title">Keine Unternehmen gefunden</h3>
                                                    <p className="empty-state-text">Erstellen Sie Ihr erstes Unternehmen oder ändern Sie Ihre Filter.</p>
                                                    <button className="btn btn-primary" onClick={() => setShowCreateModal(true)}>
                                                        <Icon name="plus" size={20} />
                                                        Neues Unternehmen
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    ) : (
                                        companies.map(company => (
                                            <tr key={company.id}>
                                                <td>
                                                    <div style={{ fontWeight: 600 }}>{company.name}</div>
                                                    {company.tax_number && (
                                                        <div style={{ fontSize: 12, color: '#6b7280' }}>USt-ID: {company.tax_number}</div>
                                                    )}
                                                </td>
                                                <td>{company.email}</td>
                                                <td>
                                                    {company.contact_person && (
                                                        <div>
                                                            <div>{company.contact_person}</div>
                                                            {company.phone && (
                                                                <div style={{ fontSize: 12, color: '#6b7280' }}>{company.phone}</div>
                                                            )}
                                                        </div>
                                                    )}
                                                </td>
                                                <td>
                                                    <span className={`badge badge-${company.active ? 'success' : 'gray'}`}>
                                                        {company.active ? 'Aktiv' : 'Inaktiv'}
                                                    </span>
                                                </td>
                                                <td>
                                                    <span className="badge badge-gray">
                                                        {company.branches_count || 0} Filialen
                                                    </span>
                                                </td>
                                                <td>
                                                    <span className="badge badge-gray">
                                                        {company.staff_count || 0} Mitarbeiter
                                                    </span>
                                                </td>
                                                <td>
                                                    <div style={{ display: 'flex', gap: 4 }}>
                                                        {company.calcom_api_key && (
                                                            <span className="badge badge-primary" title="Cal.com API Key vorhanden">
                                                                <Icon name="calendar" size={12} />
                                                            </span>
                                                        )}
                                                        {company.retell_api_key && (
                                                            <span className="badge badge-primary" title="Retell.ai API Key vorhanden">
                                                                <Icon name="phone" size={12} />
                                                            </span>
                                                        )}
                                                        {!company.calcom_api_key && !company.retell_api_key && (
                                                            <span className="badge badge-warning">Keine</span>
                                                        )}
                                                    </div>
                                                </td>
                                                <td>
                                                    <div style={{ display: 'flex', gap: 4 }}>
                                                        <button 
                                                            className="btn btn-sm btn-secondary"
                                                            onClick={() => handleViewCompany(company)}
                                                            title="Details anzeigen"
                                                        >
                                                            <Icon name="eye" size={16} />
                                                        </button>
                                                        <button 
                                                            className="btn btn-sm btn-secondary"
                                                            onClick={() => handleEditCompany(company)}
                                                            title="Bearbeiten"
                                                        >
                                                            <Icon name="edit" size={16} />
                                                        </button>
                                                        <button 
                                                            className={`btn btn-sm ${company.active ? 'btn-secondary' : 'btn-success'}`}
                                                            onClick={() => handleActivateToggle(company)}
                                                            title={company.active ? 'Deaktivieren' : 'Aktivieren'}
                                                        >
                                                            <Icon name={company.active ? 'pause' : 'play'} size={16} />
                                                        </button>
                                                        {company.calcom_api_key && (
                                                            <button 
                                                                className="btn btn-sm btn-secondary"
                                                                onClick={() => handleCalcomSync(company)}
                                                                title="Cal.com synchronisieren"
                                                            >
                                                                <Icon name="refresh-cw" size={16} />
                                                            </button>
                                                        )}
                                                        <button 
                                                            className="btn btn-sm btn-secondary"
                                                            onClick={() => handleValidateApiKeys(company)}
                                                            title="API-Schlüssel validieren"
                                                        >
                                                            <Icon name="key" size={16} />
                                                        </button>
                                                        <button 
                                                            className="btn btn-sm btn-danger"
                                                            onClick={() => handleDeleteCompany(company)}
                                                            title="Löschen"
                                                        >
                                                            <Icon name="trash-2" size={16} />
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        ))
                                    )}
                                </tbody>
                            </table>
                        </div>

                        {/* Pagination */}
                        {totalPages > 1 && (
                            <div style={{ padding: 20, display: 'flex', justifyContent: 'center', gap: 8 }}>
                                <button 
                                    className="btn btn-secondary btn-sm"
                                    onClick={() => setPage(Math.max(1, page - 1))}
                                    disabled={page === 1}
                                >
                                    <Icon name="chevron-left" size={16} />
                                </button>
                                <span style={{ padding: '8px 16px' }}>
                                    Seite {page} von {totalPages}
                                </span>
                                <button 
                                    className="btn btn-secondary btn-sm"
                                    onClick={() => setPage(Math.min(totalPages, page + 1))}
                                    disabled={page === totalPages}
                                >
                                    <Icon name="chevron-right" size={16} />
                                </button>
                            </div>
                        )}
                    </div>

                    {/* Create/Edit Modal */}
                    {(showCreateModal || showEditModal) && (
                        <CompanyFormModal 
                            company={showEditModal ? selectedCompany : null}
                            onClose={() => {
                                setShowCreateModal(false);
                                setShowEditModal(false);
                                setSelectedCompany(null);
                            }}
                            onSave={() => {
                                setShowCreateModal(false);
                                setShowEditModal(false);
                                setSelectedCompany(null);
                                loadCompanies();
                            }}
                        />
                    )}

                    {/* Detail Modal */}
                    {showDetailModal && selectedCompany && (
                        <CompanyDetailModal 
                            company={selectedCompany}
                            onClose={() => {
                                setShowDetailModal(false);
                                setSelectedCompany(null);
                            }}
                            onEdit={() => {
                                setShowDetailModal(false);
                                setShowEditModal(true);
                            }}
                        />
                    )}
                </>
            );
        };

        // Company Form Modal Component (Create/Edit)
        const CompanyFormModal = ({ company, onClose, onSave }) => {
            const [currentStep, setCurrentStep] = useState(1);
            const [formData, setFormData] = useState({
                // Step 1: Basic Data
                name: company?.name || '',
                email: company?.email || '',
                phone: company?.phone || '',
                tax_number: company?.tax_number || '',
                street: company?.street || '',
                postal_code: company?.postal_code || '',
                city: company?.city || '',
                country: company?.country || 'Deutschland',
                contact_person: company?.contact_person || '',
                active: company?.active !== undefined ? company.active : true,
                
                // Step 2: Calendar & Integration
                calcom_api_key: company?.calcom_api_key || '',
                calcom_team_slug: company?.calcom_team_slug || '',
                retell_api_key: company?.retell_api_key || '',
                retell_agent_id: company?.retell_agent_id || '',
                
                // Step 3: Notifications
                notification_emails: company?.notification_emails || [''],
                enable_sms_notifications: company?.enable_sms_notifications || false,
                enable_whatsapp_notifications: company?.enable_whatsapp_notifications || false,
                sms_provider: company?.sms_provider || '',
                whatsapp_provider: company?.whatsapp_provider || '',
                
                // Step 4: Business Hours
                working_hours: company?.working_hours || {
                    monday: { enabled: true, start: '09:00', end: '17:00' },
                    tuesday: { enabled: true, start: '09:00', end: '17:00' },
                    wednesday: { enabled: true, start: '09:00', end: '17:00' },
                    thursday: { enabled: true, start: '09:00', end: '17:00' },
                    friday: { enabled: true, start: '09:00', end: '17:00' },
                    saturday: { enabled: false, start: '09:00', end: '13:00' },
                    sunday: { enabled: false, start: '09:00', end: '13:00' }
                }
            });
            const [loading, setLoading] = useState(false);
            const [errors, setErrors] = useState({});
            const { showToast } = useToast();

            const steps = [
                { number: 1, title: 'Stammdaten' },
                { number: 2, title: 'Kalender & Integration' },
                { number: 3, title: 'Benachrichtigungen' },
                { number: 4, title: 'Öffnungszeiten' }
            ];

            const validateStep = (step) => {
                const newErrors = {};
                
                switch (step) {
                    case 1:
                        if (!formData.name) newErrors.name = 'Name ist erforderlich';
                        if (!formData.email) newErrors.email = 'E-Mail ist erforderlich';
                        if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
                            newErrors.email = 'Ungültige E-Mail-Adresse';
                        }
                        break;
                    case 2:
                        // Optional validation for API keys
                        break;
                    case 3:
                        // Validate notification emails
                        formData.notification_emails.forEach((email, index) => {
                            if (email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
                                newErrors[`notification_email_${index}`] = 'Ungültige E-Mail-Adresse';
                            }
                        });
                        break;
                    case 4:
                        // Validate working hours
                        break;
                }
                
                setErrors(newErrors);
                return Object.keys(newErrors).length === 0;
            };

            const handleNext = () => {
                if (validateStep(currentStep)) {
                    setCurrentStep(currentStep + 1);
                }
            };

            const handlePrevious = () => {
                setCurrentStep(currentStep - 1);
            };

            const handleSubmit = async () => {
                if (!validateStep(currentStep)) return;

                setLoading(true);
                try {
                    const method = company ? 'PUT' : 'POST';
                    const endpoint = company ? `/companies/${company.id}` : '/companies';
                    
                    await apiCall(endpoint, {
                        method,
                        body: JSON.stringify(formData)
                    });
                    
                    showToast(`Unternehmen ${company ? 'aktualisiert' : 'erstellt'}`, 'success');
                    onSave();
                } catch (error) {
                    showToast(`Fehler beim ${company ? 'Aktualisieren' : 'Erstellen'} des Unternehmens`, 'error');
                } finally {
                    setLoading(false);
                }
            };

            const updateFormData = (field, value) => {
                setFormData({ ...formData, [field]: value });
                // Clear error for this field
                if (errors[field]) {
                    const newErrors = { ...errors };
                    delete newErrors[field];
                    setErrors(newErrors);
                }
            };

            const addNotificationEmail = () => {
                setFormData({
                    ...formData,
                    notification_emails: [...formData.notification_emails, '']
                });
            };

            const removeNotificationEmail = (index) => {
                const emails = [...formData.notification_emails];
                emails.splice(index, 1);
                setFormData({ ...formData, notification_emails: emails });
            };

            const updateNotificationEmail = (index, value) => {
                const emails = [...formData.notification_emails];
                emails[index] = value;
                setFormData({ ...formData, notification_emails: emails });
            };

            const updateWorkingHours = (day, field, value) => {
                setFormData({
                    ...formData,
                    working_hours: {
                        ...formData.working_hours,
                        [day]: {
                            ...formData.working_hours[day],
                            [field]: value
                        }
                    }
                });
            };

            const renderStepContent = () => {
                switch (currentStep) {
                    case 1:
                        return (
                            <div>
                                <h3 style={{ marginBottom: 24 }}>Stammdaten</h3>
                                <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 20 }}>
                                    <div className="form-group">
                                        <label className="form-label">
                                            Unternehmensname *
                                        </label>
                                        <input
                                            type="text"
                                            className="form-control"
                                            value={formData.name}
                                            onChange={(e) => updateFormData('name', e.target.value)}
                                            style={{ borderColor: errors.name ? '#ef4444' : '' }}
                                        />
                                        {errors.name && <div style={{ color: '#ef4444', fontSize: 12, marginTop: 4 }}>{errors.name}</div>}
                                    </div>
                                    
                                    <div className="form-group">
                                        <label className="form-label">
                                            E-Mail *
                                        </label>
                                        <input
                                            type="email"
                                            className="form-control"
                                            value={formData.email}
                                            onChange={(e) => updateFormData('email', e.target.value)}
                                            style={{ borderColor: errors.email ? '#ef4444' : '' }}
                                        />
                                        {errors.email && <div style={{ color: '#ef4444', fontSize: 12, marginTop: 4 }}>{errors.email}</div>}
                                    </div>
                                    
                                    <div className="form-group">
                                        <label className="form-label">Telefon</label>
                                        <input
                                            type="tel"
                                            className="form-control"
                                            value={formData.phone}
                                            onChange={(e) => updateFormData('phone', e.target.value)}
                                        />
                                    </div>
                                    
                                    <div className="form-group">
                                        <label className="form-label">Steuernummer / USt-ID</label>
                                        <input
                                            type="text"
                                            className="form-control"
                                            value={formData.tax_number}
                                            onChange={(e) => updateFormData('tax_number', e.target.value)}
                                        />
                                    </div>
                                    
                                    <div className="form-group">
                                        <label className="form-label">Ansprechpartner</label>
                                        <input
                                            type="text"
                                            className="form-control"
                                            value={formData.contact_person}
                                            onChange={(e) => updateFormData('contact_person', e.target.value)}
                                        />
                                    </div>
                                    
                                    <div className="form-group">
                                        <label className="form-label">Status</label>
                                        <select
                                            className="form-control"
                                            value={formData.active ? '1' : '0'}
                                            onChange={(e) => updateFormData('active', e.target.value === '1')}
                                        >
                                            <option value="1">Aktiv</option>
                                            <option value="0">Inaktiv</option>
                                        </select>
                                    </div>
                                </div>
                                
                                <h4 style={{ marginTop: 32, marginBottom: 16 }}>Adresse</h4>
                                <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', gap: 20 }}>
                                    <div className="form-group">
                                        <label className="form-label">Straße und Hausnummer</label>
                                        <input
                                            type="text"
                                            className="form-control"
                                            value={formData.street}
                                            onChange={(e) => updateFormData('street', e.target.value)}
                                        />
                                    </div>
                                    
                                    <div className="form-group">
                                        <label className="form-label">PLZ</label>
                                        <input
                                            type="text"
                                            className="form-control"
                                            value={formData.postal_code}
                                            onChange={(e) => updateFormData('postal_code', e.target.value)}
                                        />
                                    </div>
                                    
                                    <div className="form-group">
                                        <label className="form-label">Stadt</label>
                                        <input
                                            type="text"
                                            className="form-control"
                                            value={formData.city}
                                            onChange={(e) => updateFormData('city', e.target.value)}
                                        />
                                    </div>
                                </div>
                            </div>
                        );
                        
                    case 2:
                        return (
                            <div>
                                <h3 style={{ marginBottom: 24 }}>Kalender & Integration</h3>
                                
                                <div style={{ marginBottom: 32 }}>
                                    <h4 style={{ marginBottom: 16 }}>Cal.com Integration</h4>
                                    <div style={{ display: 'grid', gap: 20 }}>
                                        <div className="form-group">
                                            <label className="form-label">Cal.com API-Schlüssel</label>
                                            <input
                                                type="text"
                                                className="form-control"
                                                value={formData.calcom_api_key}
                                                onChange={(e) => updateFormData('calcom_api_key', e.target.value)}
                                                placeholder="cal_live_..."
                                            />
                                        </div>
                                        
                                        <div className="form-group">
                                            <label className="form-label">Cal.com Team Slug</label>
                                            <input
                                                type="text"
                                                className="form-control"
                                                value={formData.calcom_team_slug}
                                                onChange={(e) => updateFormData('calcom_team_slug', e.target.value)}
                                                placeholder="mein-team"
                                            />
                                        </div>
                                    </div>
                                </div>
                                
                                <div>
                                    <h4 style={{ marginBottom: 16 }}>Retell.ai Integration</h4>
                                    <div style={{ display: 'grid', gap: 20 }}>
                                        <div className="form-group">
                                            <label className="form-label">Retell.ai API-Schlüssel</label>
                                            <input
                                                type="text"
                                                className="form-control"
                                                value={formData.retell_api_key}
                                                onChange={(e) => updateFormData('retell_api_key', e.target.value)}
                                                placeholder="key_..."
                                            />
                                        </div>
                                        
                                        <div className="form-group">
                                            <label className="form-label">Retell.ai Agent ID</label>
                                            <input
                                                type="text"
                                                className="form-control"
                                                value={formData.retell_agent_id}
                                                onChange={(e) => updateFormData('retell_agent_id', e.target.value)}
                                                placeholder="agent_..."
                                            />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        );
                        
                    case 3:
                        return (
                            <div>
                                <h3 style={{ marginBottom: 24 }}>Benachrichtigungen</h3>
                                
                                <div style={{ marginBottom: 32 }}>
                                    <h4 style={{ marginBottom: 16 }}>E-Mail Benachrichtigungen</h4>
                                    <p style={{ color: '#6b7280', marginBottom: 16 }}>
                                        Geben Sie die E-Mail-Adressen an, die bei neuen Terminen benachrichtigt werden sollen.
                                    </p>
                                    {formData.notification_emails.map((email, index) => (
                                        <div key={index} style={{ display: 'flex', gap: 8, marginBottom: 12 }}>
                                            <input
                                                type="email"
                                                className="form-control"
                                                value={email}
                                                onChange={(e) => updateNotificationEmail(index, e.target.value)}
                                                placeholder="email@beispiel.de"
                                                style={{ borderColor: errors[`notification_email_${index}`] ? '#ef4444' : '' }}
                                            />
                                            {formData.notification_emails.length > 1 && (
                                                <button
                                                    className="btn btn-secondary"
                                                    onClick={() => removeNotificationEmail(index)}
                                                >
                                                    <Icon name="x" size={20} />
                                                </button>
                                            )}
                                        </div>
                                    ))}
                                    <button
                                        className="btn btn-secondary btn-sm"
                                        onClick={addNotificationEmail}
                                    >
                                        <Icon name="plus" size={16} />
                                        E-Mail hinzufügen
                                    </button>
                                </div>
                                
                                <div>
                                    <h4 style={{ marginBottom: 16 }}>SMS & WhatsApp</h4>
                                    <div style={{ display: 'grid', gap: 20 }}>
                                        <div className="checkbox-wrapper">
                                            <input
                                                type="checkbox"
                                                id="enable_sms"
                                                checked={formData.enable_sms_notifications}
                                                onChange={(e) => updateFormData('enable_sms_notifications', e.target.checked)}
                                            />
                                            <label htmlFor="enable_sms" style={{ marginLeft: 8 }}>
                                                SMS-Benachrichtigungen aktivieren
                                            </label>
                                        </div>
                                        
                                        {formData.enable_sms_notifications && (
                                            <div className="form-group">
                                                <label className="form-label">SMS Provider</label>
                                                <select
                                                    className="form-control"
                                                    value={formData.sms_provider}
                                                    onChange={(e) => updateFormData('sms_provider', e.target.value)}
                                                >
                                                    <option value="">Bitte wählen</option>
                                                    <option value="twilio">Twilio</option>
                                                    <option value="vonage">Vonage</option>
                                                    <option value="messagebird">MessageBird</option>
                                                </select>
                                            </div>
                                        )}
                                        
                                        <div className="checkbox-wrapper">
                                            <input
                                                type="checkbox"
                                                id="enable_whatsapp"
                                                checked={formData.enable_whatsapp_notifications}
                                                onChange={(e) => updateFormData('enable_whatsapp_notifications', e.target.checked)}
                                            />
                                            <label htmlFor="enable_whatsapp" style={{ marginLeft: 8 }}>
                                                WhatsApp-Benachrichtigungen aktivieren
                                            </label>
                                        </div>
                                        
                                        {formData.enable_whatsapp_notifications && (
                                            <div className="form-group">
                                                <label className="form-label">WhatsApp Provider</label>
                                                <select
                                                    className="form-control"
                                                    value={formData.whatsapp_provider}
                                                    onChange={(e) => updateFormData('whatsapp_provider', e.target.value)}
                                                >
                                                    <option value="">Bitte wählen</option>
                                                    <option value="twilio">Twilio</option>
                                                    <option value="messagebird">MessageBird</option>
                                                    <option value="whatsapp_business">WhatsApp Business API</option>
                                                </select>
                                            </div>
                                        )}
                                    </div>
                                </div>
                            </div>
                        );
                        
                    case 4:
                        return (
                            <div>
                                <h3 style={{ marginBottom: 24 }}>Öffnungszeiten</h3>
                                <p style={{ color: '#6b7280', marginBottom: 24 }}>
                                    Definieren Sie die regulären Geschäftszeiten. Diese können später für einzelne Filialen überschrieben werden.
                                </p>
                                
                                <div className="working-hours-grid">
                                    {Object.entries({
                                        monday: 'Montag',
                                        tuesday: 'Dienstag',
                                        wednesday: 'Mittwoch',
                                        thursday: 'Donnerstag',
                                        friday: 'Freitag',
                                        saturday: 'Samstag',
                                        sunday: 'Sonntag'
                                    }).map(([day, label]) => (
                                        <div key={day} className="working-hours-day">
                                            <div className="checkbox-wrapper">
                                                <input
                                                    type="checkbox"
                                                    id={`day_${day}`}
                                                    checked={formData.working_hours[day].enabled}
                                                    onChange={(e) => updateWorkingHours(day, 'enabled', e.target.checked)}
                                                />
                                                <label htmlFor={`day_${day}`} style={{ marginLeft: 8 }}>
                                                    {label}
                                                </label>
                                            </div>
                                            
                                            {formData.working_hours[day].enabled && (
                                                <div className="working-hours-times">
                                                    <div className="time-picker">
                                                        <input
                                                            type="time"
                                                            className="form-control time-input"
                                                            value={formData.working_hours[day].start}
                                                            onChange={(e) => updateWorkingHours(day, 'start', e.target.value)}
                                                        />
                                                        <span>bis</span>
                                                        <input
                                                            type="time"
                                                            className="form-control time-input"
                                                            value={formData.working_hours[day].end}
                                                            onChange={(e) => updateWorkingHours(day, 'end', e.target.value)}
                                                        />
                                                    </div>
                                                </div>
                                            )}
                                            
                                            {!formData.working_hours[day].enabled && (
                                                <div style={{ color: '#9ca3af' }}>Geschlossen</div>
                                            )}
                                        </div>
                                    ))}
                                </div>
                            </div>
                        );
                }
            };

            return (
                <div className="modal-overlay" onClick={(e) => e.target === e.currentTarget && onClose()}>
                    <div className="modal" style={{ maxWidth: 900 }}>
                        <div className="modal-header">
                            <h2 className="modal-title">
                                {company ? 'Unternehmen bearbeiten' : 'Neues Unternehmen'}
                            </h2>
                            <button className="modal-close" onClick={onClose}>
                                <Icon name="x" size={24} />
                            </button>
                        </div>

                        <div className="wizard-container">
                            <div className="wizard-steps">
                                {steps.map((step, index) => (
                                    <div
                                        key={step.number}
                                        className={`wizard-step ${currentStep === step.number ? 'active' : ''} ${currentStep > step.number ? 'completed' : ''}`}
                                    >
                                        <div className="wizard-step-number">
                                            {currentStep > step.number ? (
                                                <Icon name="check" size={20} />
                                            ) : (
                                                step.number
                                            )}
                                        </div>
                                        <div className="wizard-step-title">{step.title}</div>
                                    </div>
                                ))}
                            </div>

                            <div className="wizard-content">
                                {renderStepContent()}
                            </div>

                            <div className="wizard-buttons">
                                <button
                                    className="btn btn-secondary"
                                    onClick={currentStep === 1 ? onClose : handlePrevious}
                                >
                                    {currentStep === 1 ? 'Abbrechen' : 'Zurück'}
                                </button>
                                <button
                                    className="btn btn-primary"
                                    onClick={currentStep === steps.length ? handleSubmit : handleNext}
                                    disabled={loading}
                                >
                                    {loading ? (
                                        <div className="spinner" style={{ width: 20, height: 20 }}></div>
                                    ) : currentStep === steps.length ? (
                                        company ? 'Speichern' : 'Erstellen'
                                    ) : (
                                        'Weiter'
                                    )}
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            );
        };

        // Company Detail Modal Component
        const CompanyDetailModal = ({ company, onClose, onEdit }) => {
            const [activeTab, setActiveTab] = useState('overview');
            const [stats, setStats] = useState(null);
            const [loading, setLoading] = useState(true);
            const { showToast } = useToast();

            useEffect(() => {
                loadCompanyStats();
            }, [company.id]);

            const loadCompanyStats = async () => {
                try {
                    const statsData = await apiCall(`/companies/${company.id}/stats`);
                    setStats(statsData);
                } catch (error) {
                    showToast('Fehler beim Laden der Statistiken', 'error');
                } finally {
                    setLoading(false);
                }
            };

            const tabs = [
                { id: 'overview', label: 'Übersicht', icon: 'info' },
                { id: 'branches', label: 'Filialen', icon: 'map-pin' },
                { id: 'staff', label: 'Mitarbeiter', icon: 'users' },
                { id: 'integrations', label: 'Integrationen', icon: 'plug' },
                { id: 'notifications', label: 'Benachrichtigungen', icon: 'bell' },
                { id: 'activity', label: 'Aktivität', icon: 'activity' }
            ];

            const renderTabContent = () => {
                switch (activeTab) {
                    case 'overview':
                        return (
                            <div>
                                <div className="stats-grid" style={{ marginBottom: 32 }}>
                                    <div className="stat-card">
                                        <div className="stat-icon blue">
                                            <Icon name="phone" size={24} />
                                        </div>
                                        <div className="stat-value">{stats?.total_calls || 0}</div>
                                        <div className="stat-label">Anrufe gesamt</div>
                                    </div>
                                    <div className="stat-card">
                                        <div className="stat-icon green">
                                            <Icon name="calendar" size={24} />
                                        </div>
                                        <div className="stat-value">{stats?.total_appointments || 0}</div>
                                        <div className="stat-label">Termine gebucht</div>
                                    </div>
                                    <div className="stat-card">
                                        <div className="stat-icon yellow">
                                            <Icon name="users" size={24} />
                                        </div>
                                        <div className="stat-value">{stats?.total_customers || 0}</div>
                                        <div className="stat-label">Kunden</div>
                                    </div>
                                    <div className="stat-card">
                                        <div className="stat-icon red">
                                            <Icon name="euro" size={24} />
                                        </div>
                                        <div className="stat-value">€{(stats?.total_revenue || 0).toFixed(2)}</div>
                                        <div className="stat-label">Umsatz</div>
                                    </div>
                                </div>

                                <div className="detail-section">
                                    <h3 className="detail-section-title">Stammdaten</h3>
                                    <div className="detail-grid">
                                        <div className="detail-item">
                                            <div className="detail-label">Unternehmensname</div>
                                            <div className="detail-value">{company.name}</div>
                                        </div>
                                        <div className="detail-item">
                                            <div className="detail-label">E-Mail</div>
                                            <div className="detail-value">{company.email}</div>
                                        </div>
                                        <div className="detail-item">
                                            <div className="detail-label">Telefon</div>
                                            <div className="detail-value">{company.phone || '-'}</div>
                                        </div>
                                        <div className="detail-item">
                                            <div className="detail-label">Steuernummer</div>
                                            <div className="detail-value">{company.tax_number || '-'}</div>
                                        </div>
                                        <div className="detail-item">
                                            <div className="detail-label">Ansprechpartner</div>
                                            <div className="detail-value">{company.contact_person || '-'}</div>
                                        </div>
                                        <div className="detail-item">
                                            <div className="detail-label">Status</div>
                                            <div className="detail-value">
                                                <span className={`badge badge-${company.active ? 'success' : 'gray'}`}>
                                                    {company.active ? 'Aktiv' : 'Inaktiv'}
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div className="detail-section">
                                    <h3 className="detail-section-title">Adresse</h3>
                                    <div className="detail-grid">
                                        <div className="detail-item">
                                            <div className="detail-label">Straße</div>
                                            <div className="detail-value">{company.street || '-'}</div>
                                        </div>
                                        <div className="detail-item">
                                            <div className="detail-label">PLZ / Stadt</div>
                                            <div className="detail-value">
                                                {company.postal_code && company.city ? 
                                                    `${company.postal_code} ${company.city}` : '-'}
                                            </div>
                                        </div>
                                        <div className="detail-item">
                                            <div className="detail-label">Land</div>
                                            <div className="detail-value">{company.country || 'Deutschland'}</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        );

                    case 'branches':
                        return (
                            <div>
                                <h3 className="detail-section-title">Filialen ({company.branches?.length || 0})</h3>
                                {company.branches && company.branches.length > 0 ? (
                                    <div className="table-container">
                                        <table>
                                            <thead>
                                                <tr>
                                                    <th>Name</th>
                                                    <th>Adresse</th>
                                                    <th>Telefon</th>
                                                    <th>Status</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {company.branches.map(branch => (
                                                    <tr key={branch.id}>
                                                        <td>{branch.name}</td>
                                                        <td>{branch.address}</td>
                                                        <td>{branch.phone}</td>
                                                        <td>
                                                            <span className={`badge badge-${branch.active ? 'success' : 'gray'}`}>
                                                                {branch.active ? 'Aktiv' : 'Inaktiv'}
                                                            </span>
                                                        </td>
                                                    </tr>
                                                ))}
                                            </tbody>
                                        </table>
                                    </div>
                                ) : (
                                    <div className="empty-state" style={{ padding: 40 }}>
                                        <Icon name="map-pin" size={48} className="empty-state-icon" />
                                        <p>Keine Filialen vorhanden</p>
                                    </div>
                                )}
                            </div>
                        );

                    case 'staff':
                        return (
                            <div>
                                <h3 className="detail-section-title">Mitarbeiter ({company.staff?.length || 0})</h3>
                                {company.staff && company.staff.length > 0 ? (
                                    <div className="table-container">
                                        <table>
                                            <thead>
                                                <tr>
                                                    <th>Name</th>
                                                    <th>E-Mail</th>
                                                    <th>Telefon</th>
                                                    <th>Filiale</th>
                                                    <th>Status</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {company.staff.map(member => (
                                                    <tr key={member.id}>
                                                        <td>{member.name}</td>
                                                        <td>{member.email}</td>
                                                        <td>{member.phone}</td>
                                                        <td>{member.branch?.name || '-'}</td>
                                                        <td>
                                                            <span className={`badge badge-${member.active ? 'success' : 'gray'}`}>
                                                                {member.active ? 'Aktiv' : 'Inaktiv'}
                                                            </span>
                                                        </td>
                                                    </tr>
                                                ))}
                                            </tbody>
                                        </table>
                                    </div>
                                ) : (
                                    <div className="empty-state" style={{ padding: 40 }}>
                                        <Icon name="users" size={48} className="empty-state-icon" />
                                        <p>Keine Mitarbeiter vorhanden</p>
                                    </div>
                                )}
                            </div>
                        );

                    case 'integrations':
                        return (
                            <div>
                                <div className="detail-section">
                                    <h3 className="detail-section-title">Cal.com Integration</h3>
                                    <div className="detail-grid">
                                        <div className="detail-item">
                                            <div className="detail-label">API-Schlüssel</div>
                                            <div className="detail-value">
                                                {company.calcom_api_key ? 
                                                    <span className="badge badge-success">Konfiguriert</span> : 
                                                    <span className="badge badge-warning">Nicht konfiguriert</span>
                                                }
                                            </div>
                                        </div>
                                        <div className="detail-item">
                                            <div className="detail-label">Team Slug</div>
                                            <div className="detail-value">{company.calcom_team_slug || '-'}</div>
                                        </div>
                                    </div>
                                </div>

                                <div className="detail-section">
                                    <h3 className="detail-section-title">Retell.ai Integration</h3>
                                    <div className="detail-grid">
                                        <div className="detail-item">
                                            <div className="detail-label">API-Schlüssel</div>
                                            <div className="detail-value">
                                                {company.retell_api_key ? 
                                                    <span className="badge badge-success">Konfiguriert</span> : 
                                                    <span className="badge badge-warning">Nicht konfiguriert</span>
                                                }
                                            </div>
                                        </div>
                                        <div className="detail-item">
                                            <div className="detail-label">Agent ID</div>
                                            <div className="detail-value">{company.retell_agent_id || '-'}</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        );

                    case 'notifications':
                        return (
                            <div>
                                <div className="detail-section">
                                    <h3 className="detail-section-title">E-Mail Benachrichtigungen</h3>
                                    {company.notification_emails && company.notification_emails.length > 0 ? (
                                        <ul style={{ listStyle: 'none', padding: 0 }}>
                                            {company.notification_emails.map((email, index) => (
                                                <li key={index} style={{ padding: '8px 0' }}>
                                                    <Icon name="mail" size={16} style={{ marginRight: 8, color: '#6b7280' }} />
                                                    {email}
                                                </li>
                                            ))}
                                        </ul>
                                    ) : (
                                        <p style={{ color: '#6b7280' }}>Keine E-Mail-Benachrichtigungen konfiguriert</p>
                                    )}
                                </div>

                                <div className="detail-section">
                                    <h3 className="detail-section-title">SMS & WhatsApp</h3>
                                    <div className="detail-grid">
                                        <div className="detail-item">
                                            <div className="detail-label">SMS-Benachrichtigungen</div>
                                            <div className="detail-value">
                                                {company.enable_sms_notifications ? 
                                                    <span className="badge badge-success">Aktiviert</span> : 
                                                    <span className="badge badge-gray">Deaktiviert</span>
                                                }
                                            </div>
                                        </div>
                                        <div className="detail-item">
                                            <div className="detail-label">WhatsApp-Benachrichtigungen</div>
                                            <div className="detail-value">
                                                {company.enable_whatsapp_notifications ? 
                                                    <span className="badge badge-success">Aktiviert</span> : 
                                                    <span className="badge badge-gray">Deaktiviert</span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        );

                    case 'activity':
                        return (
                            <div>
                                <h3 className="detail-section-title">Letzte Aktivitäten</h3>
                                <div className="timeline">
                                    <div className="timeline-item">
                                        <div className="timeline-marker"></div>
                                        <div className="timeline-content">
                                            <div className="timeline-date">Heute, 14:32</div>
                                            <div className="timeline-title">API-Schlüssel aktualisiert</div>
                                            <div className="timeline-description">Cal.com API-Schlüssel wurde geändert</div>
                                        </div>
                                    </div>
                                    <div className="timeline-item">
                                        <div className="timeline-marker"></div>
                                        <div className="timeline-content">
                                            <div className="timeline-date">Gestern, 09:15</div>
                                            <div className="timeline-title">Neue Filiale hinzugefügt</div>
                                            <div className="timeline-description">Filiale "Berlin Mitte" wurde erstellt</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        );

                    default:
                        return null;
                }
            };

            return (
                <div className="modal-overlay" onClick={(e) => e.target === e.currentTarget && onClose()}>
                    <div className="modal" style={{ maxWidth: 1000 }}>
                        <div className="modal-header">
                            <h2 className="modal-title">{company.name}</h2>
                            <div style={{ display: 'flex', gap: 8 }}>
                                <button className="btn btn-primary btn-sm" onClick={onEdit}>
                                    <Icon name="edit" size={16} />
                                    Bearbeiten
                                </button>
                                <button className="modal-close" onClick={onClose}>
                                    <Icon name="x" size={24} />
                                </button>
                            </div>
                        </div>

                        {/* Tabs */}
                        <div style={{ display: 'flex', gap: 24, borderBottom: '2px solid #e5e7eb', marginBottom: 24 }}>
                            {tabs.map(tab => (
                                <button
                                    key={tab.id}
                                    onClick={() => setActiveTab(tab.id)}
                                    style={{
                                        padding: '12px 0',
                                        background: 'none',
                                        border: 'none',
                                        borderBottom: activeTab === tab.id ? '2px solid #3b82f6' : '2px solid transparent',
                                        color: activeTab === tab.id ? '#3b82f6' : '#6b7280',
                                        fontWeight: activeTab === tab.id ? 600 : 400,
                                        cursor: 'pointer',
                                        display: 'flex',
                                        alignItems: 'center',
                                        gap: 8,
                                        marginBottom: -2
                                    }}
                                >
                                    <Icon name={tab.icon} size={16} />
                                    {tab.label}
                                </button>
                            ))}
                        </div>

                        {/* Tab Content */}
                        {loading && activeTab === 'overview' ? (
                            <div style={{ padding: 40, textAlign: 'center' }}>
                                <div className="spinner"></div>
                            </div>
                        ) : (
                            renderTabContent()
                        )}
                    </div>
                </div>
            );
        };

        const BranchesView = () => (
            <div>
                <div className="page-header">
                    <h1 className="page-title">Filialen</h1>
                    <p className="page-subtitle">Verwalten Sie alle Standorte und Filialen Ihrer Unternehmen</p>
                </div>

                {/* Stats Overview */}
                <div className="stats-grid" style={{ marginBottom: 32 }}>
                    <div className="stat-card">
                        <div className="stat-icon blue">
                            <Icon name="map-pin" size={24} />
                        </div>
                        <div className="stat-value">12</div>
                        <div className="stat-label">Aktive Filialen</div>
                    </div>
                    <div className="stat-card">
                        <div className="stat-icon green">
                            <Icon name="users" size={24} />
                        </div>
                        <div className="stat-value">48</div>
                        <div className="stat-label">Mitarbeiter gesamt</div>
                    </div>
                    <div className="stat-card">
                        <div className="stat-icon yellow">
                            <Icon name="calendar" size={24} />
                        </div>
                        <div className="stat-value">156</div>
                        <div className="stat-label">Termine heute</div>
                    </div>
                    <div className="stat-card">
                        <div className="stat-icon red">
                            <Icon name="clock" size={24} />
                        </div>
                        <div className="stat-value">98%</div>
                        <div className="stat-label">Auslastung</div>
                    </div>
                </div>

                <div className="card">
                    <div style={{ textAlign: 'center', padding: '60px 20px' }}>
                        <Icon name="map-pin" size={80} style={{ color: '#9ca3af', marginBottom: 20 }} />
                        <h2 style={{ fontSize: 24, fontWeight: 700, marginBottom: 16 }}>Filialen-Management</h2>
                        <p style={{ color: '#6b7280', marginBottom: 32, maxWidth: 600, margin: '0 auto' }}>
                            Die Filialen-Verwaltung wird bald verfügbar sein. Hier können Sie dann:
                        </p>
                        
                        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 20, maxWidth: 800, margin: '40px auto', textAlign: 'left' }}>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Standorte verwalten</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Adressen, Kontaktdaten, Öffnungszeiten</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Mitarbeiter zuweisen</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Personal pro Filiale organisieren</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Services konfigurieren</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Dienstleistungen pro Standort</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>KI-Agent Setup</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Retell.ai pro Filiale einrichten</div>
                                </div>
                            </div>
                        </div>

                        <div className="badge badge-primary" style={{ fontSize: 14, padding: '8px 16px' }}>
                            <Icon name="clock" size={16} />
                            In Entwicklung
                        </div>
                    </div>
                </div>
            </div>
        );

        const StaffView = () => (
            <div>
                <div className="page-header">
                    <h1 className="page-title">Mitarbeiter</h1>
                    <p className="page-subtitle">Verwalten Sie Ihr Team und deren Verfügbarkeiten</p>
                </div>

                {/* Stats Overview */}
                <div className="stats-grid" style={{ marginBottom: 32 }}>
                    <div className="stat-card">
                        <div className="stat-icon blue">
                            <Icon name="users" size={24} />
                        </div>
                        <div className="stat-value">24</div>
                        <div className="stat-label">Aktive Mitarbeiter</div>
                    </div>
                    <div className="stat-card">
                        <div className="stat-icon green">
                            <Icon name="user-check" size={24} />
                        </div>
                        <div className="stat-value">18</div>
                        <div className="stat-label">Heute verfügbar</div>
                    </div>
                    <div className="stat-card">
                        <div className="stat-icon yellow">
                            <Icon name="briefcase" size={24} />
                        </div>
                        <div className="stat-value">142</div>
                        <div className="stat-label">Termine diese Woche</div>
                    </div>
                    <div className="stat-card">
                        <div className="stat-icon red">
                            <Icon name="star" size={24} />
                        </div>
                        <div className="stat-value">4.8</div>
                        <div className="stat-label">Ø Bewertung</div>
                    </div>
                </div>

                <div className="card">
                    <div style={{ textAlign: 'center', padding: '60px 20px' }}>
                        <Icon name="user-check" size={80} style={{ color: '#9ca3af', marginBottom: 20 }} />
                        <h2 style={{ fontSize: 24, fontWeight: 700, marginBottom: 16 }}>Mitarbeiter-Management</h2>
                        <p style={{ color: '#6b7280', marginBottom: 32, maxWidth: 600, margin: '0 auto' }}>
                            Das vollständige Mitarbeiter-Management wird bald verfügbar sein:
                        </p>
                        
                        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: 20, maxWidth: 800, margin: '40px auto', textAlign: 'left' }}>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Team-Verwaltung</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Profile, Kontaktdaten, Qualifikationen</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Arbeitszeiten</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Schichtpläne und Verfügbarkeiten</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Service-Zuordnung</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Welche Dienste kann wer anbieten</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Performance</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Statistiken und Auslastung</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Kalender-Integration</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Externe Kalender synchronisieren</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Multi-Filiale</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Mitarbeiter mehreren Filialen zuordnen</div>
                                </div>
                            </div>
                        </div>

                        <div className="badge badge-primary" style={{ fontSize: 14, padding: '8px 16px' }}>
                            <Icon name="clock" size={16} />
                            In Entwicklung
                        </div>
                    </div>
                </div>
            </div>
        );

        const ServicesView = () => (
            <div>
                <div className="page-header">
                    <h1 className="page-title">Dienstleistungen</h1>
                    <p className="page-subtitle">Verwalten Sie alle Services und Event-Typen</p>
                </div>

                {/* Stats Overview */}
                <div className="stats-grid" style={{ marginBottom: 32 }}>
                    <div className="stat-card">
                        <div className="stat-icon blue">
                            <Icon name="briefcase" size={24} />
                        </div>
                        <div className="stat-value">32</div>
                        <div className="stat-label">Aktive Services</div>
                    </div>
                    <div className="stat-card">
                        <div className="stat-icon green">
                            <Icon name="trending-up" size={24} />
                        </div>
                        <div className="stat-value">89%</div>
                        <div className="stat-label">Auslastung</div>
                    </div>
                    <div className="stat-card">
                        <div className="stat-icon yellow">
                            <Icon name="clock" size={24} />
                        </div>
                        <div className="stat-value">45m</div>
                        <div className="stat-label">Ø Dauer</div>
                    </div>
                    <div className="stat-card">
                        <div className="stat-icon red">
                            <Icon name="euro" size={24} />
                        </div>
                        <div className="stat-value">€75</div>
                        <div className="stat-label">Ø Preis</div>
                    </div>
                </div>

                <div className="card">
                    <div style={{ textAlign: 'center', padding: '60px 20px' }}>
                        <Icon name="briefcase" size={80} style={{ color: '#9ca3af', marginBottom: 20 }} />
                        <h2 style={{ fontSize: 24, fontWeight: 700, marginBottom: 16 }}>Service-Management</h2>
                        <p style={{ color: '#6b7280', marginBottom: 32, maxWidth: 600, margin: '0 auto' }}>
                            Die Verwaltung von Dienstleistungen und Event-Typen wird bald verfügbar sein:
                        </p>
                        
                        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: 20, maxWidth: 800, margin: '40px auto', textAlign: 'left' }}>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Service-Katalog</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Alle Dienstleistungen zentral verwalten</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Preisgestaltung</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Flexible Preise und Pakete</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Dauer & Kapazität</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Zeitslots und Ressourcenplanung</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Cal.com Integration</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Event-Typen synchronisieren</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Kategorien</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Services gruppieren und organisieren</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Verfügbarkeit</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Pro Filiale und Mitarbeiter</div>
                                </div>
                            </div>
                        </div>

                        <div className="badge badge-primary" style={{ fontSize: 14, padding: '8px 16px' }}>
                            <Icon name="clock" size={16} />
                            In Entwicklung
                        </div>
                    </div>
                </div>
            </div>
        );

        const AnalyticsView = () => (
            <div>
                <div className="page-header">
                    <h1 className="page-title">Analytics</h1>
                    <p className="page-subtitle">Detaillierte Analysen und Business Intelligence</p>
                </div>

                {/* KPI Cards */}
                <div className="stats-grid" style={{ marginBottom: 32 }}>
                    <div className="stat-card">
                        <div className="stat-icon green">
                            <Icon name="trending-up" size={24} />
                        </div>
                        <div className="stat-value">€124.5k</div>
                        <div className="stat-label">Umsatz MTD</div>
                        <div className="stat-change positive">
                            <Icon name="arrow-up" size={16} />
                            <span>+18.2%</span>
                        </div>
                    </div>
                    <div className="stat-card">
                        <div className="stat-icon blue">
                            <Icon name="users" size={24} />
                        </div>
                        <div className="stat-value">1,234</div>
                        <div className="stat-label">Neue Kunden</div>
                        <div className="stat-change positive">
                            <Icon name="arrow-up" size={16} />
                            <span>+12.5%</span>
                        </div>
                    </div>
                    <div className="stat-card">
                        <div className="stat-icon yellow">
                            <Icon name="phone" size={24} />
                        </div>
                        <div className="stat-value">3,456</div>
                        <div className="stat-label">Anrufe gesamt</div>
                        <div className="stat-change negative">
                            <Icon name="arrow-down" size={16} />
                            <span>-5.3%</span>
                        </div>
                    </div>
                    <div className="stat-card">
                        <div className="stat-icon red">
                            <Icon name="percent" size={24} />
                        </div>
                        <div className="stat-value">87.3%</div>
                        <div className="stat-label">Conversion Rate</div>
                        <div className="stat-change positive">
                            <Icon name="arrow-up" size={16} />
                            <span>+2.1%</span>
                        </div>
                    </div>
                </div>

                <div className="card">
                    <div style={{ textAlign: 'center', padding: '60px 20px' }}>
                        <Icon name="bar-chart-3" size={80} style={{ color: '#9ca3af', marginBottom: 20 }} />
                        <h2 style={{ fontSize: 24, fontWeight: 700, marginBottom: 16 }}>Analytics & Reporting</h2>
                        <p style={{ color: '#6b7280', marginBottom: 32, maxWidth: 600, margin: '0 auto' }}>
                            Umfangreiche Analytics und Reporting-Features werden bald verfügbar sein:
                        </p>
                        
                        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: 20, maxWidth: 800, margin: '40px auto', textAlign: 'left' }}>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Business KPIs</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Umsatz, Conversion, Auslastung</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Trend-Analysen</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Zeitverläufe und Prognosen</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Kunden-Insights</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Verhalten, Retention, Lifetime Value</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Performance Reports</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Mitarbeiter und Service-Analysen</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Custom Dashboards</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Individuelle Berichte erstellen</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Export & Automation</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>PDF, Excel, automatische Reports</div>
                                </div>
                            </div>
                        </div>

                        <div style={{ marginTop: 40, padding: 20, background: '#f9fafb', borderRadius: 8 }}>
                            <div style={{ fontSize: 14, color: '#6b7280', marginBottom: 12 }}>Beispiel-Metriken</div>
                            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: 16, fontSize: 14 }}>
                                <div>
                                    <div style={{ fontWeight: 600 }}>Ø Terminwert</div>
                                    <div style={{ color: '#3b82f6' }}>€82.50</div>
                                </div>
                                <div>
                                    <div style={{ fontWeight: 600 }}>No-Show Rate</div>
                                    <div style={{ color: '#ef4444' }}>8.3%</div>
                                </div>
                                <div>
                                    <div style={{ fontWeight: 600 }}>Ø Bewertung</div>
                                    <div style={{ color: '#10b981' }}>4.7/5.0</div>
                                </div>
                            </div>
                        </div>

                        <div className="badge badge-primary" style={{ fontSize: 14, padding: '8px 16px', marginTop: 32 }}>
                            <Icon name="clock" size={16} />
                            In Entwicklung
                        </div>
                    </div>
                </div>
            </div>
        );

        const SettingsView = () => (
            <div>
                <div className="page-header">
                    <h1 className="page-title">Einstellungen</h1>
                    <p className="page-subtitle">System- und Integrationseinstellungen verwalten</p>
                </div>

                <div className="card" style={{ marginBottom: 24 }}>
                    <div className="card-header">
                        <h2 className="card-title">System Status</h2>
                    </div>
                    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: 20 }}>
                        <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
                            <div style={{ width: 12, height: 12, borderRadius: '50%', background: '#10b981' }}></div>
                            <div>
                                <div style={{ fontWeight: 600 }}>API Status</div>
                                <div style={{ fontSize: 14, color: '#6b7280' }}>Alle Systeme operational</div>
                            </div>
                        </div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
                            <div style={{ width: 12, height: 12, borderRadius: '50%', background: '#10b981' }}></div>
                            <div>
                                <div style={{ fontWeight: 600 }}>Queue Status</div>
                                <div style={{ fontSize: 14, color: '#6b7280' }}>Horizon läuft (142 Jobs)</div>
                            </div>
                        </div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
                            <div style={{ width: 12, height: 12, borderRadius: '50%', background: '#f59e0b' }}></div>
                            <div>
                                <div style={{ fontWeight: 600 }}>Webhooks</div>
                                <div style={{ fontSize: 14, color: '#6b7280' }}>3 fehlgeschlagen (letzte 24h)</div>
                            </div>
                        </div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
                            <div style={{ width: 12, height: 12, borderRadius: '50%', background: '#10b981' }}></div>
                            <div>
                                <div style={{ fontWeight: 600 }}>Cache</div>
                                <div style={{ fontSize: 14, color: '#6b7280' }}>Redis: 2.1GB / 8GB</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div className="card">
                    <div style={{ textAlign: 'center', padding: '60px 20px' }}>
                        <Icon name="settings" size={80} style={{ color: '#9ca3af', marginBottom: 20 }} />
                        <h2 style={{ fontSize: 24, fontWeight: 700, marginBottom: 16 }}>System-Einstellungen</h2>
                        <p style={{ color: '#6b7280', marginBottom: 32, maxWidth: 600, margin: '0 auto' }}>
                            Erweiterte Einstellungen und Konfigurationen werden bald verfügbar sein:
                        </p>
                        
                        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: 20, maxWidth: 800, margin: '40px auto', textAlign: 'left' }}>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>API Konfiguration</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Webhooks, Rate Limits, API Keys</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Integrationen</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Cal.com, Retell.ai, Stripe</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Benachrichtigungen</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Email, SMS, Push-Einstellungen</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Sicherheit</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>2FA, IP-Whitelist, Audit Logs</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Backup & Recovery</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Automatische Backups, Restore</div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: 12 }}>
                                <Icon name="check-circle" size={20} style={{ color: '#10b981', flexShrink: 0, marginTop: 2 }} />
                                <div>
                                    <div style={{ fontWeight: 600, marginBottom: 4 }}>Performance</div>
                                    <div style={{ fontSize: 14, color: '#6b7280' }}>Cache, Queue, Optimierungen</div>
                                </div>
                            </div>
                        </div>

                        <div style={{ marginTop: 40, display: 'flex', gap: 16, justifyContent: 'center' }}>
                            <div style={{ padding: '12px 24px', background: '#f3f4f6', borderRadius: 8 }}>
                                <Icon name="shield" size={20} style={{ marginBottom: 8 }} />
                                <div style={{ fontSize: 14, fontWeight: 600 }}>Security</div>
                                <div style={{ fontSize: 12, color: '#6b7280' }}>Erweiterte Sicherheit</div>
                            </div>
                            <div style={{ padding: '12px 24px', background: '#f3f4f6', borderRadius: 8 }}>
                                <Icon name="zap" size={20} style={{ marginBottom: 8 }} />
                                <div style={{ fontSize: 14, fontWeight: 600 }}>Performance</div>
                                <div style={{ fontSize: 12, color: '#6b7280' }}>Optimierungen</div>
                            </div>
                            <div style={{ padding: '12px 24px', background: '#f3f4f6', borderRadius: 8 }}>
                                <Icon name="database" size={20} style={{ marginBottom: 8 }} />
                                <div style={{ fontSize: 14, fontWeight: 600 }}>Backup</div>
                                <div style={{ fontSize: 12, color: '#6b7280' }}>Datensicherung</div>
                            </div>
                        </div>

                        <div className="badge badge-primary" style={{ fontSize: 14, padding: '8px 16px', marginTop: 32 }}>
                            <Icon name="clock" size={16} />
                            In Entwicklung
                        </div>
                    </div>
                </div>
            </div>
        );

        // Appointment Form Modal Component
        const AppointmentFormModal = ({ appointment, companies, branches, customers, staff, services, onClose, onSave }) => {
            const [formData, setFormData] = useState({
                company_id: appointment?.company?.id || '',
                branch_id: appointment?.branch?.id || '',
                customer_id: appointment?.customer?.id || '',
                staff_id: appointment?.staff?.id || '',
                service_id: appointment?.service?.id || '',
                start_time: appointment?.start_time ? new Date(appointment.start_time).toISOString().slice(0, 16) : '',
                end_time: appointment?.end_time ? new Date(appointment.end_time).toISOString().slice(0, 16) : '',
                status: appointment?.status || 'scheduled',
                price: appointment?.price || '',
                notes: appointment?.notes || '',
                payment_status: appointment?.payment_status || 'pending'
            });
            const [filteredBranches, setFilteredBranches] = useState([]);
            const [showCustomerCreate, setShowCustomerCreate] = useState(false);
            const [newCustomer, setNewCustomer] = useState({ name: '', phone: '', email: '' });
            const [saving, setSaving] = useState(false);
            const { showToast } = useToast();

            useEffect(() => {
                if (formData.company_id) {
                    const companyBranches = branches.filter(b => b.company_id === parseInt(formData.company_id));
                    setFilteredBranches(companyBranches);
                }
            }, [formData.company_id, branches]);

            useEffect(() => {
                if (formData.service_id && formData.start_time) {
                    const service = services.find(s => s.id === parseInt(formData.service_id));
                    if (service && service.duration) {
                        const startTime = new Date(formData.start_time);
                        const endTime = new Date(startTime.getTime() + service.duration * 60000);
                        setFormData(prev => ({
                            ...prev,
                            end_time: endTime.toISOString().slice(0, 16)
                        }));
                    }
                }
            }, [formData.service_id, formData.start_time, services]);

            const handleSubmit = async (e) => {
                e.preventDefault();
                setSaving(true);

                try {
                    const url = appointment
                        ? `/admin/api/appointments/${appointment.id}`
                        : '/admin/api/appointments';
                    
                    const method = appointment ? 'PUT' : 'POST';
                    
                    const response = await fetch(url, {
                        method,
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(formData)
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.message || 'Fehler beim Speichern');
                    }

                    showToast(
                        appointment ? 'Termin erfolgreich aktualisiert' : 'Termin erfolgreich erstellt',
                        'success'
                    );
                    onSave();
                } catch (error) {
                    console.error('Error saving appointment:', error);
                    showToast(error.message || 'Fehler beim Speichern des Termins', 'error');
                } finally {
                    setSaving(false);
                }
            };

            const handleCreateCustomer = async () => {
                if (!newCustomer.name || !newCustomer.phone) {
                    showToast('Name und Telefonnummer sind erforderlich', 'error');
                    return;
                }

                try {
                    const response = await fetch('/admin/api/customers', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            ...newCustomer,
                            company_id: formData.company_id
                        })
                    });

                    if (!response.ok) throw new Error('Fehler beim Erstellen des Kunden');

                    const customer = await response.json();
                    
                    // Refresh customers list
                    const customersRes = await fetch('/admin/api/customers');
                    const customersData = await customersRes.json();
                    customers.push(...customersData.data);
                    
                    setFormData(prev => ({ ...prev, customer_id: customer.id }));
                    setShowCustomerCreate(false);
                    setNewCustomer({ name: '', phone: '', email: '' });
                    showToast('Kunde erfolgreich erstellt', 'success');
                } catch (error) {
                    showToast('Fehler beim Erstellen des Kunden', 'error');
                }
            };

            return (
                <div className="modal-overlay" onClick={onClose}>
                    <div className="modal-content" onClick={(e) => e.stopPropagation()} style={{ maxWidth: '600px' }}>
                        <div className="modal-header">
                            <h2 className="modal-title">
                                {appointment ? 'Termin bearbeiten' : 'Neuer Termin'}
                            </h2>
                            <button onClick={onClose} className="modal-close">×</button>
                        </div>
                        <form onSubmit={handleSubmit}>
                            <div className="modal-body">
                                <div className="grid grid-cols-2 gap-4">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                            Unternehmen *
                                        </label>
                                        <select
                                            className="form-select"
                                            value={formData.company_id}
                                            onChange={(e) => setFormData({ ...formData, company_id: e.target.value, branch_id: '' })}
                                            required
                                        >
                                            <option value="">Wählen...</option>
                                            {companies.map(c => (
                                                <option key={c.id} value={c.id}>{c.name}</option>
                                            ))}
                                        </select>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                            Filiale *
                                        </label>
                                        <select
                                            className="form-select"
                                            value={formData.branch_id}
                                            onChange={(e) => setFormData({ ...formData, branch_id: e.target.value })}
                                            required
                                            disabled={!formData.company_id}
                                        >
                                            <option value="">Wählen...</option>
                                            {filteredBranches.map(b => (
                                                <option key={b.id} value={b.id}>{b.name}</option>
                                            ))}
                                        </select>
                                    </div>
                                </div>

                                <div className="mt-4">
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Kunde *
                                    </label>
                                    {!showCustomerCreate ? (
                                        <div className="flex gap-2">
                                            <select
                                                className="form-select flex-1"
                                                value={formData.customer_id}
                                                onChange={(e) => setFormData({ ...formData, customer_id: e.target.value })}
                                                required
                                            >
                                                <option value="">Wählen...</option>
                                                {customers.map(c => (
                                                    <option key={c.id} value={c.id}>
                                                        {c.name} ({c.phone})
                                                    </option>
                                                ))}
                                            </select>
                                            <button
                                                type="button"
                                                onClick={() => setShowCustomerCreate(true)}
                                                className="btn btn-secondary"
                                            >
                                                Neu
                                            </button>
                                        </div>
                                    ) : (
                                        <div className="border rounded-lg p-3 bg-gray-50">
                                            <div className="grid grid-cols-2 gap-3">
                                                <input
                                                    type="text"
                                                    className="form-input"
                                                    placeholder="Name *"
                                                    value={newCustomer.name}
                                                    onChange={(e) => setNewCustomer({ ...newCustomer, name: e.target.value })}
                                                />
                                                <input
                                                    type="tel"
                                                    className="form-input"
                                                    placeholder="Telefon *"
                                                    value={newCustomer.phone}
                                                    onChange={(e) => setNewCustomer({ ...newCustomer, phone: e.target.value })}
                                                />
                                            </div>
                                            <input
                                                type="email"
                                                className="form-input mt-2"
                                                placeholder="E-Mail (optional)"
                                                value={newCustomer.email}
                                                onChange={(e) => setNewCustomer({ ...newCustomer, email: e.target.value })}
                                            />
                                            <div className="flex gap-2 mt-2">
                                                <button
                                                    type="button"
                                                    onClick={handleCreateCustomer}
                                                    className="btn btn-primary btn-sm"
                                                >
                                                    Erstellen
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => {
                                                        setShowCustomerCreate(false);
                                                        setNewCustomer({ name: '', phone: '', email: '' });
                                                    }}
                                                    className="btn btn-secondary btn-sm"
                                                >
                                                    Abbrechen
                                                </button>
                                            </div>
                                        </div>
                                    )}
                                </div>

                                <div className="grid grid-cols-2 gap-4 mt-4">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                            Service *
                                        </label>
                                        <select
                                            className="form-select"
                                            value={formData.service_id}
                                            onChange={(e) => setFormData({ ...formData, service_id: e.target.value })}
                                            required
                                        >
                                            <option value="">Wählen...</option>
                                            {services.map(s => (
                                                <option key={s.id} value={s.id}>
                                                    {s.name} ({s.duration} Min.)
                                                </option>
                                            ))}
                                        </select>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                            Mitarbeiter *
                                        </label>
                                        <select
                                            className="form-select"
                                            value={formData.staff_id}
                                            onChange={(e) => setFormData({ ...formData, staff_id: e.target.value })}
                                            required
                                        >
                                            <option value="">Wählen...</option>
                                            {staff.map(s => (
                                                <option key={s.id} value={s.id}>{s.name}</option>
                                            ))}
                                        </select>
                                    </div>
                                </div>

                                <div className="grid grid-cols-2 gap-4 mt-4">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                            Startzeit *
                                        </label>
                                        <input
                                            type="datetime-local"
                                            className="form-input"
                                            value={formData.start_time}
                                            onChange={(e) => setFormData({ ...formData, start_time: e.target.value })}
                                            required
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                            Endzeit *
                                        </label>
                                        <input
                                            type="datetime-local"
                                            className="form-input"
                                            value={formData.end_time}
                                            onChange={(e) => setFormData({ ...formData, end_time: e.target.value })}
                                            required
                                        />
                                    </div>
                                </div>

                                <div className="grid grid-cols-2 gap-4 mt-4">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                            Status
                                        </label>
                                        <select
                                            className="form-select"
                                            value={formData.status}
                                            onChange={(e) => setFormData({ ...formData, status: e.target.value })}
                                        >
                                            <option value="scheduled">Geplant</option>
                                            <option value="confirmed">Bestätigt</option>
                                            <option value="completed">Abgeschlossen</option>
                                            <option value="cancelled">Storniert</option>
                                            <option value="no_show">Nicht erschienen</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                            Preis (€)
                                        </label>
                                        <input
                                            type="number"
                                            step="0.01"
                                            className="form-input"
                                            value={formData.price}
                                            onChange={(e) => setFormData({ ...formData, price: e.target.value })}
                                        />
                                    </div>
                                </div>

                                <div className="mt-4">
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Notizen
                                    </label>
                                    <textarea
                                        className="form-input"
                                        rows="3"
                                        value={formData.notes}
                                        onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
                                    />
                                </div>
                            </div>
                            <div className="modal-footer">
                                <button type="button" onClick={onClose} className="btn btn-secondary">
                                    Abbrechen
                                </button>
                                <button type="submit" className="btn btn-primary" disabled={saving}>
                                    {saving ? 'Speichern...' : 'Speichern'}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            );
        };

        // Appointment Detail Modal Component
        const AppointmentDetailModal = ({ appointment, onClose, onEdit }) => {
            const formatDate = (dateString) => {
                if (!dateString) return '-';
                return new Date(dateString).toLocaleString('de-DE', {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            };

            const getStatusBadge = (status) => {
                const statusConfig = {
                    scheduled: { color: 'bg-blue-100 text-blue-800', label: 'Geplant' },
                    confirmed: { color: 'bg-green-100 text-green-800', label: 'Bestätigt' },
                    completed: { color: 'bg-gray-100 text-gray-800', label: 'Abgeschlossen' },
                    cancelled: { color: 'bg-red-100 text-red-800', label: 'Storniert' },
                    no_show: { color: 'bg-yellow-100 text-yellow-800', label: 'Nicht erschienen' }
                };
                
                const config = statusConfig[status] || { color: 'bg-gray-100 text-gray-800', label: status };
                
                return (
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${config.color}`}>
                        {config.label}
                    </span>
                );
            };

            return (
                <div className="modal-overlay" onClick={onClose}>
                    <div className="modal-content" onClick={(e) => e.stopPropagation()} style={{ maxWidth: '700px' }}>
                        <div className="modal-header">
                            <h2 className="modal-title">Termindetails</h2>
                            <button onClick={onClose} className="modal-close">×</button>
                        </div>
                        <div className="modal-body">
                            {/* Status and Actions */}
                            <div className="flex justify-between items-center mb-6">
                                <div>{getStatusBadge(appointment.status)}</div>
                                <button onClick={onEdit} className="btn btn-primary btn-sm">
                                    Bearbeiten
                                </button>
                            </div>

                            {/* Main Info */}
                            <div className="grid grid-cols-2 gap-6">
                                <div>
                                    <h3 className="text-lg font-semibold mb-3">Termininformationen</h3>
                                    <dl className="space-y-2">
                                        <div>
                                            <dt className="text-sm font-medium text-gray-500">Datum & Zeit</dt>
                                            <dd className="text-sm text-gray-900">
                                                {formatDate(appointment.start_time)}
                                                {appointment.end_time && ` - ${appointment.end_time}`}
                                            </dd>
                                        </div>
                                        <div>
                                            <dt className="text-sm font-medium text-gray-500">Service</dt>
                                            <dd className="text-sm text-gray-900">
                                                {appointment.service?.name || '-'}
                                                {appointment.service?.duration && ` (${appointment.service.duration} Min.)`}
                                            </dd>
                                        </div>
                                        <div>
                                            <dt className="text-sm font-medium text-gray-500">Mitarbeiter</dt>
                                            <dd className="text-sm text-gray-900">{appointment.staff?.name || '-'}</dd>
                                        </div>
                                        <div>
                                            <dt className="text-sm font-medium text-gray-500">Preis</dt>
                                            <dd className="text-sm text-gray-900">
                                                {appointment.price ? `€${appointment.price.toFixed(2)}` : '-'}
                                            </dd>
                                        </div>
                                        <div>
                                            <dt className="text-sm font-medium text-gray-500">Zahlungsstatus</dt>
                                            <dd className="text-sm text-gray-900">
                                                {appointment.payment_status || 'Ausstehend'}
                                            </dd>
                                        </div>
                                    </dl>
                                </div>

                                <div>
                                    <h3 className="text-lg font-semibold mb-3">Kundeninformationen</h3>
                                    <dl className="space-y-2">
                                        <div>
                                            <dt className="text-sm font-medium text-gray-500">Name</dt>
                                            <dd className="text-sm text-gray-900">{appointment.customer?.name || '-'}</dd>
                                        </div>
                                        <div>
                                            <dt className="text-sm font-medium text-gray-500">Telefon</dt>
                                            <dd className="text-sm text-gray-900">{appointment.customer?.phone || '-'}</dd>
                                        </div>
                                        <div>
                                            <dt className="text-sm font-medium text-gray-500">E-Mail</dt>
                                            <dd className="text-sm text-gray-900">{appointment.customer?.email || '-'}</dd>
                                        </div>
                                        {appointment.no_show_count > 0 && (
                                            <div>
                                                <dt className="text-sm font-medium text-gray-500">No-Shows</dt>
                                                <dd className="text-sm text-red-600 font-medium">
                                                    {appointment.no_show_count} mal nicht erschienen
                                                </dd>
                                            </div>
                                        )}
                                    </dl>
                                </div>
                            </div>

                            {/* Additional Info */}
                            <div className="mt-6 pt-6 border-t">
                                <h3 className="text-lg font-semibold mb-3">Weitere Informationen</h3>
                                <dl className="grid grid-cols-2 gap-4">
                                    <div>
                                        <dt className="text-sm font-medium text-gray-500">Unternehmen</dt>
                                        <dd className="text-sm text-gray-900">{appointment.company?.name || '-'}</dd>
                                    </div>
                                    <div>
                                        <dt className="text-sm font-medium text-gray-500">Filiale</dt>
                                        <dd className="text-sm text-gray-900">{appointment.branch?.name || '-'}</dd>
                                    </div>
                                    <div>
                                        <dt className="text-sm font-medium text-gray-500">Erinnerung gesendet</dt>
                                        <dd className="text-sm text-gray-900">
                                            {appointment.reminder_sent ? 'Ja' : 'Nein'}
                                        </dd>
                                    </div>
                                    <div>
                                        <dt className="text-sm font-medium text-gray-500">Cal.com Sync</dt>
                                        <dd className="text-sm text-gray-900">
                                            {appointment.cal_event_id ? 'Synchronisiert' : 'Nicht synchronisiert'}
                                        </dd>
                                    </div>
                                    <div>
                                        <dt className="text-sm font-medium text-gray-500">Erstellt am</dt>
                                        <dd className="text-sm text-gray-900">{formatDate(appointment.created_at)}</dd>
                                    </div>
                                    <div>
                                        <dt className="text-sm font-medium text-gray-500">Zuletzt aktualisiert</dt>
                                        <dd className="text-sm text-gray-900">{formatDate(appointment.updated_at)}</dd>
                                    </div>
                                </dl>
                            </div>

                            {/* Notes */}
                            {appointment.notes && (
                                <div className="mt-6 pt-6 border-t">
                                    <h3 className="text-lg font-semibold mb-3">Notizen</h3>
                                    <p className="text-sm text-gray-700 whitespace-pre-wrap">{appointment.notes}</p>
                                </div>
                            )}

                            {/* Timeline */}
                            <div className="mt-6 pt-6 border-t">
                                <h3 className="text-lg font-semibold mb-3">Aktivitätsverlauf</h3>
                                <div className="space-y-3">
                                    <div className="flex items-start">
                                        <div className="flex-shrink-0">
                                            <div className="h-8 w-8 bg-gray-200 rounded-full flex items-center justify-center">
                                                <svg className="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                                </svg>
                                            </div>
                                        </div>
                                        <div className="ml-3">
                                            <p className="text-sm font-medium text-gray-900">Termin erstellt</p>
                                            <p className="text-sm text-gray-500">{formatDate(appointment.created_at)}</p>
                                        </div>
                                    </div>
                                    {appointment.reminder_sent && (
                                        <div className="flex items-start">
                                            <div className="flex-shrink-0">
                                                <div className="h-8 w-8 bg-blue-100 rounded-full flex items-center justify-center">
                                                    <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                                                    </svg>
                                                </div>
                                            </div>
                                            <div className="ml-3">
                                                <p className="text-sm font-medium text-gray-900">Erinnerung gesendet</p>
                                                <p className="text-sm text-gray-500">-</p>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            );
        };

        // Calendar View Component
        const CalendarView = ({ appointments, onClose, onAppointmentClick }) => {
            const [currentDate, setCurrentDate] = useState(new Date());
            const [view, setView] = useState('month'); // month, week, day

            const getDaysInMonth = (date) => {
                const year = date.getFullYear();
                const month = date.getMonth();
                const firstDay = new Date(year, month, 1);
                const lastDay = new Date(year, month + 1, 0);
                const daysInMonth = lastDay.getDate();
                const startingDayOfWeek = firstDay.getDay();
                
                const days = [];
                
                // Add empty days for the start of the month
                for (let i = 0; i < startingDayOfWeek; i++) {
                    days.push(null);
                }
                
                // Add all days of the month
                for (let i = 1; i <= daysInMonth; i++) {
                    days.push(new Date(year, month, i));
                }
                
                return days;
            };

            const getAppointmentsForDay = (date) => {
                if (!date) return [];
                return appointments.filter(apt => {
                    const aptDate = new Date(apt.start_time);
                    return aptDate.toDateString() === date.toDateString();
                });
            };

            const navigateMonth = (direction) => {
                const newDate = new Date(currentDate);
                newDate.setMonth(newDate.getMonth() + direction);
                setCurrentDate(newDate);
            };

            const monthNames = [
                'Januar', 'Februar', 'März', 'April', 'Mai', 'Juni',
                'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'
            ];

            const dayNames = ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'];

            return (
                <div className="modal-overlay" onClick={onClose}>
                    <div className="modal-content" onClick={(e) => e.stopPropagation()} style={{ maxWidth: '900px', maxHeight: '90vh', overflow: 'auto' }}>
                        <div className="modal-header">
                            <h2 className="modal-title">Kalenderansicht</h2>
                            <button onClick={onClose} className="modal-close">×</button>
                        </div>
                        <div className="modal-body">
                            {/* Calendar Controls */}
                            <div className="flex justify-between items-center mb-4">
                                <div className="flex items-center gap-2">
                                    <button
                                        onClick={() => navigateMonth(-1)}
                                        className="p-2 hover:bg-gray-100 rounded"
                                    >
                                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                                        </svg>
                                    </button>
                                    <h3 className="text-lg font-semibold">
                                        {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}
                                    </h3>
                                    <button
                                        onClick={() => navigateMonth(1)}
                                        className="p-2 hover:bg-gray-100 rounded"
                                    >
                                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                                        </svg>
                                    </button>
                                </div>
                                <button
                                    onClick={() => setCurrentDate(new Date())}
                                    className="btn btn-secondary btn-sm"
                                >
                                    Heute
                                </button>
                            </div>

                            {/* Calendar Grid */}
                            <div className="bg-white rounded-lg shadow">
                                {/* Day Headers */}
                                <div className="grid grid-cols-7 border-b">
                                    {dayNames.map(day => (
                                        <div key={day} className="px-3 py-2 text-center text-sm font-medium text-gray-700">
                                            {day}
                                        </div>
                                    ))}
                                </div>
                                
                                {/* Days Grid */}
                                <div className="grid grid-cols-7">
                                    {getDaysInMonth(currentDate).map((day, index) => {
                                        const dayAppointments = getAppointmentsForDay(day);
                                        const isToday = day && day.toDateString() === new Date().toDateString();
                                        
                                        return (
                                            <div
                                                key={index}
                                                className={`min-h-[100px] p-2 border-r border-b ${
                                                    !day ? 'bg-gray-50' : ''
                                                } ${isToday ? 'bg-blue-50' : ''}`}
                                            >
                                                {day && (
                                                    <>
                                                        <div className={`text-sm font-medium mb-1 ${
                                                            isToday ? 'text-blue-600' : 'text-gray-900'
                                                        }`}>
                                                            {day.getDate()}
                                                        </div>
                                                        <div className="space-y-1">
                                                            {dayAppointments.slice(0, 3).map(apt => (
                                                                <div
                                                                    key={apt.id}
                                                                    onClick={() => onAppointmentClick(apt)}
                                                                    className="text-xs p-1 rounded cursor-pointer hover:opacity-80 ${
                                                                        apt.status === 'confirmed' ? 'bg-green-100 text-green-800' :
                                                                        apt.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                                                                        'bg-blue-100 text-blue-800'
                                                                    }`}
                                                                >
                                                                    <div className="font-medium truncate">
                                                                        {new Date(apt.start_time).toLocaleTimeString('de-DE', {
                                                                            hour: '2-digit',
                                                                            minute: '2-digit'
                                                                        })}
                                                                    </div>
                                                                    <div className="truncate">
                                                                        {apt.customer?.name || 'Unbekannt'}
                                                                    </div>
                                                                </div>
                                                            ))}
                                                            {dayAppointments.length > 3 && (
                                                                <div className="text-xs text-gray-500 text-center">
                                                                    +{dayAppointments.length - 3} mehr
                                                                </div>
                                                            )}
                                                        </div>
                                                    </>
                                                )}
                                            </div>
                                        );
                                    })}
                                </div>
                            </div>

                            {/* Legend */}
                            <div className="mt-4 flex items-center gap-4 text-sm">
                                <div className="flex items-center gap-2">
                                    <div className="w-4 h-4 bg-blue-100 rounded"></div>
                                    <span>Geplant</span>
                                </div>
                                <div className="flex items-center gap-2">
                                    <div className="w-4 h-4 bg-green-100 rounded"></div>
                                    <span>Bestätigt</span>
                                </div>
                                <div className="flex items-center gap-2">
                                    <div className="w-4 h-4 bg-red-100 rounded"></div>
                                    <span>Storniert</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            );
        };

        // Initialize the app
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(
            <ToastProvider>
                <App />
            </ToastProvider>
        );
    </script>
</body>
</html>