<?php

namespace Database\Factories;

use App\Models\AppointmentModificationStat;
use App\Models\Customer;
use Illuminate\Database\Eloquent\Factories\Factory;
use Carbon\Carbon;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\AppointmentModificationStat>
 */
class AppointmentModificationStatFactory extends Factory
{
    protected $model = AppointmentModificationStat::class;

    /**
     * Define the model's default state.
     *
     * Note: This factory is primarily for testing. In production, these records
     * are generated by a dedicated MaterializedStatService.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        $statType = $this->faker->randomElement(AppointmentModificationStat::STAT_TYPES);
        $days = $this->getDaysForStatType($statType);

        $periodEnd = Carbon::now();
        $periodStart = Carbon::now()->subDays($days);

        return [
            'customer_id' => Customer::factory(),
            'stat_type' => $statType,
            'period_start' => $periodStart,
            'period_end' => $periodEnd,
            'count' => $this->generateRealisticCount($statType),
            'calculated_at' => Carbon::now()->subMinutes($this->faker->numberBetween(0, 60)),
        ];
    }

    /**
     * Get the number of days for a stat type.
     *
     * @param string $statType
     * @return int
     */
    private function getDaysForStatType(string $statType): int
    {
        return match ($statType) {
            AppointmentModificationStat::STAT_TYPE_CANCEL_30D,
            AppointmentModificationStat::STAT_TYPE_RESCHEDULE_30D => 30,
            AppointmentModificationStat::STAT_TYPE_CANCEL_90D,
            AppointmentModificationStat::STAT_TYPE_RESCHEDULE_90D => 90,
            default => 30,
        };
    }

    /**
     * Generate realistic count based on stat type.
     *
     * @param string $statType
     * @return int
     */
    private function generateRealisticCount(string $statType): int
    {
        // Most customers have few modifications, some have many
        $distribution = $this->faker->randomElement([
            'good_customer' => 70,    // 70% are good customers
            'moderate' => 20,         // 20% are moderate
            'problematic' => 10,      // 10% are problematic
        ]);

        $baseCount = match ($distribution) {
            'good_customer' => $this->faker->numberBetween(0, 2),
            'moderate' => $this->faker->numberBetween(2, 5),
            'problematic' => $this->faker->numberBetween(5, 12),
        };

        // 90-day stats should be higher than 30-day stats
        if (str_contains($statType, '90d')) {
            $baseCount = (int) ($baseCount * $this->faker->randomFloat(2, 2.0, 3.5));
        }

        return $baseCount;
    }

    /**
     * Create a 30-day cancellation stat.
     */
    public function cancel30d(): static
    {
        return $this->state(fn (array $attributes) => [
            'stat_type' => AppointmentModificationStat::STAT_TYPE_CANCEL_30D,
            'period_start' => Carbon::now()->subDays(30),
            'period_end' => Carbon::now(),
        ]);
    }

    /**
     * Create a 30-day reschedule stat.
     */
    public function reschedule30d(): static
    {
        return $this->state(fn (array $attributes) => [
            'stat_type' => AppointmentModificationStat::STAT_TYPE_RESCHEDULE_30D,
            'period_start' => Carbon::now()->subDays(30),
            'period_end' => Carbon::now(),
        ]);
    }

    /**
     * Create a 90-day cancellation stat.
     */
    public function cancel90d(): static
    {
        return $this->state(fn (array $attributes) => [
            'stat_type' => AppointmentModificationStat::STAT_TYPE_CANCEL_90D,
            'period_start' => Carbon::now()->subDays(90),
            'period_end' => Carbon::now(),
        ]);
    }

    /**
     * Create a 90-day reschedule stat.
     */
    public function reschedule90d(): static
    {
        return $this->state(fn (array $attributes) => [
            'stat_type' => AppointmentModificationStat::STAT_TYPE_RESCHEDULE_90D,
            'period_start' => Carbon::now()->subDays(90),
            'period_end' => Carbon::now(),
        ]);
    }

    /**
     * Create a stat for a good customer (low count).
     */
    public function goodCustomer(): static
    {
        return $this->state(fn (array $attributes) => [
            'count' => $this->faker->numberBetween(0, 2),
        ]);
    }

    /**
     * Create a stat for a moderate customer.
     */
    public function moderateCustomer(): static
    {
        return $this->state(fn (array $attributes) => [
            'count' => $this->faker->numberBetween(3, 5),
        ]);
    }

    /**
     * Create a stat for a problematic customer (high count).
     */
    public function problematicCustomer(): static
    {
        return $this->state(fn (array $attributes) => [
            'count' => $this->faker->numberBetween(6, 15),
        ]);
    }

    /**
     * Create a recently calculated stat.
     */
    public function recentlyCalculated(): static
    {
        return $this->state(fn (array $attributes) => [
            'calculated_at' => Carbon::now()->subMinutes($this->faker->numberBetween(0, 30)),
        ]);
    }

    /**
     * Create a stale stat (needs recalculation).
     */
    public function stale(): static
    {
        return $this->state(fn (array $attributes) => [
            'calculated_at' => Carbon::now()->subHours($this->faker->numberBetween(2, 48)),
        ]);
    }

    /**
     * Create a complete set of stats for a customer.
     *
     * @param Customer $customer
     * @return array
     */
    public static function createCompleteSet(Customer $customer): array
    {
        return [
            self::factory()->forCustomer($customer)->cancel30d()->create(),
            self::factory()->forCustomer($customer)->reschedule30d()->create(),
            self::factory()->forCustomer($customer)->cancel90d()->create(),
            self::factory()->forCustomer($customer)->reschedule90d()->create(),
        ];
    }

    /**
     * Create stat for specific customer.
     */
    public function forCustomer(Customer $customer): static
    {
        return $this->state(fn (array $attributes) => [
            'customer_id' => $customer->id,
        ]);
    }

    /**
     * Create stat with custom rolling window.
     */
    public function withCustomWindow(Carbon $start, Carbon $end): static
    {
        return $this->state(fn (array $attributes) => [
            'period_start' => $start,
            'period_end' => $end,
        ]);
    }
}
