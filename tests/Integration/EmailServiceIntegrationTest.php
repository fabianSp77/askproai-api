<?php

namespace Tests\Integration;

use PHPUnit\Framework\Attributes\Test;

use Tests\TestCase;
use App\Services\NotificationService;
use App\Models\Appointment;
use App\Models\Call;
use App\Models\Customer;
use App\Models\Company;
use App\Models\Branch;
use App\Models\Staff;
use App\Models\Service;
use App\Jobs\SendCallSummaryEmailJob;
use App\Jobs\SendAppointmentReminderJob;
use App\Mail\AppointmentConfirmationMail;
use App\Mail\CallSummaryEmail;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Queue;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Notification;
use Carbon\Carbon;

class EmailServiceIntegrationTest extends TestCase
{
    use \Illuminate\Foundation\Testing\RefreshDatabase;

    private NotificationService $notificationService;
    private Company $company;
    private Branch $branch;
    private Customer $customer;

    protected function setUp(): void
    {
        parent::setUp();
        
        $this->notificationService = app(NotificationService::class);
        
        // Create test environment
        $this->company = Company::factory()->create([
            'notification_email_enabled' => true,
            'call_summary_email_enabled' => true,
            'appointment_reminder_enabled' => true,
        ]);
        
        $this->branch = Branch::factory()->create([
            'company_id' => $this->company->id,
        ]);
        
        $this->customer = Customer::factory()->create([
            'company_id' => $this->company->id,
            'email' => 'integration-test@example.com',
        ]);
    }

    /** @test */
    public function appointment_booking_triggers_confirmation_email_flow()
    {
        // Arrange
        Mail::fake();
        Queue::fake();
        Event::fake();
        
        $appointment = Appointment::factory()->create([
            'company_id' => $this->company->id,
            'branch_id' => $this->branch->id,
            'customer_id' => $this->customer->id,
            'appointment_datetime' => Carbon::now()->addDays(2),
            'status' => 'scheduled',
        ]);

        // Act - Simulate appointment creation event
        event('appointment.created', $appointment);

        // Process the notification
        $this->notificationService->sendAppointmentConfirmation($appointment);

        // Assert
        Mail::assertSent(AppointmentConfirmationMail::class, function ($mail) use ($appointment) {
            return $mail->hasTo($this->customer->email) &&
                   $mail->appointment->id === $appointment->id &&
                   $mail->hasAttachment(function ($attachment) {
                       return str_contains($attachment['name'], '.ics');
                   });
        });
    }

    /** @test */
    public function call_completion_triggers_summary_email_flow()
    {
        // Arrange
        Mail::fake();
        Queue::fake();
        
        $call = Call::factory()->create([
            'company_id' => $this->company->id,
            'branch_id' => $this->branch->id,
            'customer_id' => $this->customer->id,
            'status' => 'completed',
            'transcript' => 'Full call transcript...',
            'summary' => 'Call summary generated by AI',
        ]);

        // Act - Dispatch job
        SendCallSummaryEmailJob::dispatch($call);

        // Process queue
        Queue::assertPushed(SendCallSummaryEmailJob::class, function ($job) use ($call) {
            // Manually run the job
            $job->handle();
            return $job->call->id === $call->id;
        });

        // Assert
        Mail::assertSent(CallSummaryEmail::class, function ($mail) use ($call) {
            return $mail->hasTo($this->customer->email) &&
                   $mail->call->id === $call->id;
        });
    }

    /** @test */
    public function appointment_reminder_system_works_end_to_end()
    {
        // Arrange
        Mail::fake();
        Carbon::setTestNow(Carbon::parse('2025-01-15 10:00:00'));
        
        // Create appointments at different time intervals
        $appointments = [
            // 24 hour reminder
            Appointment::factory()->create([
                'company_id' => $this->company->id,
                'customer_id' => $this->customer->id,
                'appointment_datetime' => Carbon::now()->addHours(24),
                'reminder_24h_sent' => false,
            ]),
            // 2 hour reminder
            Appointment::factory()->create([
                'company_id' => $this->company->id,
                'customer_id' => $this->customer->id,
                'appointment_datetime' => Carbon::now()->addHours(2),
                'reminder_2h_sent' => false,
            ]),
            // 30 minute reminder
            Appointment::factory()->create([
                'company_id' => $this->company->id,
                'customer_id' => $this->customer->id,
                'appointment_datetime' => Carbon::now()->addMinutes(30),
                'reminder_30min_sent' => false,
            ]),
        ];

        // Act - Run reminder service
        $this->notificationService->sendAppointmentReminders();

        // Assert - Check all reminders were sent
        foreach ($appointments as $appointment) {
            $fresh = $appointment->fresh();
            
            if ($appointment->appointment_datetime->diffInHours(Carbon::now()) >= 23) {
                $this->assertTrue($fresh->reminder_24h_sent);
            } elseif ($appointment->appointment_datetime->diffInHours(Carbon::now()) >= 1.5) {
                $this->assertTrue($fresh->reminder_2h_sent);
            } else {
                $this->assertTrue($fresh->reminder_30min_sent);
            }
        }

        // Verify emails were sent
        Mail::assertSentCount(3);
    }

    /** @test */
    public function email_failure_recovery_mechanism_works()
    {
        // Arrange
        Queue::fake();
        $failCount = 0;
        
        // Mock Mail to fail first 2 attempts, succeed on 3rd
        Mail::shouldReceive('to->send')
            ->times(3)
            ->andReturnUsing(function () use (&$failCount) {
                $failCount++;
                if ($failCount < 3) {
                    throw new \Exception('Temporary mail server error');
                }
                return true;
            });

        $call = Call::factory()->create([
            'company_id' => $this->company->id,
            'customer_id' => $this->customer->id,
        ]);

        // Act
        $job = new SendCallSummaryEmailJob($call);
        
        // Simulate retries
        for ($i = 1; $i <= 3; $i++) {
            try {
                $job->handle();
                break;
            } catch (\Exception $e) {
                if ($i === 3) {
                    throw $e;
                }
                // Simulate backoff
                sleep(1);
            }
        }

        // Assert
        $this->assertEquals(3, $failCount);
        $this->assertTrue($call->fresh()->summary_email_sent);
    }

    /** @test */
    public function bulk_email_sending_respects_rate_limits()
    {
        // Arrange
        Mail::fake();
        Queue::fake();
        
        // Create 50 calls
        $calls = Call::factory()->count(50)->create([
            'company_id' => $this->company->id,
            'customer_id' => $this->customer->id,
        ]);

        // Act - Dispatch all jobs
        foreach ($calls as $call) {
            SendCallSummaryEmailJob::dispatch($call)->delay(now()->addSeconds(rand(1, 60)));
        }

        // Assert - Jobs are queued with delays
        Queue::assertPushed(SendCallSummaryEmailJob::class, 50);
    }

    /** @test */
    public function email_templates_render_correctly_in_multiple_languages()
    {
        // Arrange
        Mail::fake();
        
        $languages = ['en', 'de', 'es', 'fr'];
        
        foreach ($languages as $lang) {
            $customer = Customer::factory()->create([
                'company_id' => $this->company->id,
                'language' => $lang,
            ]);
            
            $appointment = Appointment::factory()->create([
                'company_id' => $this->company->id,
                'customer_id' => $customer->id,
            ]);

            // Act
            $this->notificationService->sendAppointmentConfirmation($appointment);
        }

        // Assert
        Mail::assertSentCount(count($languages));
        
        Mail::assertSent(AppointmentConfirmationMail::class, function ($mail) {
            return in_array($mail->locale, ['en', 'de', 'es', 'fr']);
        });
    }

    /** @test */
    public function email_tracking_and_analytics_work_correctly()
    {
        // Arrange
        Mail::fake();
        
        $appointment = Appointment::factory()->create([
            'company_id' => $this->company->id,
            'customer_id' => $this->customer->id,
        ]);

        // Act
        $this->notificationService->sendAppointmentConfirmation($appointment);

        // Assert - Check email log entry
        $this->assertDatabaseHas('email_logs', [
            'recipient' => $this->customer->email,
            'type' => 'appointment_confirmation',
            'status' => 'sent',
            'related_type' => Appointment::class,
            'related_id' => $appointment->id,
        ]);
    }

    /** @test */
    public function email_attachments_are_properly_handled()
    {
        // Arrange
        Mail::fake();
        
        $call = Call::factory()->create([
            'company_id' => $this->company->id,
            'customer_id' => $this->customer->id,
            'transcript' => str_repeat('Long transcript content. ', 1000),
        ]);

        // Act
        Mail::to($this->customer->email)->send(new CallSummaryEmail($call));

        // Assert
        Mail::assertSent(CallSummaryEmail::class, function ($mail) {
            $attachments = $mail->attachments();
            
            return count($attachments) === 1 &&
                   $attachments[0]['mime'] === 'text/plain' &&
                   strlen($attachments[0]['content']) > 1000;
        });
    }

    protected function tearDown(): void
    {
        Carbon::setTestNow(); // Reset time
        parent::tearDown();
    }
}