import { http, HttpResponse } from 'msw'

const API_BASE_URL = process.env.VITE_API_URL || 'https://api.askproai.de'

export const handlers = [
  // Auth endpoints
  http.post(`${API_BASE_URL}/portal/api/login`, async ({ request }) => {
    const body = await request.json()
    if (body.email === 'test@example.com' && body.password === 'password') {
      return HttpResponse.json({
        token: 'test-token',
        user: {
          id: 1,
          name: 'Test User',
          email: 'test@example.com',
          company_id: 1,
          branch_id: 1,
        }
      })
    }
    return HttpResponse.json({ message: 'Invalid credentials' }, { status: 401 })
  }),

  http.get(`${API_BASE_URL}/portal/api/user`, () => {
    return HttpResponse.json({
      id: 1,
      name: 'Test User',
      email: 'test@example.com',
      company_id: 1,
      branch_id: 1,
    })
  }),

  // Dashboard endpoints
  http.get(`${API_BASE_URL}/portal/api/dashboard/stats`, () => {
    return HttpResponse.json({
      appointments_today: 5,
      appointments_week: 25,
      appointments_month: 100,
      total_customers: 500,
      new_customers: 50,
      calls_today: 20,
      calls_week: 100,
      revenue_month: 5000,
    })
  }),

  // Appointments endpoints
  http.get(`${API_BASE_URL}/portal/api/appointments`, ({ request }) => {
    const url = new URL(request.url)
    const page = url.searchParams.get('page') || '1'
    
    return HttpResponse.json({
      data: Array(10).fill(null).map((_, i) => ({
        id: i + 1,
        customer_name: `Customer ${i + 1}`,
        customer_email: `customer${i + 1}@example.com`,
        customer_phone: `+49123456789${i}`,
        appointment_datetime: '2025-01-15 10:00:00',
        service_name: 'Test Service',
        staff_name: 'Test Staff',
        status: 'scheduled',
        duration: 60,
        price: 100,
      })),
      meta: {
        current_page: parseInt(page),
        last_page: 5,
        total: 50,
        per_page: 10,
      }
    })
  }),

  http.get(`${API_BASE_URL}/portal/api/appointments/:id`, ({ params }) => {
    return HttpResponse.json({
      id: parseInt(params.id as string),
      customer_name: 'John Doe',
      customer_email: 'john@example.com',
      customer_phone: '+491234567890',
      appointment_datetime: '2025-01-15 10:00:00',
      service_name: 'Test Service',
      staff_name: 'Test Staff',
      status: 'scheduled',
      duration: 60,
      price: 100,
      notes: 'Test appointment notes',
      created_at: '2025-01-14 09:00:00',
      updated_at: '2025-01-14 09:00:00',
    })
  }),

  http.post(`${API_BASE_URL}/portal/api/appointments`, async ({ request }) => {
    const body = await request.json()
    return HttpResponse.json({
      id: 100,
      ...body,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    }, { status: 201 })
  }),

  http.put(`${API_BASE_URL}/portal/api/appointments/:id`, async ({ params, request }) => {
    const body = await request.json()
    return HttpResponse.json({
      id: parseInt(params.id as string),
      ...body,
      updated_at: new Date().toISOString(),
    })
  }),

  http.delete(`${API_BASE_URL}/portal/api/appointments/:id`, () => {
    return HttpResponse.json({ message: 'Appointment deleted successfully' })
  }),

  // Calls endpoints
  http.get(`${API_BASE_URL}/portal/api/calls`, () => {
    return HttpResponse.json({
      data: Array(10).fill(null).map((_, i) => ({
        id: i + 1,
        call_id: `call_${i + 1}`,
        from_number: `+49123456789${i}`,
        to_number: '+499876543210',
        duration: 120 + i * 10,
        transcript: 'Test transcript content',
        status: 'completed',
        created_at: '2025-01-14 10:00:00',
      })),
      meta: {
        current_page: 1,
        last_page: 5,
        total: 50,
        per_page: 10,
      }
    })
  }),

  http.get(`${API_BASE_URL}/portal/api/calls/:id`, ({ params }) => {
    return HttpResponse.json({
      id: parseInt(params.id as string),
      call_id: 'call_123',
      from_number: '+491234567890',
      to_number: '+499876543210',
      duration: 120,
      transcript: 'Full transcript of the call...',
      summary: 'Call summary generated by AI',
      status: 'completed',
      recording_url: 'https://example.com/recording.mp3',
      created_at: '2025-01-14 10:00:00',
      customer: {
        id: 1,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '+491234567890',
      }
    })
  }),

  // Customers endpoints
  http.get(`${API_BASE_URL}/portal/api/customers`, () => {
    return HttpResponse.json({
      data: Array(10).fill(null).map((_, i) => ({
        id: i + 1,
        name: `Customer ${i + 1}`,
        email: `customer${i + 1}@example.com`,
        phone: `+49123456789${i}`,
        total_appointments: 5 + i,
        last_appointment: '2025-01-10 10:00:00',
        created_at: '2024-01-01 10:00:00',
      })),
      meta: {
        current_page: 1,
        last_page: 10,
        total: 100,
        per_page: 10,
      }
    })
  }),

  http.get(`${API_BASE_URL}/portal/api/customers/:id`, ({ params }) => {
    return HttpResponse.json({
      id: parseInt(params.id as string),
      name: 'John Doe',
      email: 'john@example.com',
      phone: '+491234567890',
      address: 'Test Street 1',
      city: 'Test City',
      postal_code: '12345',
      notes: 'VIP customer',
      total_appointments: 25,
      total_revenue: 2500,
      last_appointment: '2025-01-10 10:00:00',
      created_at: '2024-01-01 10:00:00',
      appointments: [],
    })
  }),

  // Services endpoints
  http.get(`${API_BASE_URL}/portal/api/services`, () => {
    return HttpResponse.json({
      data: [
        { id: 1, name: 'Haircut', duration: 30, price: 25 },
        { id: 2, name: 'Hair Color', duration: 120, price: 80 },
        { id: 3, name: 'Beard Trim', duration: 15, price: 15 },
      ]
    })
  }),

  // Staff endpoints
  http.get(`${API_BASE_URL}/portal/api/staff`, () => {
    return HttpResponse.json({
      data: [
        { id: 1, name: 'John Staff', email: 'john@staff.com', role: 'barber' },
        { id: 2, name: 'Jane Staff', email: 'jane@staff.com', role: 'stylist' },
      ]
    })
  }),

  // Settings endpoints
  http.get(`${API_BASE_URL}/portal/api/settings`, () => {
    return HttpResponse.json({
      company: {
        name: 'Test Company',
        email: 'info@testcompany.com',
        phone: '+491234567890',
        address: 'Test Street 1',
        city: 'Test City',
        postal_code: '12345',
      },
      notifications: {
        email_enabled: true,
        sms_enabled: false,
        appointment_reminder: true,
        new_appointment: true,
      },
      working_hours: {
        monday: { open: '09:00', close: '18:00' },
        tuesday: { open: '09:00', close: '18:00' },
        wednesday: { open: '09:00', close: '18:00' },
        thursday: { open: '09:00', close: '18:00' },
        friday: { open: '09:00', close: '18:00' },
        saturday: { open: '10:00', close: '14:00' },
        sunday: { closed: true },
      }
    })
  }),

  http.put(`${API_BASE_URL}/portal/api/settings`, async ({ request }) => {
    const body = await request.json()
    return HttpResponse.json({
      message: 'Settings updated successfully',
      data: body,
    })
  }),

  // Email service endpoints
  http.post(`${API_BASE_URL}/api/email/send`, async ({ request }) => {
    const body = await request.json()
    return HttpResponse.json({
      message: 'Email sent successfully',
      message_id: 'test-message-id',
    })
  }),

  // Cache service endpoints
  http.get(`${API_BASE_URL}/api/cache/stats`, () => {
    return HttpResponse.json({
      hits: 1000,
      misses: 100,
      hit_rate: 0.91,
      memory_usage: '128MB',
      keys: 500,
    })
  }),

  // Retell webhook
  http.post(`${API_BASE_URL}/api/retell/webhook`, () => {
    return HttpResponse.json({ message: 'Webhook processed' })
  }),

  // Cal.com webhook
  http.post(`${API_BASE_URL}/api/webhooks/calcom`, () => {
    return HttpResponse.json({ message: 'Webhook processed' })
  }),

  // Stripe webhook
  http.post(`${API_BASE_URL}/api/stripe/webhook`, () => {
    return HttpResponse.json({ message: 'Webhook processed' })
  }),
]